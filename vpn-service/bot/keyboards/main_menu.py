from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
# from api_client import api_client  # –£–±—Ä–∞–Ω–æ - –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
import aiohttp
import structlog
from typing import List, Optional

logger = structlog.get_logger(__name__)


def get_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_main_menu"
            )]
        ]
    )


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á",
                    callback_data="refresh_key"
                )
            ]
        ]
    )
    return keyboard


def get_vpn_key_keyboard_with_countries(current_country_code: str, available_countries: List[dict]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –∏ –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç)
    
    Args:
        current_country_code: ISO –∫–æ–¥ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        available_countries: –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω —Å –∫–ª—é—á–∞–º–∏ {id, code, name, flag_emoji, is_active}
    
    Returns:
        InlineKeyboardMarkup —Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ —Å—Ç—Ä–∞–Ω
    """
    buttons = []
    
    # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞
    buttons.append([
        InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á",
            callback_data="refresh_key"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω—ã
    for country in available_countries:
        country_code = country['code']
        country_name = country['name']
        flag_emoji = country['flag_emoji']
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–∞ —Å—Ç—Ä–∞–Ω–∞ —Ç–µ–∫—É—â–µ–π
        is_current = country_code == current_country_code
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        if is_current:
            # –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –≥–∞–ª–æ—á–∫–æ–π –∏ –¥–µ–ª–∞–µ–º disabled (–Ω–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π)
            button_text = f"{flag_emoji} {country_name} ‚úì"
            # –î–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º callback, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è
            callback_data = f"current_country:{country_code}"
        else:
            # –î—Ä—É–≥–∏–µ —Å—Ç—Ä–∞–Ω—ã - –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
            button_text = f"{flag_emoji} {country_name}"
            callback_data = f"switch_country:{country_code}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç—Ä–∞–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –º–∞–∫–µ—Ç)
        buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=callback_data
            )
        ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_country_selection_loading_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å)
    """
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="‚è≥ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...",
                callback_data="switching_in_progress"
            )]
        ]
    )


def get_country_fallback_keyboard(available_countries: List[dict]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ fallback —Å—Ç—Ä–∞–Ω—ã –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    
    Args:
        available_countries: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω –¥–ª—è fallback
    """
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º
    buttons.append([
        InlineKeyboardButton(
            text="‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–µ—Ä–≤–µ—Ä:",
            callback_data="fallback_info"
        )
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
    for country in available_countries:
        button_text = f"{country['flag_emoji']} {country['name']}"
        callback_data = f"switch_country:{country['code']}"
        
        buttons.append([
            InlineKeyboardButton(
                text=button_text,
                callback_data=callback_data
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    buttons.append([
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_country_switch"
        )
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def get_subscription_keyboard_with_autopay() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –æ–ø—Ü–∏–µ–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    from services.plans_api_client import plans_api_client
    
    buttons = []
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –∏–∑ API
        subscription_plans = await plans_api_client.get_plans()
        
        for plan_id, plan in subscription_plans.items():
            # –ö–Ω–æ–ø–∫–∞ –æ–±—ã—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            discount_text = f" (-{plan['discount']})" if plan.get('discount') else ""
            button_text = f"{plan['name']} - {plan['price']}‚ÇΩ{discount_text}"
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"pay:{plan_id}"
            )])
            
            # –ö–Ω–æ–ø–∫–∞ —Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-—Ç—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤)
            if plan_id != "trial":
                autopay_text = f"‚ö° {plan['name']} + –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ - {plan['price']}‚ÇΩ"
                buttons.append([InlineKeyboardButton(
                    text=autopay_text,
                    callback_data=f"pay_autopay:{plan_id}"
                )])
    except Exception as e:
        logger.error(f"Error loading subscription plans: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ"
        buttons.append([InlineKeyboardButton(
            text="‚ö†Ô∏è –ü–ª–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            callback_data="plans_unavailable"
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def get_subscription_keyboard_without_cancel() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ë–ï–ó –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    from services.plans_api_client import plans_api_client
    
    buttons = []
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –∏–∑ API
        subscription_plans = await plans_api_client.get_plans()
        
        for plan_id, plan in subscription_plans.items():
            discount_text = f" (-{plan['discount']})" if plan.get('discount') else ""
            button_text = f"{plan['name']} - {plan['price']}‚ÇΩ{discount_text}"
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"pay:{plan_id}"
            )])
    except Exception as e:
        logger.error(f"Error loading subscription plans: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ"
        buttons.append([InlineKeyboardButton(
            text="‚ö†Ô∏è –ü–ª–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            callback_data="plans_unavailable"
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def get_subscription_keyboard_with_autopay_toggle(autopay_enabled: bool = True) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    from services.plans_api_client import plans_api_client
    
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    if autopay_enabled:
        autopay_text = "‚ö° –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ (–≤–∫–ª)"
        autopay_callback = "toggle_autopay_off"
    else:
        autopay_text = "‚ùå –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ (–≤—ã–∫–ª)"
        autopay_callback = "toggle_autopay_on"
    
    buttons.append([InlineKeyboardButton(
        text=autopay_text,
        callback_data=autopay_callback
    )])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –∏–∑ API
        subscription_plans = await plans_api_client.get_plans()
        
        for plan_id, plan in subscription_plans.items():
            discount_text = f" (-{plan['discount']})" if plan.get('discount') else ""
            
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω—ã —Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º
            # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø–ª–∞–Ω—ã
            if autopay_enabled:
                if plan_id != "trial":  # –¢—Ä–∏–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
                    button_text = f"‚ö° {plan['name']} - {plan['price']}‚ÇΩ{discount_text}"
                    callback_data = f"pay_autopay:{plan_id}"
                else:
                    button_text = f"{plan['name']} - {plan['price']}‚ÇΩ{discount_text}"
                    callback_data = f"pay:{plan_id}"
            else:
                button_text = f"{plan['name']} - {plan['price']}‚ÇΩ{discount_text}"
                callback_data = f"pay:{plan_id}"
            
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=callback_data
            )])
    except Exception as e:
        logger.error(f"Error loading subscription plans: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ"
        buttons.append([InlineKeyboardButton(
            text="‚ö†Ô∏è –ü–ª–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            callback_data="plans_unavailable"
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_payment_confirmation_keyboard_back_only(plan_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¢–û–õ–¨–ö–û —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    buttons = [
        [InlineKeyboardButton(
            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
            callback_data=f"confirm_pay:{plan_id}"
        )],
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="select_subscription"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_existing_payment_keyboard(payment_id: int, payment_url: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –æ—Ç–º–µ–Ω–∏—Ç—å"""
    buttons = [
        [InlineKeyboardButton(
            text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
            url=payment_url
        )],
        [InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
            callback_data=f"check_payment:{payment_id}"
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç",
            callback_data="cancel_payment"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def _make_api_request(endpoint: str) -> dict:
    """–ü—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ backend API"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://backend:8000{endpoint}"
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=3)) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error("API request failed", endpoint=endpoint, status=response.status)
                    return {}
    except Exception as e:
        logger.error("API request error", endpoint=endpoint, error=str(e))
        return {}


async def get_user_subscription_days(telegram_id: int, user_data: dict = None) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info("üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏", telegram_id=telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
        user_data_to_use = user_data if user_data else await _make_api_request(f"/api/v1/integration/user-dashboard/{telegram_id}")
        
        if not user_data_to_use or not user_data_to_use.get('success'):
            logger.warning("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ", telegram_id=telegram_id)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ full-cycle API
            try:
                from services.vpn_manager_x3ui import vpn_manager_x3ui as vpn_manager
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                if user_data:
                    username = user_data.get("username", "")
                    first_name = user_data.get("first_name", "")
                else:
                    username = ""
                    first_name = ""
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ VPN manager —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                user_result = await vpn_manager.get_or_create_user_key(telegram_id, username, first_name)
                
                if user_result and user_result.get('success'):
                    logger.info("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω", telegram_id=telegram_id)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–º–µ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞
                    if user_result.get('source') == 'FULL_CYCLE_NEW_USER':
                        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∏–∞–ª–∞ —á–µ—Ä–µ–∑ API
                        logger.info("‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç—Ä–∏–∞–ª–∞", telegram_id=telegram_id)
                        
                        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
                        try:
                            settings_data = await _make_api_request("/api/v1/integration/app-settings")
                            if settings_data and settings_data.get('success'):
                                settings = settings_data.get('settings', {})
                                trial_enabled = settings.get('trial_enabled', False)
                                trial_days = settings.get('trial_days', 0)
                                
                                if trial_enabled and trial_days > 0:
                                    logger.info("‚úÖ –¢—Ä–∏–∞–ª –≤–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", 
                                               telegram_id=telegram_id,
                                               trial_days=trial_days)
                                    return trial_days
                                else:
                                    logger.info("‚ÑπÔ∏è –¢—Ä–∏–∞–ª –≤—ã–∫–ª—é—á–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö", 
                                               telegram_id=telegram_id,
                                               trial_enabled=trial_enabled,
                                               trial_days=trial_days)
                                    return 0
                            else:
                                logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0 –¥–Ω–µ–π", 
                                             telegram_id=telegram_id)
                                return 0
                        except Exception as settings_error:
                            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç—Ä–∏–∞–ª–∞", 
                                        telegram_id=telegram_id,
                                        error=str(settings_error))
                            return 0
                    else:
                        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        user_data_to_use = await _make_api_request(f"/api/v1/integration/user-dashboard/{telegram_id}")
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", telegram_id=telegram_id, error=user_result.get('error', 'Unknown error'))
                    return 0
                    
            except Exception as create_error:
                logger.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", telegram_id=telegram_id, error=str(create_error))
                return 0
        
        if not user_data_to_use or not user_data_to_use.get('success'):
            logger.warning("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API", telegram_id=telegram_id)
            return 0
        
        user_info = user_data_to_use.get('user', {})
        
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã", 
                   telegram_id=telegram_id,
                   subscription_status=user_info.get('subscription_status'),
                   valid_until=user_info.get('valid_until'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        subscription_status = user_info.get('subscription_status', 'none')
        valid_until = user_info.get('valid_until')
        
        if subscription_status != 'active':
            logger.info("‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", 
                       telegram_id=telegram_id, 
                       status=subscription_status)
            return 0
            
        if not valid_until:
            logger.warning("‚ö†Ô∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞", telegram_id=telegram_id)
            return 0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        from datetime import datetime, timezone
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            try:
                import dateutil.parser
                end_date = dateutil.parser.parse(valid_until)
            except ImportError:
                # –ï—Å–ª–∏ dateutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–∞—Ä—Å–∏–º –≤—Ä—É—á–Ω—É—é
                if valid_until.endswith('Z'):
                    end_date = datetime.fromisoformat(valid_until[:-1] + '+00:00')
                elif '+' in valid_until or valid_until.endswith('00:00'):
                    end_date = datetime.fromisoformat(valid_until)
                else:
                    end_date = datetime.fromisoformat(valid_until + '+00:00')
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞—Ç–∞ –≤ UTC
            if end_date.tzinfo is None:
                end_date = end_date.replace(tzinfo=timezone.utc)
                
            logger.info("üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞", 
                       telegram_id=telegram_id,
                       end_date=end_date.isoformat())
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            now = datetime.now(timezone.utc)
            delta = end_date - now
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–º–∏–Ω–∏–º—É–º 0)
            days_remaining = max(0, delta.days)
            
            logger.info("üéØ –ü–æ–¥—Å—á–µ—Ç –¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω", 
                       telegram_id=telegram_id,
                       days_remaining=days_remaining,
                       now=now.isoformat(),
                       delta_days=delta.days)
            
            return days_remaining
            
        except Exception as date_error:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã", 
                        telegram_id=telegram_id,
                        valid_until=valid_until,
                        error=str(date_error))
            return 0
        
    except Exception as e:
        logger.error("üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏", 
                    telegram_id=telegram_id, 
                    error=str(e))
        return 0

async def send_main_menu(message, telegram_id, text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", user_data=None):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        days_remaining = await get_user_subscription_days(telegram_id, user_data)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = get_main_menu(days_remaining, days_remaining > 0)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(text, reply_markup=keyboard, parse_mode='Markdown')
        
    except Exception as e:
        logger.error("Error sending main menu", telegram_id=telegram_id, error=str(e))
        # Fallback - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await message.answer(text, parse_mode='Markdown')

def get_main_menu(days_remaining: int = 0, has_active_subscription: bool = True) -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    if days_remaining > 0:
        subscription_text = f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ {days_remaining} –¥–Ω–µ–π"
    else:
        subscription_text = "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"
    
    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫ - —É—Å–ª–æ–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º VPN –∫–Ω–æ–ø–∫—É
    first_row = []
    
    if has_active_subscription:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É VPN –∫–ª—é—á–∞
        first_row.append(KeyboardButton(text="üîë –ú–æ–π VPN –∫–ª—é—á"))
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
        first_row.append(KeyboardButton(text="üîê –ü–æ–ª—É—á–∏—Ç—å VPN –¥–æ—Å—Ç—É–ø"))
    
    first_row.append(KeyboardButton(text=subscription_text))
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            first_row,
            [
                KeyboardButton(text="üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
                KeyboardButton(text="üßëüèº‚Äçüíª –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
            ],
            [
                KeyboardButton(text="üìÑ –û—Ñ–µ—Ä—Ç–∞ –∏ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard 