from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
# from api_client import api_client  # –£–±—Ä–∞–Ω–æ - –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
import aiohttp
import structlog

logger = structlog.get_logger(__name__)


def get_back_to_menu_keyboard() -> InlineKeyboardMarkup:
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="back_to_main_menu"
            )]
        ]
    )


def get_main_menu_keyboard() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á",
                    callback_data="refresh_key"
                )
            ]
        ]
    )
    return keyboard


async def get_subscription_keyboard_with_autopay() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –æ–ø—Ü–∏–µ–π –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    from services.plans_api_client import plans_api_client
    
    buttons = []
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –∏–∑ API
        subscription_plans = await plans_api_client.get_plans()
        
        for plan_id, plan in subscription_plans.items():
            # –ö–Ω–æ–ø–∫–∞ –æ–±—ã—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            discount_text = f" (-{plan['discount']})" if plan.get('discount') else ""
            button_text = f"{plan['name']} - {plan['price']}‚ÇΩ{discount_text}"
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"pay:{plan_id}"
            )])
            
            # –ö–Ω–æ–ø–∫–∞ —Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-—Ç—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤)
            if plan_id != "trial":
                autopay_text = f"‚ö° {plan['name']} + –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ - {plan['price']}‚ÇΩ"
                buttons.append([InlineKeyboardButton(
                    text=autopay_text,
                    callback_data=f"pay_autopay:{plan_id}"
                )])
    except Exception as e:
        logger.error(f"Error loading subscription plans: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ"
        buttons.append([InlineKeyboardButton(
            text="‚ö†Ô∏è –ü–ª–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            callback_data="plans_unavailable"
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def get_subscription_keyboard_without_cancel() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ë–ï–ó –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã"""
    from services.plans_api_client import plans_api_client
    
    buttons = []
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –∏–∑ API
        subscription_plans = await plans_api_client.get_plans()
        
        for plan_id, plan in subscription_plans.items():
            discount_text = f" (-{plan['discount']})" if plan.get('discount') else ""
            button_text = f"{plan['name']} - {plan['price']}‚ÇΩ{discount_text}"
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"pay:{plan_id}"
            )])
    except Exception as e:
        logger.error(f"Error loading subscription plans: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ"
        buttons.append([InlineKeyboardButton(
            text="‚ö†Ô∏è –ü–ª–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            callback_data="plans_unavailable"
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def get_subscription_keyboard_with_autopay_toggle(autopay_enabled: bool = True) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    from services.plans_api_client import plans_api_client
    
    buttons = []
    
    # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    if autopay_enabled:
        autopay_text = "‚ö° –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ (–≤–∫–ª)"
        autopay_callback = "toggle_autopay_off"
    else:
        autopay_text = "‚ùå –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ (–≤—ã–∫–ª)"
        autopay_callback = "toggle_autopay_on"
    
    buttons.append([InlineKeyboardButton(
        text=autopay_text,
        callback_data=autopay_callback
    )])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –∏–∑ API
        subscription_plans = await plans_api_client.get_plans()
        
        for plan_id, plan in subscription_plans.items():
            discount_text = f" (-{plan['discount']})" if plan.get('discount') else ""
            
            # –ï—Å–ª–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω—ã —Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º
            # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –ø–ª–∞–Ω—ã
            if autopay_enabled:
                if plan_id != "trial":  # –¢—Ä–∏–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂
                    button_text = f"‚ö° {plan['name']} - {plan['price']}‚ÇΩ{discount_text}"
                    callback_data = f"pay_autopay:{plan_id}"
                else:
                    button_text = f"{plan['name']} - {plan['price']}‚ÇΩ{discount_text}"
                    callback_data = f"pay:{plan_id}"
            else:
                button_text = f"{plan['name']} - {plan['price']}‚ÇΩ{discount_text}"
                callback_data = f"pay:{plan_id}"
            
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=callback_data
            )])
    except Exception as e:
        logger.error(f"Error loading subscription plans: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ"
        buttons.append([InlineKeyboardButton(
            text="‚ö†Ô∏è –ü–ª–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            callback_data="plans_unavailable"
        )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_payment_confirmation_keyboard_back_only(plan_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¢–û–õ–¨–ö–û —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    buttons = [
        [InlineKeyboardButton(
            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
            callback_data=f"confirm_pay:{plan_id}"
        )],
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="select_subscription"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_existing_payment_keyboard(payment_id: int, payment_url: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ–ø–ª–∞—Ç–∏—Ç—å –∏ –æ—Ç–º–µ–Ω–∏—Ç—å"""
    buttons = [
        [InlineKeyboardButton(
            text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
            url=payment_url
        )],
        [InlineKeyboardButton(
            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
            callback_data=f"check_payment:{payment_id}"
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç",
            callback_data="cancel_payment"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def _make_api_request(endpoint: str) -> dict:
    """–ü—Ä–æ—Å—Ç–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ backend API"""
    try:
        async with aiohttp.ClientSession() as session:
            url = f"http://backend:8000{endpoint}"
            async with session.get(url, timeout=aiohttp.ClientTimeout(total=10)) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    logger.error("API request failed", endpoint=endpoint, status=response.status)
                    return {}
    except Exception as e:
        logger.error("API request error", endpoint=endpoint, error=str(e))
        return {}


async def get_user_subscription_days(telegram_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info("üîç –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏", telegram_id=telegram_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
        user_data = await _make_api_request(f"/api/v1/integration/user-dashboard/{telegram_id}")
        
        if not user_data or not user_data.get('success'):
            logger.warning("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ API", telegram_id=telegram_id)
            return 0
        
        user_info = user_data.get('user', {})
        
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã", 
                   telegram_id=telegram_id,
                   subscription_status=user_info.get('subscription_status'),
                   valid_until=user_info.get('valid_until'))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        subscription_status = user_info.get('subscription_status', 'none')
        valid_until = user_info.get('valid_until')
        
        if subscription_status != 'active':
            logger.info("‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", 
                       telegram_id=telegram_id, 
                       status=subscription_status)
            return 0
            
        if not valid_until:
            logger.warning("‚ö†Ô∏è –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞", telegram_id=telegram_id)
            return 0
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        from datetime import datetime, timezone
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            try:
                import dateutil.parser
                end_date = dateutil.parser.parse(valid_until)
            except ImportError:
                # –ï—Å–ª–∏ dateutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–∞—Ä—Å–∏–º –≤—Ä—É—á–Ω—É—é
                if valid_until.endswith('Z'):
                    end_date = datetime.fromisoformat(valid_until[:-1] + '+00:00')
                elif '+' in valid_until or valid_until.endswith('00:00'):
                    end_date = datetime.fromisoformat(valid_until)
                else:
                    end_date = datetime.fromisoformat(valid_until + '+00:00')
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞—Ç–∞ –≤ UTC
            if end_date.tzinfo is None:
                end_date = end_date.replace(tzinfo=timezone.utc)
                
            logger.info("üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞", 
                       telegram_id=telegram_id,
                       end_date=end_date.isoformat())
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            now = datetime.now(timezone.utc)
            delta = end_date - now
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–º–∏–Ω–∏–º—É–º 0)
            days_remaining = max(0, delta.days)
            
            logger.info("üéØ –ü–æ–¥—Å—á–µ—Ç –¥–Ω–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω", 
                       telegram_id=telegram_id,
                       days_remaining=days_remaining,
                       now=now.isoformat(),
                       delta_days=delta.days)
            
            return days_remaining
            
        except Exception as date_error:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã", 
                        telegram_id=telegram_id,
                        valid_until=valid_until,
                        error=str(date_error))
            return 0
        
    except Exception as e:
        logger.error("üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏", 
                    telegram_id=telegram_id, 
                    error=str(e))
        return 0

async def send_main_menu(message, telegram_id, text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    days_remaining = await get_user_subscription_days(telegram_id)
    await message.answer(
        text,
        reply_markup=get_main_menu(days_remaining)
    )

def get_main_menu(days_remaining: int = 0) -> ReplyKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"""
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
    if days_remaining > 0:
        subscription_text = f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ {days_remaining} –¥–Ω–µ–π"
    else:
        subscription_text = "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üîë –ú–æ–π VPN –∫–ª—é—á"),
                KeyboardButton(text=subscription_text)
            ],
            [
                KeyboardButton(text="üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
                KeyboardButton(text="üßëüèº‚Äçüíª –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard 