"""
VPN Manager —Å –ø—Ä—è–º–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π X3UI
–†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã "–æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á" —á–µ—Ä–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ X3UI –∫–ª–∏–µ–Ω—Ç–∞
"""
import structlog
import aiohttp
import os
import json
from typing import Dict, Any, Optional, List

logger = structlog.get_logger(__name__)

class VPNManagerX3UI:
    """VPN Manager —Å –ø—Ä—è–º–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π X3UI –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è '–æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á'"""
    
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º localhost –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, backend:8000 –¥–ª—è Docker
        self.backend_url = os.getenv("BACKEND_URL", "http://localhost:8000")
        self._session = None
        logger.info("VPN Manager X3UI initialized", 
                   backend_url=self.backend_url)
    
    async def _get_session(self) -> aiohttp.ClientSession:
        """–ü–æ–ª—É—á–∏—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        if self._session is None or self._session.closed:
            self._session = aiohttp.ClientSession()
        return self._session
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç—å HTTP —Å–µ—Å—Å–∏—é"""
        if self._session and not self._session.closed:
            await self._session.close()
    
    async def _make_request(
        self, 
        method: str, 
        endpoint: str, 
        data: Optional[Dict] = None
    ) -> Optional[Dict[str, Any]]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å HTTP –∑–∞–ø—Ä–æ—Å –∫ backend API"""
        try:
            session = await self._get_session()
            url = f"{self.backend_url}{endpoint}"
            
            if method.upper() == "GET":
                async with session.get(url) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error("Backend API error", 
                                   method=method, 
                                   url=url, 
                                   status=response.status)
                        return None
            else:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        logger.error("Backend API error", 
                                   method=method, 
                                   url=url, 
                                   status=response.status)
                        return None
                        
        except Exception as e:
            logger.error("Request error", 
                        method=method, 
                        endpoint=endpoint, 
                        error=str(e))
            return None

    async def update_user_key(self, telegram_id: int, username: str = "", first_name: str = "") -> Dict:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π backend API
        """
        try:
            logger.info("üîÑ Updating user key via simple backend API", 
                       telegram_id=telegram_id, 
                       username=username)
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Å—Ç–æ–π API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π —Å force_new=True
            vpn_result = await self._make_request(
                "POST",
                "/api/v1/integration/update-vpn-key",
                {
                    "telegram_id": telegram_id,
                    "force_new": True  # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                }
            )
            
            if vpn_result and vpn_result.get("success"):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ - –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞—Ö:
                # 1. –° –ø–æ–ª–µ–º vpn_key (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
                # 2. –° –ø–æ–ª—è–º–∏ vless_url, id –∏ —Ç.–¥. –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)
                
                if "vpn_key" in vpn_result:
                    # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                    vpn_key = vpn_result.get("vpn_key", {})
                    
                    logger.info("‚úÖ Key updated successfully via simple API (new format)", 
                               telegram_id=telegram_id,
                               key_id=vpn_key.get("id"),
                               force_new=True)
                    
                    return {
                        "success": True,
                        "message": vpn_result.get("message", "VPN –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω"),
                        "vless_url": vpn_key.get("vless_url"),
                        "id": vpn_key.get("id"),
                        "created_at": vpn_key.get("created_at"),
                        "status": vpn_key.get("status", "active"),
                        "is_new": True,
                        "x3ui_connected": True,
                        "source": "SIMPLE_BACKEND_API_FORCE_NEW"
                    }
                else:
                    # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –ø—Ä—è–º—ã–µ –ø–æ–ª—è
                    logger.info("‚úÖ Key updated successfully via simple API (direct fields)", 
                               telegram_id=telegram_id,
                               key_id=vpn_result.get("id"),
                               force_new=True)
                    
                    return {
                        "success": True,
                        "message": vpn_result.get("message", "VPN –∫–ª—é—á –æ–±–Ω–æ–≤–ª–µ–Ω"),
                        "vless_url": vpn_result.get("vless_url"),
                        "id": vpn_result.get("id"),
                        "created_at": vpn_result.get("created_at"),
                        "status": vpn_result.get("status", "active"),
                        "is_new": True,
                        "x3ui_connected": True,
                        "source": "SIMPLE_BACKEND_API_FORCE_NEW"
                    }
            else:
                error_msg = vpn_result.get("error", "Unknown error") if vpn_result else "API unavailable"
                logger.error("‚ùå Failed to update key via simple API", 
                            telegram_id=telegram_id,
                            error=error_msg)
                return {"success": False, "error": error_msg}
            
        except Exception as e:
            logger.error("‚ùå Failed to update key via simple API", 
                        telegram_id=telegram_id, 
                        error=str(e))
            return {"success": False, "error": str(e)}

    async def get_or_create_user_key(self, telegram_id: int, username: str = "", first_name: str = "") -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π backend API"""
        try:
            logger.info("üîç Getting or creating user key via simple backend API", 
                       telegram_id=telegram_id)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–∏—Å—Ç–µ–º–µ
            dashboard_result = await self._make_request(
                "GET", 
                f"/api/v1/integration/user-dashboard/{telegram_id}"
            )
            
            if dashboard_result and dashboard_result.get("success"):
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏
                vpn_keys = dashboard_result.get("vpn_keys", [])
                active_keys = [key for key in vpn_keys if key.get("status") == "active"]
                
                if active_keys:
                    # –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π
                    latest_key = sorted(active_keys, key=lambda k: k.get("id", 0), reverse=True)[0]
                    
                    logger.info("‚úÖ Found existing active key", 
                               telegram_id=telegram_id,
                               key_id=latest_key.get("id"))
                    
                    return {
                        "success": True,
                        "message": "–ü–æ–ª—É—á–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π VPN –∫–ª—é—á",
                        "vless_url": latest_key.get("vless_url"),
                        "id": latest_key.get("id"),
                        "created_at": latest_key.get("created_at"),
                        "status": "active",
                        "is_new": False,
                        "x3ui_connected": False,
                        "source": "EXISTING_KEY"
                    }
                else:
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                    logger.info("üîÑ User exists but no active keys - updating", 
                               telegram_id=telegram_id)
                    return await self.update_user_key(telegram_id, username, first_name)
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º —á–µ—Ä–µ–∑ full-cycle
            logger.info("üÜï Creating new user via full-cycle", 
                       telegram_id=telegram_id)
            
            user_data = {
                "username": username,
                "first_name": first_name or f"User_{telegram_id}",
                "language_code": "ru"
            }
            
            cycle_result = await self._make_request(
                "POST",
                "/api/v1/integration/full-cycle",
                {
                    "telegram_id": telegram_id,
                    "user_data": user_data
                }
            )
            
            if cycle_result and cycle_result.get("success"):
                final_data = cycle_result.get("final_data", {})
                vpn_key = final_data.get("vpn_key", {})
                
                if vpn_key:
                    logger.info("‚úÖ New user and key created successfully", 
                               telegram_id=telegram_id,
                               key_id=vpn_key.get("id"))
                    
                    return {
                        "success": True,
                        "message": "VPN –∫–ª—é—á —Å–æ–∑–¥–∞–Ω —Å 7 –¥–Ω—è–º–∏ —Ç—Ä–∏–∞–ª–∞",
                        "vless_url": vpn_key.get("vless_url"),
                        "id": vpn_key.get("id"),
                        "created_at": vpn_key.get("created_at"),
                        "status": "active",
                        "is_new": True,
                        "x3ui_connected": False,
                        "source": "NEW_USER_FULL_CYCLE"
                    }
            
            logger.error("‚ùå Failed to create user and key", 
                        telegram_id=telegram_id)
            return {"success": False, "error": "Failed to create VPN key"}
            
        except Exception as e:
            logger.error("üí• Error in get_or_create_user_key", 
                        telegram_id=telegram_id, 
                        error=str(e))
            return {"success": False, "error": str(e)}
    
    async def get_user_keys(self, telegram_id: int) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            dashboard_result = await self._make_request(
                "GET", 
                f"/api/v1/integration/user-dashboard/{telegram_id}"
            )
            
            if dashboard_result and dashboard_result.get("success"):
                vpn_keys = dashboard_result.get("vpn_keys", [])
                
                result = []
                for key in vpn_keys:
                    result.append({
                        "id": key.get("id"),
                        "config": key.get("vless_url"),
                        "created_at": key.get("created_at"),
                        "is_active": key.get("status") == "active",
                        "subscription_type": "api",
                        "node_info": key.get("node_info", {})
                    })
                
                return result
            
            return []
            
        except Exception as e:
            logger.error("Error getting user keys", 
                        telegram_id=telegram_id, 
                        error=str(e))
            return []
    
    async def deactivate_key(self, key_id: int) -> bool:
        """
        –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞:
        1. –í—ã–∑—ã–≤–∞–µ–º backend API –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏
        2. Backend —Å–∞–º –æ–±–µ—Å–ø–µ—á–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–π
        3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
        """
        try:
            logger.info("üóëÔ∏è Deactivating VPN key via backend API", key_id=key_id)
            
            # –í—ã–∑—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π endpoint –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–∞
            # –≠—Ç–æ—Ç endpoint –¥–æ–ª–∂–µ–Ω –æ–±–µ—Å–ø–µ—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
            # —É–¥–∞–ª–µ–Ω–∏–µ –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏ ‚Üí –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –≤ –ë–î
            result = await self._make_request(
                "DELETE",
                f"/api/v1/integration/vpn-key/{key_id}",
                {"ensure_x3ui_deletion": True}
            )
            
            if result and result.get("success"):
                logger.info("‚úÖ VPN key successfully deactivated", 
                          key_id=key_id,
                          message=result.get("message"))
                return True
            else:
                error_msg = result.get("error", "Unknown error") if result else "API unavailable"
                logger.error("‚ùå Failed to deactivate VPN key", 
                           key_id=key_id,
                           error=error_msg)
                return False
                
        except Exception as e:
            logger.error("üí• Error deactivating VPN key", 
                        key_id=key_id, 
                        error=str(e))
            return False

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
vpn_manager_x3ui = VPNManagerX3UI() 