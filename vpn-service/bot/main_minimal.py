#!/usr/bin/env python3
"""
–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.filters import Command
import os
from dotenv import load_dotenv

load_dotenv()

async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer("ü§ñ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ Starting minimal bot...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        print("‚ùå No Telegram token found!")
        return
        
    print(f"‚úÖ Token found: {token[:20]}...")
    
    # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
    bot = Bot(token=token)
    dp = Dispatcher(storage=MemoryStorage())
    
    print("‚úÖ Bot and dispatcher created")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä
    dp.message.register(start_handler, Command(commands=["start"]))
    
    print("‚úÖ Handlers registered")
    
    try:
        print("üîÑ Deleting webhook...")
        await bot.delete_webhook(drop_pending_updates=True)
        
        print("üîÑ Starting polling...")
        await dp.start_polling(bot)
        
    except Exception as e:
        print(f"üí• Error: {e}")
        import traceback
        traceback.print_exc()
    finally:
        print("üîÑ Closing bot session...")
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main()) 