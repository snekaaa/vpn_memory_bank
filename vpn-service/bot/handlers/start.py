"""
–•—ç–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º –º–µ–Ω—é (4 –∫–Ω–æ–ø–∫–∏)
"""

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards.main_menu import get_main_menu_keyboard, get_main_menu, get_user_subscription_days, send_main_menu
from templates.messages import (
    get_download_apps_message,
    get_vpn_key_message,
    get_no_key_error
)
from services.vpn_manager_x3ui import vpn_manager_x3ui as vpn_manager
import structlog
import os

logger = structlog.get_logger(__name__)

start_router = Router()

async def _is_admin_user(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        import sys
        import os
        
        # –î–æ–±–∞–≤–ª—è–µ–º backend –≤ path
        backend_path = os.path.join(os.path.dirname(__file__), '..', 'backend')
        if backend_path not in sys.path:
            sys.path.insert(0, backend_path)
        
        from config.database import get_db_session
        from services.app_settings_service import AppSettingsService
        
        async with get_db_session() as session:
            is_admin = await AppSettingsService.is_admin_telegram_id(session, user_id)
            return is_admin
    except Exception as e:
        logger.error("Error checking admin status", user_id=user_id, error=str(e))
        # Fallback –∫ ENV –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        admin_ids = [int(x) for x in os.getenv('ADMIN_TELEGRAM_IDS', '').split(',') if x.strip()]
        return user_id in admin_ids

@start_router.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
    try:
        telegram_id = message.from_user.id
        user_data = {
            "username": message.from_user.username,
            "first_name": message.from_user.first_name,
            "last_name": message.from_user.last_name,
            "language_code": message.from_user.language_code
        }
        is_admin = await _is_admin_user(telegram_id)
        logger.info("Authorization starting", telegram_id=telegram_id, username=user_data.get("username"), is_admin=is_admin)
        
        first_name = message.from_user.first_name if message.from_user.first_name else "–¥—Ä—É–≥"
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î
        try:
            import sys
            import os
            
            # –î–æ–±–∞–≤–ª—è–µ–º backend –≤ path
            backend_path = os.path.join(os.path.dirname(__file__), '..', 'backend')
            if backend_path not in sys.path:
                sys.path.insert(0, backend_path)
            
            from config.database import get_db_session
            from services.app_settings_service import AppSettingsService
            
            async with get_db_session() as session:
                app_settings = await AppSettingsService.get_settings(session)
                if app_settings.bot_welcome_message:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–∑ –ë–î, –ø–æ–¥—Å—Ç–∞–≤–ª—è—è –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    welcome_msg = app_settings.bot_welcome_message.format(first_name=first_name)
                else:
                    # Fallback –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    welcome_msg = (
                        f"üëã *{first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
                        f"üîì –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
                        f"üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–ª—é—á–µ–π\n"
                        f"üîë –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∫–ª—é—á–∞–º–∏\n\n"
                        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
                    )
        except Exception as e:
            logger.error("Error getting welcome message from DB", error=str(e))
            # Fallback –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            welcome_msg = (
                f"üëã *{first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
                f"üîì –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É\n"
                f"üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–ª—é—á–µ–π\n"
                f"üîë –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∫–ª—é—á–∞–º–∏\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
            )
        
        await send_main_menu(message, telegram_id, welcome_msg)
        logger.info("Authorization successful", telegram_id=telegram_id, is_admin=is_admin)
        
    except Exception as e:
        logger.error("Authorization error", error=str(e))
        try:
            await send_main_menu(message, message.from_user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /start")
        except:
            await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ /start")

@start_router.message(F.text == "üîê –ü–æ–ª—É—á–∏—Ç—å VPN –¥–æ—Å—Ç—É–ø")
async def get_vpn_access_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å VPN –¥–æ—Å—Ç—É–ø' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        telegram_id = message.from_user.id
        logger.info("User requested VPN access (no subscription)", telegram_id=telegram_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
        from keyboards.main_menu import get_subscription_keyboard_with_autopay
        
        subscription_keyboard = await get_subscription_keyboard_with_autopay()
        
        await message.answer(
            "üîê **VPN –¥–æ—Å—Ç—É–ø —Ç—Ä–µ–±—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –∫–ª—é—á–∞–º:",
            reply_markup=subscription_keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logger.error("Error in get_vpn_access_handler", error=str(e))
        await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@start_router.message(F.text == "üîë –ú–æ–π VPN –∫–ª—é—á")
async def vpn_key_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ú–æ–π VPN –∫–ª—é—á' - —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª—é—á"""
    try:
        telegram_id = message.from_user.id
        username = message.from_user.username or ""
        first_name = message.from_user.first_name or ""
        
        logger.info("User requested VPN key", telegram_id=telegram_id, username=username, first_name=first_name)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        loading_msg = await message.answer(
            "üîÑ –ü–æ–ª—É—á–∞–µ–º –≤–∞—à VPN –∫–ª—é—á...",
        )
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ VPN –º–µ–Ω–µ–¥–∂–µ—Ä
            vpn_key_data = await vpn_manager.get_or_create_user_key(telegram_id, username, first_name)
            
            if vpn_key_data and vpn_key_data.get('vless_url'):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ
                try:
                    from handlers.vpn_simplified import enhance_vpn_key_message
                    message_text, keyboard = await enhance_vpn_key_message(
                        vpn_key_data['vless_url'], 
                        telegram_id, 
                        is_update=False
                    )
                except Exception as e:
                    # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —à–∞–±–ª–æ–Ω—É —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                    from templates.messages import get_vpn_key_message_with_server
                    from handlers.vpn_simplified import DEMO_COUNTRIES
                    default_country = DEMO_COUNTRIES[0]  # –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã
                    message_text = get_vpn_key_message_with_server(
                        vpn_key_data['vless_url'], 
                        default_country, 
                        is_update=False
                    )
                    keyboard = get_main_menu_keyboard()
                
                await loading_msg.edit_text(
                    message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
                
                logger.info("VPN key provided to user", 
                           telegram_id=telegram_id,
                           key_id=vpn_key_data.get('id'))
            else:
                # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
                await loading_msg.edit_text(
                    get_no_key_error(),
                    reply_markup=get_main_menu_keyboard()
                )
                
                logger.error("Failed to provide VPN key", telegram_id=telegram_id)
                
        except Exception as e:
            logger.error("Error getting VPN key", 
                        telegram_id=telegram_id, 
                        error=str(e))
            
            await loading_msg.edit_text(
                get_no_key_error(),
                reply_markup=get_main_menu_keyboard()
            )
            
    except Exception as e:
        logger.error("Error handling VPN key request", error=str(e))
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@start_router.message(F.text == "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
async def apps_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    try:
        await message.answer(
            get_download_apps_message(),
            parse_mode="Markdown",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.error("Error handling apps", error=str(e))
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@start_router.message(F.text == "üßëüèº‚Äçüíª –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
async def support_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    try:
        support_keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                url="https://t.me/bez_lagov"
            )]
        ])
        
        await message.answer(
            "üßëüèº‚Äçüíª *–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏*\n\n"
            "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é:",
            reply_markup=support_keyboard,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error("Error handling support", error=str(e))
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞") 