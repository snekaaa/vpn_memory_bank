"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ VPN –±–æ—Ç–∞ (4 –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
–° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π VPN –∫–ª—é—á–µ–π
–†–∞—Å—à–∏—Ä–µ–Ω –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω —Å–µ—Ä–≤–µ—Ä–æ–≤
"""

import structlog
import sys
import os
import asyncio
from aiogram import types, F, Router

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '../../backend'))

from services.vpn_manager_x3ui import vpn_manager_x3ui as vpn_manager
from templates.messages import (
    get_vpn_key_message,
    get_vpn_key_message_with_server,
    get_server_switch_loading_message,
    get_server_switch_success_message,
    get_server_switch_error_message,
    get_download_apps_message, 
    get_support_message,
    get_no_key_error,
    get_key_update_error
)
from keyboards.main_menu import (
    get_main_menu_keyboard,
    get_vpn_key_keyboard_with_countries,
    get_country_selection_loading_keyboard,
    get_country_fallback_keyboard
)

# NEW: Country Services - –ø—Ä–æ—Å—Ç–∞—è —Ö–∞—Ä–¥–∫–æ–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ
COUNTRY_SERVICE_AVAILABLE = True
logger = structlog.get_logger(__name__)
logger.info("Country Service enabled with hardcoded demo data")

# –•–∞—Ä–¥–∫–æ–¥–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –¥–µ–º–æ - —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ
DEMO_COUNTRIES = [
    {"id": 2, "code": "NL", "name": "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "flag_emoji": "üá≥üá±", "display_name": "üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã"},
    {"id": 3, "code": "DE", "name": "–ì–µ—Ä–º–∞–Ω–∏—è", "flag_emoji": "üá©üá™", "display_name": "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è"}
]

async def get_user_current_assignment_info(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        import aiohttp
        
        logger.info("Getting user assignment info", telegram_id=telegram_id)
        
        async with aiohttp.ClientSession() as session:
            async with session.get(
                f"http://backend:8000/api/v1/countries/user/{telegram_id}/assignment"
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info("Assignment info received", telegram_id=telegram_id, data=data)
                    return data
                else:
                    logger.warning("Assignment API returned error", telegram_id=telegram_id, status=response.status)
                    return None
                    
    except Exception as e:
        logger.error("Failed to get user assignment", telegram_id=telegram_id, error=str(e))
        return None

async def get_available_countries():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã - –¥–µ–º–æ –≤–µ—Ä—Å–∏—è"""
    return DEMO_COUNTRIES

async def get_user_dashboard_enhanced(telegram_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ - –¥–µ–º–æ –≤–µ—Ä—Å–∏—è"""
    return {
        "success": True,
        "countries": {
            "available": DEMO_COUNTRIES,
            "current": {"country": DEMO_COUNTRIES[0]}  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã
        }
    }

async def create_vpn_key_for_country(telegram_id: int):
    """–°–æ–∑–¥–∞—Ç—å VPN –∫–ª—é—á –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        import aiohttp
        
        logger.info("Creating VPN key for assigned country", telegram_id=telegram_id)
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"http://backend:8000/api/v1/vpn-keys/user/{telegram_id}/create-for-country"
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info("VPN key created successfully", telegram_id=telegram_id, success=data.get('success'))
                    return data
                else:
                    logger.error("VPN key creation failed", telegram_id=telegram_id, status=response.status)
                    return {"success": False, "error": f"API returned status {response.status}"}
                    
    except Exception as e:
        logger.error("Failed to create VPN key for country", telegram_id=telegram_id, error=str(e))
        return {"success": False, "error": str(e)}

async def switch_user_country(telegram_id: int, country_code: str):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä - —Ä–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —á–µ—Ä–µ–∑ API"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º API client –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        import aiohttp
        
        async with aiohttp.ClientSession() as session:
            # –í—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API backend –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å query parameters
            async with session.post(
                f"http://backend:8000/api/v1/countries/switch?user_id={telegram_id}&country_code={country_code}"
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    return data
                else:
                    error_text = await response.text()
                    return {"success": False, "error": f"API error {response.status}: {error_text}"}
                    
    except Exception as e:
        logger.error("Failed to switch user country via API", 
                    telegram_id=telegram_id, 
                    country_code=country_code, 
                    error=str(e))
        
        # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –±—É–¥—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏
        country = next((c for c in DEMO_COUNTRIES if c["code"] == country_code), None)
        return {
            "success": True,
            "fallback": True,
            "country_info": country,
            "message": f"–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–æ –Ω–∞ {country['name']} (fallback)" if country else "–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        }

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º VPN Access Control - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
VPN_ACCESS_CONTROL_AVAILABLE = False
logger.info("VPN Access Control temporarily disabled due to model relationship issues")
router = Router()

async def check_vpn_access(telegram_id: int) -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN —á–µ—Ä–µ–∑ VPNAccessControlService"""
    try:
        if not VPN_ACCESS_CONTROL_AVAILABLE:
            logger.warning("VPN Access Control not available", telegram_id=telegram_id)
            return {"has_access": True, "reason": "no_access_control"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        async for db_session in get_db():
            try:
                result = await check_user_vpn_access(db_session, telegram_id)
                logger.info("VPN access check completed", 
                           telegram_id=telegram_id,
                           has_access=result.get("has_access"),
                           reason=result.get("reason"))
                return result
            except Exception as e:
                logger.error("Error during VPN access check", 
                           telegram_id=telegram_id,
                           error=str(e))
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø (fail-open)
                return {"has_access": True, "reason": "check_error"}
            finally:
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ async generator
                
    except Exception as e:
        logger.error("Critical error in VPN access check", 
                   telegram_id=telegram_id,
                   error=str(e))
        # –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø (fail-open)
        return {"has_access": True, "reason": "critical_error"}

async def show_subscription_required_message(message, access_result: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–ª–∞–Ω–∞–º–∏"""
    try:
        
        reason = access_result.get("reason", "no_subscription")
        days_remaining = access_result.get("days_remaining", 0)
        
        if reason == "no_subscription":
            if days_remaining > 0:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ
                message_text = (
                    f"‚è∞ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {abs(days_remaining)} –¥–Ω. –Ω–∞–∑–∞–¥**\n\n"
                    "üîê –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–ª—é—á–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
                    "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"
                )
            else:
                # –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤–æ–æ–±—â–µ
                message_text = (
                    "üîê **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–ª—é—á–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n\n"
                    "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"
                )
        elif reason == "user_not_found":
            message_text = (
                "‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ**\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        else:
            message_text = (
                "‚ùå **–î–æ—Å—Ç—É–ø –∫ VPN –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {access_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        if reason in ["no_subscription"]:
            try:
                from keyboards.main_menu import get_subscription_keyboard_with_autopay
                keyboard = await get_subscription_keyboard_with_autopay()
            except Exception as e:
                logger.error("Error creating subscription keyboard", error=str(e))
                keyboard = get_main_menu_keyboard()
        else:
            keyboard = get_main_menu_keyboard()
        
        await message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
        logger.info("Subscription required message shown", 
                   reason=reason,
                   days_remaining=days_remaining)
        
    except Exception as e:
        logger.error("Error showing subscription required message", error=str(e))
        
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(
            "üîê **–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ü–æ–¥–ø–∏—Å–∫–∞' –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.",
            parse_mode="Markdown",
            reply_markup=get_main_menu_keyboard()
        )

@router.callback_query(F.data == "create_or_remind_key")
async def handle_create_or_remind_key(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å/–Ω–∞–ø–æ–º–Ω–∏—Ç—å –∫–ª—é—á' —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    telegram_id = callback.from_user.id
    username = callback.from_user.username or ""
    first_name = callback.from_user.first_name or ""
    
    logger.info("User requested VPN key", telegram_id=telegram_id, username=username, first_name=first_name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await callback.message.edit_text(
        "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ VPN...",
        reply_markup=None
    )
    
    try:
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏
        if VPN_ACCESS_CONTROL_AVAILABLE:
            access_result = await check_vpn_access(telegram_id)
            
            if not access_result.get("has_access", False):
                # –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
                await show_subscription_required_message(loading_msg, access_result)
                return
        else:
            logger.warning("VPN Access Control not available, proceeding without check", telegram_id=telegram_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.edit_text("üîÑ –ü–æ–ª—É—á–∞–µ–º –≤–∞—à VPN –∫–ª—é—á...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ VPN –º–µ–Ω–µ–¥–∂–µ—Ä
        vpn_key_data = await vpn_manager.get_or_create_user_key(telegram_id, username, first_name)
        
        if vpn_key_data and vpn_key_data.get('vless_url'):
            # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            assignment_info = await get_user_current_assignment_info(telegram_id)
            
            if assignment_info and assignment_info.get('country'):
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Å–µ—Ä–≤–µ—Ä–µ
                current_country = assignment_info['country']
                
                logger.info("User has country assignment", 
                           telegram_id=telegram_id, 
                           country=current_country['code'])
                
                # –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
                vpn_key_data = await vpn_manager.create_key_for_user_country(
                    telegram_id, username, first_name
                )
                
                logger.info("Created key for assigned country", 
                           telegram_id=telegram_id, 
                           country=current_country['code'])
                
                message_text = get_vpn_key_message_with_server(
                    vpn_key_data['vless_url'], 
                    current_country, 
                    is_update=False
                )
            else:
                # FALLBACK: –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ –ì–µ—Ä–º–∞–Ω–∏—é –∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á
                logger.warning("No assignment info, creating assignment to Germany", telegram_id=telegram_id)
                
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ –ì–µ—Ä–º–∞–Ω–∏—é
                switch_result = await switch_user_country(telegram_id, "DE")
                
                if switch_result.get('success'):
                    # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –ì–µ—Ä–º–∞–Ω–∏–∏
                    vpn_key_data = await vpn_manager.create_key_for_user_country(
                        telegram_id, username, first_name
                    )
                
                fallback_country = {
                    "code": "DE", 
                    "name": "–ì–µ—Ä–º–∞–Ω–∏—è", 
                    "flag_emoji": "üá©üá™",
                    "display_name": "üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è"
                }
                message_text = get_vpn_key_message_with_server(
                    vpn_key_data['vless_url'], 
                    fallback_country, 
                    is_update=False
                )
            
            keyboard = get_main_menu_keyboard()
            
            await loading_msg.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            
            logger.info("VPN key provided to user", 
                       telegram_id=telegram_id,
                       key_id=vpn_key_data.get('id'))
        else:
            # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
            await loading_msg.edit_text(
                get_no_key_error(),
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.error("Failed to provide VPN key", telegram_id=telegram_id)
            
    except Exception as e:
        logger.error("Error in create_or_remind_key handler", 
                    telegram_id=telegram_id, 
                    error=str(e))
        
        await loading_msg.edit_text(
            get_no_key_error(),
            reply_markup=get_main_menu_keyboard()
        )

@router.callback_query(F.data == "refresh_key")
async def handle_refresh_key(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á' —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    telegram_id = callback.from_user.id
    username = callback.from_user.username or ""
    first_name = callback.from_user.first_name or ""
    
    logger.info("User requested VPN key refresh", telegram_id=telegram_id, username=username, first_name=first_name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await callback.message.edit_text(
        "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ VPN...",
        reply_markup=None
    )
    
    try:
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏
        if VPN_ACCESS_CONTROL_AVAILABLE:
            access_result = await check_vpn_access(telegram_id)
            
            if not access_result.get("has_access", False):
                # –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
                await show_subscription_required_message(loading_msg, access_result)
                return
        else:
            logger.warning("VPN Access Control not available, proceeding without check", telegram_id=telegram_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.edit_text(
            "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—à VPN –∫–ª—é—á...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        assignment_info = await get_user_current_assignment_info(telegram_id)
        
        if assignment_info and assignment_info.get('country'):
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω—É
            current_country_code = assignment_info['country']['code']
            current_country = assignment_info['country']
            
            await loading_msg.edit_text(
                f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á –¥–ª—è {current_country['display_name']}..."
            )
            
            # –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
            vpn_key_data = await vpn_manager.create_key_for_user_country(
                telegram_id, username, first_name
            )
            
            logger.info("Refreshed key for assigned country", 
                       telegram_id=telegram_id, 
                       country=current_country_code)
        else:
            # –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è - –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–∞ –ì–µ—Ä–º–∞–Ω–∏—é
            logger.info("No assignment found, assigning to Germany", telegram_id=telegram_id)
            switch_result = await switch_user_country(telegram_id, "DE")
            
            if switch_result.get('success'):
                vpn_key_data = await vpn_manager.create_key_for_user_country(
                    telegram_id, username, first_name
                )
            else:
                # Fallback
                vpn_key_data = await vpn_manager.update_user_key(telegram_id, username, first_name)
        
        if vpn_key_data and vpn_key_data.get('vless_url'):
            # –û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω
            message_text, keyboard = await enhance_vpn_key_message(
                vpn_key_data['vless_url'], 
                telegram_id, 
                is_update=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
            await loading_msg.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=keyboard,
                disable_web_page_preview=True
            )
            
            logger.info("VPN key refreshed successfully", telegram_id=telegram_id)
        else:
            # –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –∫–æ–º–∞–Ω–¥–µ
            await loading_msg.edit_text(
                get_key_update_error(),
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.error("Failed to refresh VPN key via callback", telegram_id=telegram_id)
    except Exception as e:
        logger.error("Error during VPN key refresh", 
                    telegram_id=telegram_id, 
                    error=str(e))
        
        await loading_msg.edit_text(
            get_key_update_error(),
            reply_markup=get_main_menu_keyboard()
        )

@router.callback_query(F.data == "download_apps")
async def handle_download_apps(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'"""
    await callback.answer()
    
    logger.info("User requested download apps", telegram_id=callback.from_user.id)
    
    await callback.message.edit_text(
        get_download_apps_message(),
        parse_mode="Markdown", 
        reply_markup=get_main_menu_keyboard(),
        disable_web_page_preview=True
    )


# NEW: Country Selection Handlers

@router.callback_query(F.data.startswith("switch_country:"))
async def handle_country_switch(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω—ã"""
    await callback.answer()
    
    telegram_id = callback.from_user.id
    username = callback.from_user.username or ""
    first_name = callback.from_user.first_name or ""
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –∏–∑ callback data
    country_code = callback.data.split(":")[1]
    
    logger.info("User requested country switch", 
               telegram_id=telegram_id, 
               target_country=country_code)
    
    if not COUNTRY_SERVICE_AVAILABLE:
        await callback.message.edit_text(
            "‚ùå –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á'",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        await callback.message.edit_text(
            f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Å—Ç—Ä–∞–Ω–µ {country_code}...",
            reply_markup=None
        )
        
        # –†–ï–ê–õ–¨–ù–û –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
        switch_result = await switch_user_country(telegram_id, country_code)
        
        if switch_result.get('success'):
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
            await callback.message.edit_text(
                f"üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –¥–ª—è {country_code}...",
                reply_markup=None
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ù–û–í–´–ô VPN –∫–ª—é—á –∏—Å–ø–æ–ª—å–∑—É—è API —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–µ
            new_key_result = await create_vpn_key_for_country(telegram_id)
            
            if new_key_result and new_key_result.get('success'):
                vpn_key_data = {'vless_url': new_key_result['vpn_key']['vless_url']}
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º –∏ —Ñ–ª–∞–≥–∞–º–∏ —Å—Ç—Ä–∞–Ω
                message_text, keyboard = await enhance_vpn_key_message(
                    vpn_key_data['vless_url'], 
                    telegram_id, 
                    is_update=True
                )
                
                await callback.message.edit_text(
                    message_text,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
                
                logger.info("Country switch completed successfully", 
                           telegram_id=telegram_id, 
                           target_country=country_code)
            else:
                # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞
                await callback.message.edit_text(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {country_code}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                    reply_markup=get_main_menu_keyboard()
                )
        else:
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
            error_msg = switch_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await callback.message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ {country_code}\n\n"
                f"–û—à–∏–±–∫–∞: {error_msg}",
                reply_markup=get_main_menu_keyboard()
            )
            
    except Exception as e:
        logger.error("Error in country switch handler", 
                    telegram_id=telegram_id,
                    target_country=country_code,
                    error=str(e))
        
        await callback.message.edit_text(
            f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –Ω–∞ {country_code}",
            reply_markup=get_main_menu_keyboard()
        )


@router.callback_query(F.data.startswith("current_country:"))
async def handle_current_country_click(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–µ (disabled –∫–Ω–æ–ø–∫–∞)"""
    await callback.answer("–≠—Ç–æ –≤–∞—à —Ç–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä", show_alert=False)
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - –∫–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


@router.callback_query(F.data == "switching_in_progress")
async def handle_switching_in_progress(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"""
    await callback.answer("–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...", show_alert=False)
    # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º - –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@router.callback_query(F.data == "cancel_country_switch")
async def handle_cancel_country_switch(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω—ã"""
    await callback.answer()
    
    logger.info("User cancelled country switch", telegram_id=callback.from_user.id)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –º–µ–Ω—é VPN –∫–ª—é—á–∞
    await callback.message.edit_text(
        "‚ùå –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_menu_keyboard()
    )


# Helper function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ VPN –∫–ª—é—á–∞ —Å –≤—ã–±–æ—Ä–æ–º —Å—Ç—Ä–∞–Ω
async def enhance_vpn_key_message(vless_url: str, telegram_id: int, is_update: bool = False):
    """
    –†–∞—Å—à–∏—Ä—è–µ—Ç VPN key message –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º —Å–µ—Ä–≤–µ—Ä–µ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω
    
    Args:
        vless_url: VLESS URL –∫–ª—é—á–∞
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_update: –§–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
    
    Returns:
        tuple: (message_text, keyboard) –∏–ª–∏ (basic_message, basic_keyboard) –µ—Å–ª–∏ country service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    """
    if not COUNTRY_SERVICE_AVAILABLE:
        # Fallback –∫ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–∫–∞–∑–æ–º —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_country = DEMO_COUNTRIES[0]  # –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã
        message_text = get_vpn_key_message_with_server(vless_url, default_country, is_update)
        keyboard = get_vpn_key_keyboard_with_countries(default_country["code"], DEMO_COUNTRIES)
        return message_text, keyboard
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
        countries_data = await get_available_countries()
        if not countries_data:
            # –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ —Å—Ç—Ä–∞–Ω—ã
            countries_data = DEMO_COUNTRIES
        
        # –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–û–ï –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        assignment_info = await get_user_current_assignment_info(telegram_id)
        
        if assignment_info and assignment_info.get('country'):
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            current_country = assignment_info['country']
        else:
            # –ù–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            current_country = DEMO_COUNTRIES[0]  # –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ
        message_text = get_vpn_key_message_with_server(
            vless_url, 
            current_country, 
            is_update
        )
        keyboard = get_vpn_key_keyboard_with_countries(
            current_country["code"],
            countries_data
        )
        return message_text, keyboard
            
    except Exception as e:
        logger.error("Error creating enhanced VPN message", 
                    telegram_id=telegram_id, 
                    error=str(e))
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –¢–ê–ö–ñ–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        default_country = DEMO_COUNTRIES[0]  # –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã
        message_text = get_vpn_key_message_with_server(vless_url, default_country, is_update)
        return message_text, get_main_menu_keyboard()