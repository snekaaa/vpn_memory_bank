"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ VPN –±–æ—Ç–∞ (4 –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏)
–° –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π VPN –∫–ª—é—á–µ–π
"""

import structlog
import sys
import os
from aiogram import types, F, Router

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '../../backend'))

from services.vpn_manager_x3ui import vpn_manager_x3ui as vpn_manager
from templates.messages import (
    get_vpn_key_message,
    get_download_apps_message, 
    get_support_message,
    get_no_key_error,
    get_key_update_error
)
from keyboards.main_menu import get_main_menu_keyboard

logger = structlog.get_logger(__name__)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º VPN Access Control
try:
    from services.vpn_access_control_service import check_user_vpn_access
    from config.database import get_db
    VPN_ACCESS_CONTROL_AVAILABLE = True
    logger.info("VPN Access Control loaded successfully")
except ImportError as e:
    logger.warning("VPN Access Control not available", error=str(e))
    VPN_ACCESS_CONTROL_AVAILABLE = False
router = Router()

async def check_vpn_access(telegram_id: int) -> dict:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN —á–µ—Ä–µ–∑ VPNAccessControlService"""
    try:
        if not VPN_ACCESS_CONTROL_AVAILABLE:
            logger.warning("VPN Access Control not available", telegram_id=telegram_id)
            return {"has_access": True, "reason": "no_access_control"}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        async for db_session in get_db():
            try:
                result = await check_user_vpn_access(db_session, telegram_id)
                logger.info("VPN access check completed", 
                           telegram_id=telegram_id,
                           has_access=result.get("has_access"),
                           reason=result.get("reason"))
                return result
            except Exception as e:
                logger.error("Error during VPN access check", 
                           telegram_id=telegram_id,
                           error=str(e))
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø (fail-open)
                return {"has_access": True, "reason": "check_error"}
            finally:
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ async generator
                
    except Exception as e:
        logger.error("Critical error in VPN access check", 
                   telegram_id=telegram_id,
                   error=str(e))
        # –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø (fail-open)
        return {"has_access": True, "reason": "critical_error"}

async def show_subscription_required_message(message, access_result: dict):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–ª–∞–Ω–∞–º–∏"""
    try:
        
        reason = access_result.get("reason", "no_subscription")
        days_remaining = access_result.get("days_remaining", 0)
        
        if reason == "no_subscription":
            if days_remaining > 0:
                # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ
                message_text = (
                    f"‚è∞ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ {abs(days_remaining)} –¥–Ω. –Ω–∞–∑–∞–¥**\n\n"
                    "üîê –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–ª—é—á–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
                    "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"
                )
            else:
                # –ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –≤–æ–æ–±—â–µ
                message_text = (
                    "üîê **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–ª—é—á–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n\n"
                    "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"
                )
        elif reason == "user_not_found":
            message_text = (
                "‚ùå **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ**\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        else:
            message_text = (
                "‚ùå **–î–æ—Å—Ç—É–ø –∫ VPN –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {access_result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        if reason in ["no_subscription"]:
            try:
                from keyboards.main_menu import get_subscription_keyboard_with_autopay
                keyboard = await get_subscription_keyboard_with_autopay()
            except Exception as e:
                logger.error("Error creating subscription keyboard", error=str(e))
                keyboard = get_main_menu_keyboard()
        else:
            keyboard = get_main_menu_keyboard()
        
        await message.edit_text(
            message_text,
            parse_mode="Markdown",
            reply_markup=keyboard
        )
        
        logger.info("Subscription required message shown", 
                   reason=reason,
                   days_remaining=days_remaining)
        
    except Exception as e:
        logger.error("Error showing subscription required message", error=str(e))
        
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(
            "üîê **–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n\n"
            "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–ü–æ–¥–ø–∏—Å–∫–∞' –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.",
            parse_mode="Markdown",
            reply_markup=get_main_menu_keyboard()
        )

@router.callback_query(F.data == "create_or_remind_key")
async def handle_create_or_remind_key(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å/–Ω–∞–ø–æ–º–Ω–∏—Ç—å –∫–ª—é—á' —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    telegram_id = callback.from_user.id
    username = callback.from_user.username or ""
    first_name = callback.from_user.first_name or ""
    
    logger.info("User requested VPN key", telegram_id=telegram_id, username=username, first_name=first_name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await callback.message.edit_text(
        "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ VPN...",
        reply_markup=None
    )
    
    try:
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏
        if VPN_ACCESS_CONTROL_AVAILABLE:
            access_result = await check_vpn_access(telegram_id)
            
            if not access_result.get("has_access", False):
                # –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
                await show_subscription_required_message(loading_msg, access_result)
                return
        else:
            logger.warning("VPN Access Control not available, proceeding without check", telegram_id=telegram_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.edit_text("üîÑ –ü–æ–ª—É—á–∞–µ–º –≤–∞—à VPN –∫–ª—é—á...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ VPN –º–µ–Ω–µ–¥–∂–µ—Ä
        vpn_key_data = await vpn_manager.get_or_create_user_key(telegram_id, username, first_name)
        
        if vpn_key_data and vpn_key_data.get('vless_url'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º
            message_text = get_vpn_key_message(vpn_key_data['vless_url'], is_update=False)
            
            await loading_msg.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.info("VPN key provided to user", 
                       telegram_id=telegram_id,
                       key_id=vpn_key_data.get('id'))
        else:
            # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
            await loading_msg.edit_text(
                get_no_key_error(),
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.error("Failed to provide VPN key", telegram_id=telegram_id)
            
    except Exception as e:
        logger.error("Error in create_or_remind_key handler", 
                    telegram_id=telegram_id, 
                    error=str(e))
        
        await loading_msg.edit_text(
            get_no_key_error(),
            reply_markup=get_main_menu_keyboard()
        )

@router.callback_query(F.data == "refresh_key")
async def handle_refresh_key(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á' —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    telegram_id = callback.from_user.id
    username = callback.from_user.username or ""
    first_name = callback.from_user.first_name or ""
    
    logger.info("User requested VPN key refresh", telegram_id=telegram_id, username=username, first_name=first_name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await callback.message.edit_text(
        "üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ VPN...",
        reply_markup=None
    )
    
    try:
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–¥–ø–∏—Å–∫–∏
        if VPN_ACCESS_CONTROL_AVAILABLE:
            access_result = await check_vpn_access(telegram_id)
            
            if not access_result.get("has_access", False):
                # –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏
                await show_subscription_required_message(loading_msg, access_result)
                return
        else:
            logger.warning("VPN Access Control not available, proceeding without check", telegram_id=telegram_id)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await loading_msg.edit_text(
            "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—à VPN –∫–ª—é—á...\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 15 —Å–µ–∫—É–Ω–¥"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ VPN –º–µ–Ω–µ–¥–∂–µ—Ä
        vpn_key_data = await vpn_manager.update_user_key(telegram_id, username, first_name)
        
        if vpn_key_data and vpn_key_data.get('vless_url'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –∫–æ–º–∞–Ω–¥–µ /refresh_key (—Ä–∞–±–æ—Ç–∞—é—â–∞—è)
            message_text = get_vpn_key_message(vpn_key_data['vless_url'], is_update=True)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º
            await loading_msg.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=get_main_menu_keyboard(),
                disable_web_page_preview=True
            )
            
            logger.info("VPN key refreshed successfully", telegram_id=telegram_id)
        else:
            # –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ –∫–æ–º–∞–Ω–¥–µ
            await loading_msg.edit_text(
                get_key_update_error(),
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.error("Failed to refresh VPN key via callback", telegram_id=telegram_id)
    except Exception as e:
        logger.error("Error during VPN key refresh", 
                    telegram_id=telegram_id, 
                    error=str(e))
        
        await loading_msg.edit_text(
            get_key_update_error(),
            reply_markup=get_main_menu_keyboard()
        )

@router.callback_query(F.data == "download_apps")
async def handle_download_apps(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'"""
    await callback.answer()
    
    logger.info("User requested download apps", telegram_id=callback.from_user.id)
    
    await callback.message.edit_text(
        get_download_apps_message(),
        parse_mode="Markdown", 
        reply_markup=get_main_menu_keyboard(),
        disable_web_page_preview=True
    )