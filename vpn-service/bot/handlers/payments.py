"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è Telegram –±–æ—Ç–∞
"""

import logging
from typing import Dict, Any
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import json

from keyboards.main_menu import (
    get_main_menu, 
    get_back_to_menu_keyboard, 
    get_user_subscription_days,
    get_subscription_keyboard_without_cancel,
    get_payment_confirmation_keyboard_back_only,
    get_existing_payment_keyboard,
    get_subscription_keyboard_with_autopay,
    get_subscription_keyboard_with_autopay_toggle,
    send_main_menu
)
from services.plans_api_client import plans_api_client
# from api_client import api_client  # –û—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π SimpleAPIClient
import aiohttp
import structlog

logger = structlog.get_logger(__name__)

router = Router()

class PaymentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    selecting_plan = State()
    confirming_payment = State()
    processing_payment = State()

async def get_subscription_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (—Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    buttons = []
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã –∏–∑ API
        subscription_plans = await plans_api_client.get_plans()
        
        for plan_id, plan in subscription_plans.items():
            discount_text = f" (-{plan['discount']})" if plan.get('discount') else ""
            button_text = f"{plan['name']} - {plan['price']}‚ÇΩ{discount_text}"
            buttons.append([InlineKeyboardButton(
                text=button_text,
                callback_data=f"pay:{plan_id}"
            )])
    except Exception as e:
        logger.error(f"Error loading subscription plans: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ"
        buttons.append([InlineKeyboardButton(
            text="‚ö†Ô∏è –ü–ª–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
            callback_data="plans_unavailable"
        )])
    
    buttons.append([InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_payment"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_payment_confirmation_keyboard(plan_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (—Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã - –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    buttons = [
        [InlineKeyboardButton(
            text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
            callback_data=f"confirm_pay:{plan_id}"
        )],
        [InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="select_subscription"
        )],
        [InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data="cancel_payment"
        )]
    ]
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

async def show_active_subscription_info(message: Message, subscription_info: dict, telegram_id: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º"""
    
    end_date = subscription_info.get('end_date')
    days_remaining = subscription_info.get('days_remaining', 0)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    api_client = SimpleAPIClient()
    auto_payment_info = await api_client.get_user_auto_payment_info(telegram_id)
    autopay_enabled = auto_payment_info.get('enabled', True)
    
    # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    autopay_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if autopay_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    
    text = (
        f"üí≥ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date}**\n\n"
        f"‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** {days_remaining} –¥–Ω.\n\n"
        f"‚ö° **–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:** {autopay_status}\n\n"
        f"üí° **–î–æ–∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:**"
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    keyboard = await get_subscription_keyboard_with_autopay_toggle(autopay_enabled)
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")


async def show_active_subscription_info_with_autopay_state(message: Message, subscription_info: dict, telegram_id: int, autopay_enabled: bool):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    
    end_date = subscription_info.get('end_date')
    days_remaining = subscription_info.get('days_remaining', 0)
    
    # –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    autopay_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if autopay_enabled else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    
    text = (
        f"üí≥ **–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ {end_date}**\n\n"
        f"‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** {days_remaining} –¥–Ω.\n\n"
        f"‚ö° **–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:** {autopay_status}\n\n"
        f"üí° **–î–æ–∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:**"
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    keyboard = await get_subscription_keyboard_with_autopay_toggle(autopay_enabled)
    
    try:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error updating message: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")


async def show_subscription_plans_selection(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    
    await state.set_state(PaymentStates.selecting_plan)
    
    text = (
        f"üí≥ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n"
        f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN —Å–µ—Ä–≤–∏—Å–∞"
    )
    
    # –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ
    keyboard = await get_subscription_keyboard_with_autopay_toggle(autopay_enabled=True)
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")

@router.message(F.text.startswith("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"))
async def show_subscription_plans(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ –ø–ª–∞–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    try:
        telegram_id = message.from_user.id
        api_client = SimpleAPIClient()
        
        # 1. –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ valid_until
        subscription_info = await api_client.get_user_subscription_status(telegram_id)
        
        if subscription_info and subscription_info.get('success'):
            days_remaining = subscription_info.get('days_remaining', 0)
            
            if days_remaining > 0:
                # –ê–ö–¢–ò–í–ù–ê–Ø –ü–û–î–ü–ò–°–ö–ê - –ø–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º
                await show_active_subscription_info(message, subscription_info, telegram_id)
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        pending_payments_response = await SimpleAPIClient().get_user_pending_payments(telegram_id)
        
        if pending_payments_response and pending_payments_response.get('pending_payments'):
            # –ï—Å—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            payments = pending_payments_response['pending_payments']
            latest_payment = payments[0]  # –ë–µ—Ä–µ–º —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π
            
            payment_id = latest_payment['id']
            amount = latest_payment['amount']
            description = latest_payment['description']
            payment_url = latest_payment['confirmation_url']
            payment_metadata = latest_payment.get('payment_metadata', {})
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            service_name = "VPN –ü–æ–¥–ø–∏—Å–∫–∞"
            service_description = description or "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN —Å–µ—Ä–≤–∏—Å"
            
            if payment_metadata and payment_metadata.get('subscription_type'):
                try:
                    plan = await plans_api_client.get_plan(payment_metadata['subscription_type'])
                    if plan:
                        service_name = plan['name']
                        service_description = plan['description']
                except Exception as e:
                    logger.error(f"Error getting plan details: {e}")
            
            text = (
                f"üí≥ **–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É**\n\n"
                f"üéØ **–£—Å–ª—É–≥–∞:** {service_name}\n"
                f"üìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {service_description}\n\n"
                f"üí∞ **–°—É–º–º–∞:** {amount}‚ÇΩ\n"
                f"üÜî **ID –ø–ª–∞—Ç–µ–∂–∞:** {payment_id}\n\n"
                f"üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å."
            )
            
            if payment_url:
                keyboard = get_existing_payment_keyboard(payment_id, payment_url)
            else:
                # –ï—Å–ª–∏ URL –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∏ –æ—Ç–º–µ–Ω—É
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                        callback_data=f"check_payment:{payment_id}"
                    )],
                    [InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç",
                        callback_data="cancel_payment"
                    )]
                ])
            
            await message.answer(
                text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            await state.update_data(payment_id=payment_id)
            await state.set_state(PaymentStates.processing_payment)
            return
        
        # 2. –ù–ï–¢ –ê–ö–¢–ò–í–ù–û–ô –ü–û–î–ü–ò–°–ö–ò - –ø–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã
        await show_subscription_plans_selection(message, state)
        
    except Exception as e:
        logger.error(f"Error showing subscription plans: {e}")
        await send_main_menu(message, message.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ")

@router.callback_query(F.data.startswith("pay:"))
async def handle_plan_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        plan_id = callback.data.split(":")[1]
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ API
        plan = await plans_api_client.get_plan(plan_id)
        
        if not plan:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –∏–ª–∏ –ø–ª–∞–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return
        
        await state.update_data(selected_plan=plan_id)
        await state.set_state(PaymentStates.confirming_payment)
        
        discount_text = f"\nüéâ **–°–∫–∏–¥–∫–∞: {plan['discount']}**" if plan.get('discount') else ""
        
        text = (
            f"üìã **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞:**\n\n"
            f"üéØ –ü–ª–∞–Ω: {plan['name']}\n"
            f"üí∞ –¶–µ–Ω–∞: {plan['price']}‚ÇΩ\n"
            f"‚è± –°—Ä–æ–∫: {plan['duration']}"
            f"{discount_text}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {plan['description']}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_payment_confirmation_keyboard_back_only(plan_id),
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error handling plan selection: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("confirm_pay:"))
async def handle_payment_confirmation(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        plan_id = callback.data.split(":")[1]
        user_id = callback.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        await callback.message.edit_text(
            "‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...",
            reply_markup=None
        )
        
        api_client = SimpleAPIClient()
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_data = await api_client.get_user_by_telegram_id(user_id)
        if not user_data:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=get_back_to_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
        plan = await plans_api_client.get_plan(plan_id)
        if not plan:
            await callback.message.edit_text(
                "‚ùå –ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_to_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–ø–∞–≤—à–∏–π—Å—è
        active_providers = await api_client.get_active_payment_providers()
        
        if not active_providers or not active_providers.get('providers'):
            await callback.message.edit_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=get_back_to_menu_keyboard()
            )
            return
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        selected_provider = active_providers['providers'][0]
        provider_type = selected_provider['provider_type']
        
        logger.info(f"üéØ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {selected_provider['name']} ({provider_type})")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
        payment_data = {
            "user_id": user_data["id"],
            "subscription_type": plan_id,
            "service_name": plan["name"],  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏
            "user_email": f"user_{user_id}@telegram.local",
            "success_url": f"https://t.me/vpn_bezlagov_test_bot?start=payment_success",
            "fail_url": f"https://t.me/vpn_bezlagov_test_bot?start=payment_fail",
            "provider_type": provider_type  # –£–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        }
        
        payment_result = await api_client.create_payment(payment_data)
        
        if payment_result.get("status") == "success":
            payment_url = payment_result["payment_url"]
            payment_id = payment_result["payment_id"]
            amount = payment_result["amount"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(payment_id=payment_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            payment_keyboard = get_existing_payment_keyboard(payment_id, payment_url)
            
            text = (
                f"üí≥ **–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É**\n\n"
                f"üéØ **–£—Å–ª—É–≥–∞:** {plan['name']}\n"
                f"üìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {plan['description']}\n\n"
                f"üí∞ **–°—É–º–º–∞:** {amount}‚ÇΩ\n"
                f"üÜî **ID –ø–ª–∞—Ç–µ–∂–∞:** {payment_id}\n"
                f"üí≥ **–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:** {selected_provider['name']}\n\n"
                f"üëÜ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n"
                f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å."
            )
            
            await callback.message.edit_text(
                text,
                reply_markup=payment_keyboard,
                parse_mode="Markdown"
            )
            
        else:
            error_message = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            if payment_result:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                detail = payment_result.get('detail')
                if isinstance(detail, dict):
                    # –ï—Å–ª–∏ detail - —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç FastAPI), –∏—â–µ–º –≤ –Ω–µ–º 'detail'
                    error_message = detail.get('detail', str(detail))
                elif detail:
                    # –ï—Å–ª–∏ detail - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    error_message = str(detail)
                else:
                    # –§–æ–ª–ª–±—ç–∫ –Ω–∞ –ø–æ–ª–µ 'error'
                    error_message = payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')

            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {error_message}",
                reply_markup=get_back_to_menu_keyboard()
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error handling payment confirmation: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞",
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()

@router.callback_query(F.data.startswith("check_payment:"))
async def handle_payment_check(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_id = callback.data.split(":")[1]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≤–µ—Ä–∫–µ
        await callback.message.edit_text(
            "‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞...",
            reply_markup=None
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ API
        api_client = SimpleAPIClient()
        payment_status = await api_client.get_payment_status(payment_id)
        
        if payment_status.get("status") == "success":
            status = payment_status["payment_status"]
            amount = payment_status["amount"]
            
            if status == "SUCCEEDED":
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                service_info = ""
                try:
                    if payment_status.get("payment_metadata") and payment_status["payment_metadata"].get("subscription_type"):
                        plan = await plans_api_client.get_plan(payment_status["payment_metadata"]["subscription_type"])
                        if plan:
                            service_info = f"üéØ **–£—Å–ª—É–≥–∞:** {plan['name']}\nüìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {plan['description']}\n\n"
                except Exception as e:
                    logger.error(f"Error getting plan details for success message: {e}")
                
                # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
                await callback.message.edit_text(
                    f"‚úÖ **–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                    f"{service_info}"
                    f"üí∞ **–°—É–º–º–∞:** {amount}‚ÇΩ\n"
                    f"üÜî **ID:** {payment_id}\n\n"
                    f"üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å VPN –∫–ª—é—á–∏.",
                    reply_markup=get_back_to_menu_keyboard(),
                    parse_mode="Markdown"
                )
                
                # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.clear()
                
            elif status == "FAILED":
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ –¥–ª—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                service_info = ""
                try:
                    if payment_status.get("payment_metadata") and payment_status["payment_metadata"].get("subscription_type"):
                        plan = await plans_api_client.get_plan(payment_status["payment_metadata"]["subscription_type"])
                        if plan:
                            service_info = f"üéØ **–£—Å–ª—É–≥–∞:** {plan['name']}\n\n"
                except Exception as e:
                    logger.error(f"Error getting plan details for failed message: {e}")
                
                # –ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è
                await callback.message.edit_text(
                    f"‚ùå **–ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è**\n\n"
                    f"{service_info}"
                    f"üÜî **ID:** {payment_id}\n\n"
                    f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                    reply_markup=get_back_to_menu_keyboard(),
                    parse_mode="Markdown"
                )
                
                await state.clear()
                
            else:
                # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ - –ø–æ–ª—É—á–∞–µ–º URL –∏–∑ –æ—Ç–≤–µ—Ç–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                payment_url = payment_status.get("confirmation_url", "")
                if payment_url:
                    payment_keyboard = get_existing_payment_keyboard(payment_id, payment_url)
                else:
                    payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(
                            text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ —Ä–∞–∑",
                            callback_data=f"check_payment:{payment_id}"
                        )],
                        [InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Å—á–µ—Ç",
                            callback_data="cancel_payment"
                        )]
                    ])
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                service_info = ""
                try:
                    if payment_status.get("payment_metadata") and payment_status["payment_metadata"].get("subscription_type"):
                        plan = await plans_api_client.get_plan(payment_status["payment_metadata"]["subscription_type"])
                        if plan:
                            service_info = f"üéØ **–£—Å–ª—É–≥–∞:** {plan['name']}\nüìã **–û–ø–∏—Å–∞–Ω–∏–µ:** {plan['description']}\n\n"
                except Exception as e:
                    logger.error(f"Error getting plan details for payment check: {e}")
                
                await callback.message.edit_text(
                    f"‚è≥ **–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ**\n\n"
                    f"{service_info}"
                    f"üí∞ **–°—É–º–º–∞:** {amount}‚ÇΩ\n"
                    f"üÜî **ID:** {payment_id}\n"
                    f"üìä **–°—Ç–∞—Ç—É—Å:** {status}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ.",
                    reply_markup=payment_keyboard,
                    parse_mode="Markdown"
                )
        else:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {payment_status.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}",
                reply_markup=get_back_to_menu_keyboard()
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error checking payment status: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞",
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()

@router.callback_query(F.data == "select_subscription")
async def back_to_subscription_selection(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        await state.set_state(PaymentStates.selecting_plan)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –∏–∑ API
        try:
            subscription_plans = await plans_api_client.get_plans()
            
            text_lines = ["üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:**\n"]
            for plan_id, plan in subscription_plans.items():
                discount_text = f" **-{plan['discount']}**" if plan.get('discount') else ""
                text_lines.append(f"‚Ä¢ {plan['name']} - {plan['price']}‚ÇΩ ({plan['duration']}){discount_text}")
            
            text_lines.append("\nüí° –ß–µ–º –¥–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å–∫–∞, —Ç–µ–º –±–æ–ª—å—à–µ —Å–∫–∏–¥–∫–∞!")
            text = "\n".join(text_lines)
            
        except Exception as e:
            logger.error(f"Error loading plans for text: {e}")
            text = (
                "üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n"
                "‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω...\n\n"
                "üí° –ß–µ–º –¥–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å–∫–∞, —Ç–µ–º –±–æ–ª—å—à–µ —Å–∫–∏–¥–∫–∞!"
            )
        
        keyboard = await get_subscription_keyboard_without_cancel()
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error going back to subscription selection: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "plans_unavailable")
async def handle_plans_unavailable(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–æ–≤"""
    try:
        await callback.answer("‚ö†Ô∏è –ü–ª–∞–Ω—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        await callback.message.edit_text(
            "‚ö†Ô∏è **–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã**\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã\n"
            "‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=get_back_to_menu_keyboard(),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error handling plans unavailable: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞ –∏ –≤—Å–µ—Ö –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—á–µ—Ç–æ–≤"""
    try:
        telegram_id = callback.from_user.id
        
        # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cancel_result = await SimpleAPIClient().cancel_user_pending_payments(telegram_id)
        
        if cancel_result and cancel_result.get('status') == 'success':
            logger.info(f"Successfully cancelled pending payments for user {telegram_id}")
        else:
            logger.warning(f"Failed to cancel pending payments for user {telegram_id}")
        
        await state.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –∏–∑ API –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
        try:
            subscription_plans = await plans_api_client.get_plans()
            
            text_lines = ["‚ùå **–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n"]
            text_lines.append("üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:**\n")
            for plan_id, plan in subscription_plans.items():
                discount_text = f" **-{plan['discount']}**" if plan.get('discount') else ""
                text_lines.append(f"‚Ä¢ {plan['name']} - {plan['price']}‚ÇΩ ({plan['duration']}){discount_text}")
            
            text_lines.append("\nüí° –ß–µ–º –¥–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å–∫–∞, —Ç–µ–º –±–æ–ª—å—à–µ —Å–∫–∏–¥–∫–∞!")
            text = "\n".join(text_lines)
            
        except Exception as e:
            logger.error(f"Error loading plans after cancel: {e}")
            text = (
                "‚ùå **–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞**\n\n"
                "üéØ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n"
                "‚ö†Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω...\n\n"
                "üí° –ß–µ–º –¥–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å–∫–∞, —Ç–µ–º –±–æ–ª—å—à–µ —Å–∫–∏–¥–∫–∞!"
            )
        
        keyboard = await get_subscription_keyboard_without_cancel()
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        await state.set_state(PaymentStates.selecting_plan)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error canceling payment: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        await state.clear()
        await callback.message.delete()
        await send_main_menu(callback.message, callback.from_user.id)
        await callback.answer()
    except Exception as e:
        logger.error(f"Error returning to main menu: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data.startswith("pay_autopay:"))
async def handle_autopay_payment(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã —Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º"""
    try:
        plan_id = callback.data.split(":")[1]
        user_id = callback.from_user.id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        await callback.message.edit_text(
            "‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º...",
            reply_markup=None
        )
        
        api_client = SimpleAPIClient()
        
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_data = await api_client.get_user_by_telegram_id(user_id)
        if not user_data:
            await callback.message.edit_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start",
                reply_markup=get_back_to_menu_keyboard()
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
        plan = await plans_api_client.get_plan(plan_id)
        if not plan:
            await callback.message.edit_text(
                "‚ùå –ü–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω",
                reply_markup=get_back_to_menu_keyboard()
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å —Ñ–ª–∞–≥–æ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
        payment_data = {
            "user_id": user_data["id"],
            "subscription_type": plan_id,
            "service_name": plan["name"],
            "user_email": f"user_{user_id}@telegram.local",
            "success_url": f"https://t.me/vpn_bezlagov_test_bot?start=payment_success",
            "fail_url": f"https://t.me/vpn_bezlagov_test_bot?start=payment_fail",
            "provider_type": "robokassa",  # –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Robokassa
            "enable_autopay": True  # –ö–ª—é—á–µ–≤–æ–π —Ñ–ª–∞–≥
        }
        
        payment_result = await api_client.create_payment(payment_data)
        
        if payment_result.get("status") == "success":
            payment_url = payment_result["payment_url"]
            payment_id = payment_result["payment_id"]
            amount = payment_result["amount"]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(payment_id=payment_id)
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            payment_keyboard = get_existing_payment_keyboard(payment_id, payment_url)
            
            text = (
                f"üí≥ **–û–ø–ª–∞—Ç–∞ —Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º**\n\n"
                f"üìã **–ü–ª–∞–Ω:** {plan['name']}\n"
                f"üí∞ **–°—É–º–º–∞:** {amount}‚ÇΩ\n\n"
                f"‚ö° **–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω** –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã\n"
                f"üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –ø–µ—Ä–∏–æ–¥\n\n"
                f"üëÜ –ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ"
            )
            
            await callback.message.edit_text(
                text,
                reply_markup=payment_keyboard,
                parse_mode="Markdown"
            )
            
        else:
            error_message = payment_result.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {error_message}",
                reply_markup=get_back_to_menu_keyboard()
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error handling autopay payment: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞",
            reply_markup=get_back_to_menu_keyboard()
        )
        await callback.answer()

@router.callback_query(F.data == "autopay_disable")
async def handle_autopay_disable(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    try:
        telegram_id = callback.from_user.id
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        text = (
            "‚ö†Ô∏è **–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞**\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏?\n\n"
            "–ü–æ—Å–ª–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é."
        )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å",
                callback_data="autopay_disable_confirm"
            )],
            [InlineKeyboardButton(
                text="‚ùå –û—Ç–º–µ–Ω–∞",
                callback_data="back_to_subscription"
            )]
        ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error handling autopay disable: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "autopay_disable_confirm")
async def handle_autopay_disable_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    try:
        telegram_id = callback.from_user.id
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API
        api_client = SimpleAPIClient()
        result = await api_client.cancel_user_auto_payment(telegram_id)
        
        if result and result.get('success'):
            text = (
                "‚úÖ **–ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª—é—á–µ–Ω**\n\n"
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ.\n"
                "–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é."
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üìã –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫",
                    callback_data="show_plans"
                )],
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                    callback_data="back_to_main_menu"
                )]
            ])
        else:
            text = (
                "‚ùå **–û—à–∏–±–∫–∞**\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞",
                    callback_data="autopay_disable"
                )],
                [InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="back_to_subscription"
                )]
            ])
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error confirming autopay disable: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "back_to_subscription")
async def back_to_subscription_view(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        # –≠–º—É–ª–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥—ã "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"
        from aiogram.types import Message
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        await show_subscription_plans(callback.message, FSMContext())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error going back to subscription: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "show_plans")
async def show_plans_callback(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ (callback –≤–µ—Ä—Å–∏—è)"""
    try:
        keyboard = await get_subscription_keyboard_with_autopay()
        
        text = (
            f"üí≥ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
            f"‚ö° **–° –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º** - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ\n"
            f"üí≥ **–û–±—ã—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞** - —Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂\n\n"
            f"üí° –ß–µ–º –¥–æ–ª—å—à–µ –ø–æ–¥–ø–∏—Å–∫–∞, —Ç–µ–º –±–æ–ª—å—à–µ —Å–∫–∏–¥–∫–∞!"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing plans: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

@router.callback_query(F.data == "autopay_enable")
async def handle_autopay_enable(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
    try:
        telegram_id = callback.from_user.id
        api_client = SimpleAPIClient()
        
        result = await api_client.enable_user_auto_payment(telegram_id)
        
        if result and result.get('success'):
            await callback.answer("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await refresh_subscription_display(callback.message, telegram_id)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è")
            
    except Exception as e:
        logger.error(f"Error enabling autopay: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "toggle_autopay_on")
async def handle_toggle_autopay_on(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ toggle –∫–Ω–æ–ø–∫—É"""
    try:
        telegram_id = callback.from_user.id
        api_client = SimpleAPIClient()
        
        result = await api_client.enable_user_auto_payment(telegram_id)
        
        if result and result.get('success'):
            await callback.answer("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            subscription_info = await api_client.get_user_subscription_status(telegram_id)
            
            if subscription_info and subscription_info.get('success'):
                days_remaining = subscription_info.get('days_remaining', 0)
                
                if days_remaining > 0:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                    await show_active_subscription_info_with_autopay_state(callback.message, subscription_info, telegram_id, True)
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–æ–≤
                    await show_subscription_plans_selection_with_new_state(callback.message, autopay_enabled=True)
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
                await show_subscription_plans_selection_with_new_state(callback.message, autopay_enabled=True)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è")
            
    except Exception as e:
        logger.error(f"Error toggling autopay on: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


@router.callback_query(F.data == "toggle_autopay_off")  
async def handle_toggle_autopay_off(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ toggle –∫–Ω–æ–ø–∫—É"""
    try:
        telegram_id = callback.from_user.id
        api_client = SimpleAPIClient()
        
        result = await api_client.cancel_user_auto_payment(telegram_id)
        
        if result and result.get('success'):
            await callback.answer("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            subscription_info = await api_client.get_user_subscription_status(telegram_id)
            
            if subscription_info and subscription_info.get('success'):
                days_remaining = subscription_info.get('days_remaining', 0)
                
                if days_remaining > 0:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                    await show_active_subscription_info_with_autopay_state(callback.message, subscription_info, telegram_id, False)
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–æ–≤
                    await show_subscription_plans_selection_with_new_state(callback.message, autopay_enabled=False)
            else:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏, –æ–±–Ω–æ–≤–ª—è–µ–º —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º
                await show_subscription_plans_selection_with_new_state(callback.message, autopay_enabled=False)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è")
            
    except Exception as e:
        logger.error(f"Error toggling autopay off: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


async def show_subscription_plans_selection_with_new_state(message: Message, autopay_enabled: bool):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–æ–≤ —Å –Ω–æ–≤—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    
    text = (
        f"üí≥ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n"
        f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN —Å–µ—Ä–≤–∏—Å–∞"
    )
    
    keyboard = await get_subscription_keyboard_with_autopay_toggle(autopay_enabled)
    
    try:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"Error updating message: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")


async def refresh_subscription_display(message: Message, telegram_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    api_client = SimpleAPIClient()
    subscription_info = await api_client.get_user_subscription_status(telegram_id)
    
    if subscription_info and subscription_info.get('success'):
        days_remaining = subscription_info.get('days_remaining', 0)
        
        if days_remaining > 0:
            await show_active_subscription_info(message, subscription_info, telegram_id)
        else:
            await show_subscription_plans_selection_with_new_state(message, autopay_enabled=True)

class SimpleAPIClient:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å backend"""
    
    def __init__(self):
        self.base_url = "http://backend:8000"
    
    async def _make_request(self, method: str, endpoint: str, data: Dict = None) -> Dict:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"{self.base_url}{endpoint}"
                async with session.request(method, url, json=data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        text = await response.text()
                        logger.error("API request failed", status=response.status, response=text)
                        try:
                            detail = json.loads(text)
                        except json.JSONDecodeError:
                            detail = text
                        return {"error": f"HTTP {response.status}", "detail": detail}
        except Exception as e:
            logger.error("API request error", error=str(e))
            return {"error": str(e), "detail": str(e)}
    
    async def get_user_by_telegram_id(self, telegram_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
        return await self._make_request("GET", f"/api/v1/users/telegram/{telegram_id}")
    
    async def create_payment(self, payment_data: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
        return await self._make_request("POST", "/api/v1/payments/create", payment_data)
    
    async def get_payment_status(self, payment_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        return await self._make_request("GET", f"/api/v1/payments/{payment_id}") 
    
    async def get_user_pending_payments(self, telegram_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self._make_request("GET", f"/api/v1/payments/user/{telegram_id}/pending")
    
    async def cancel_user_pending_payments(self, telegram_id: int) -> Dict:
        """–û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self._make_request("POST", f"/api/v1/payments/user/{telegram_id}/cancel_all")
    
    async def get_active_payment_providers(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤"""
        return await self._make_request("GET", "/api/v1/payments/providers/active")

    async def get_user_auto_payment_info(self, telegram_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self._make_request("GET", f"/api/v1/users/{telegram_id}/auto_payment_info")

    async def get_user_subscription_status(self, telegram_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self._make_request("GET", f"/api/v1/users/{telegram_id}/subscription_status")

    async def cancel_user_auto_payment(self, telegram_id: int) -> Dict:
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self._make_request("POST", f"/api/v1/users/{telegram_id}/auto_payment/disable")

    async def enable_user_auto_payment(self, telegram_id: int) -> Dict:
        """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await self._make_request("POST", f"/api/v1/users/{telegram_id}/auto_payment/enable")