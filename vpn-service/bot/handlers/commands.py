"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é Telegram
"""

import structlog
from aiogram import Router, types
from aiogram.filters import Command

from services.vpn_manager_x3ui import vpn_manager_x3ui as vpn_manager
from templates.messages import (
    get_vpn_key_message,
    get_download_apps_message, 
    get_support_message,
    get_no_key_error,
    get_key_update_error
)
from keyboards.main_menu import get_main_menu_keyboard

logger = structlog.get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
commands_router = Router()

@commands_router.message(Command("create_key"))
async def cmd_create_key(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /create_key - —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–ø–æ–º–Ω–∏—Ç—å –∫–ª—é—á"""
    telegram_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    
    logger.info("Command /create_key called", user_id=telegram_id, username=username, first_name=first_name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer(
        "üîÑ –ü–æ–ª—É—á–∞–µ–º –≤–∞—à VPN –∫–ª—é—á...",
        reply_markup=None
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ VPN –º–µ–Ω–µ–¥–∂–µ—Ä
        vpn_key_data = await vpn_manager.get_or_create_user_key(telegram_id, username, first_name)
        
        if vpn_key_data and vpn_key_data.get('vless_url'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª—é—á–æ–º
            message_text = get_vpn_key_message(vpn_key_data['vless_url'], is_update=False)
            
            await loading_msg.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.info("VPN key provided to user via command", 
                       telegram_id=telegram_id,
                       key_id=vpn_key_data.get('id'))
        else:
            # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
            await loading_msg.edit_text(
                get_no_key_error(),
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.error("Failed to provide VPN key via command", telegram_id=telegram_id)
            
    except Exception as e:
        logger.error("Error in create_key command", 
                    telegram_id=telegram_id, 
                    error=str(e))
        
        await loading_msg.edit_text(
            get_no_key_error(),
            reply_markup=get_main_menu_keyboard()
        )

@commands_router.message(Command("refresh_key"))
async def cmd_refresh_key(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /refresh_key - –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á"""
    telegram_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    
    logger.info("Command /refresh_key called", user_id=telegram_id, username=username, first_name=first_name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer(
        "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—à VPN –∫–ª—é—á...",
        reply_markup=None
    )
    
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ VPN –º–µ–Ω–µ–¥–∂–µ—Ä
        vpn_key_data = await vpn_manager.update_user_key(telegram_id, username, first_name)
        
        if vpn_key_data and vpn_key_data.get('vless_url'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
            message_text = get_vpn_key_message(vpn_key_data['vless_url'], is_update=True)
            
            await loading_msg.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.info("VPN key refreshed for user via command", 
                       telegram_id=telegram_id,
                       key_id=vpn_key_data.get('id'))
        else:
            # –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞
            await loading_msg.edit_text(
                get_key_update_error(),
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.error("Failed to refresh VPN key via command", telegram_id=telegram_id)
            
    except Exception as e:
        logger.error("Error in refresh_key command", 
                    telegram_id=telegram_id, 
                    error=str(e))
        
        await loading_msg.edit_text(
            get_key_update_error(),
            reply_markup=get_main_menu_keyboard()
        )

@commands_router.message(Command("download_apps"))
async def cmd_download_apps(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /download_apps - —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Command /download_apps called", user_id=message.from_user.id)
    
    await message.answer(
        get_download_apps_message(),
        parse_mode="Markdown", 
        reply_markup=get_main_menu_keyboard(),
        disable_web_page_preview=True
    )

@commands_router.message(Command("support"))
async def cmd_support(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /support - —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    logger.info("Command /support called", user_id=message.from_user.id)
    
    await message.answer(
        get_support_message(),
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    ) 