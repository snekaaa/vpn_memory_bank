"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é Telegram
"""

import structlog
from aiogram import Router, types
from aiogram.filters import Command

from services.vpn_manager_x3ui import vpn_manager_x3ui as vpn_manager
from templates.messages import (
    get_vpn_key_message,
    get_download_apps_message, 
    get_support_message,
    get_no_key_error,
    get_key_update_error
)
from keyboards.main_menu import get_main_menu_keyboard

logger = structlog.get_logger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥
commands_router = Router()

@commands_router.message(Command("create_key"))
async def cmd_create_key(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /create_key - —Å–æ–∑–¥–∞—Ç—å/–Ω–∞–ø–æ–º–Ω–∏—Ç—å –∫–ª—é—á"""
    telegram_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    
    logger.info("Command /create_key called", user_id=telegram_id, username=username, first_name=first_name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer(
        "üîÑ –ü–æ–ª—É—á–∞–µ–º –≤–∞—à VPN –∫–ª—é—á...",
        reply_markup=None
    )
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ VPN –º–µ–Ω–µ–¥–∂–µ—Ä
        vpn_key_data = await vpn_manager.get_or_create_user_key(telegram_id, username, first_name)
        
        if vpn_key_data and vpn_key_data.get('vless_url'):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ
            try:
                from handlers.vpn_simplified import enhance_vpn_key_message
                message_text, keyboard = await enhance_vpn_key_message(
                    vpn_key_data['vless_url'], 
                    telegram_id, 
                    is_update=False
                )
            except Exception as e:
                # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —à–∞–±–ª–æ–Ω—É —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                from templates.messages import get_vpn_key_message_with_server
                from handlers.vpn_simplified import get_default_country
                default_country = await get_default_country()  # –ü–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞
                message_text = get_vpn_key_message_with_server(
                    vpn_key_data['vless_url'], 
                    default_country, 
                    is_update=False
                )
                keyboard = get_main_menu_keyboard()
            
            await loading_msg.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            
            logger.info("VPN key provided to user via command", 
                       telegram_id=telegram_id,
                       key_id=vpn_key_data.get('id'))
        else:
            # –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
            await loading_msg.edit_text(
                get_no_key_error(),
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.error("Failed to provide VPN key via command", telegram_id=telegram_id)
            
    except Exception as e:
        logger.error("Error in create_key command", 
                    telegram_id=telegram_id, 
                    error=str(e))
        
        await loading_msg.edit_text(
            get_no_key_error(),
            reply_markup=get_main_menu_keyboard()
        )

@commands_router.message(Command("refresh_key"))
async def cmd_refresh_key(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /refresh_key - –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª—é—á —Å —É—á–µ—Ç–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã"""
    telegram_id = message.from_user.id
    username = message.from_user.username or ""
    first_name = message.from_user.first_name or ""
    
    logger.info("Command /refresh_key called", user_id=telegram_id, username=username, first_name=first_name)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer(
        "üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∞—à VPN –∫–ª—é—á...",
        reply_markup=None
    )
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω—ã
        from handlers.vpn_simplified import create_vpn_key_for_country
        
        new_key_result = await create_vpn_key_for_country(telegram_id)
        
        if new_key_result and new_key_result.get('success'):
            # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á
            vless_url = new_key_result['vpn_key']['vless_url']
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ—Ä–≤–µ—Ä–µ
            try:
                from handlers.vpn_simplified import enhance_vpn_key_message
                message_text, keyboard = await enhance_vpn_key_message(
                    vless_url, 
                    telegram_id, 
                    is_update=True
                )
            except Exception as e:
                # Fallback –∫ –±–∞–∑–æ–≤–æ–º—É —à–∞–±–ª–æ–Ω—É —Å —Å–µ—Ä–≤–µ—Ä–æ–º
                from templates.messages import get_vpn_key_message_with_server
                from handlers.vpn_simplified import get_default_country
                default_country = await get_default_country()  # –ü–µ—Ä–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞
                message_text = get_vpn_key_message_with_server(
                    vless_url, 
                    default_country, 
                    is_update=True
                )
                keyboard = get_main_menu_keyboard()
            
            await loading_msg.edit_text(
                message_text,
                parse_mode="Markdown",
                reply_markup=keyboard
            )
            
            logger.info("VPN key refreshed successfully via command", user_id=telegram_id)
        else:
            # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
            error_msg = new_key_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if new_key_result else 'API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
            
            await loading_msg.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å VPN –∫–ª—é—á\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {error_msg}\n\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                parse_mode="Markdown",
                reply_markup=get_main_menu_keyboard()
            )
            
            logger.error("Failed to refresh VPN key via command", 
                        user_id=telegram_id, 
                        error=error_msg)
            
    except Exception as e:
        logger.error("Error in refresh_key command",
                    user_id=telegram_id, 
                    error=str(e))
        
        await loading_msg.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            parse_mode="Markdown", 
            reply_markup=get_main_menu_keyboard()
        )

@commands_router.message(Command("download_apps"))
async def cmd_download_apps(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /download_apps - —Å–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    logger.info("Command /download_apps called", user_id=message.from_user.id)
    
    await message.answer(
        get_download_apps_message(),
        parse_mode="Markdown", 
        reply_markup=get_main_menu_keyboard(),
        disable_web_page_preview=True
    )

@commands_router.message(Command("support"))
async def cmd_support(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /support - —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    logger.info("Command /support called", user_id=message.from_user.id)
    
    await message.answer(
        get_support_message(),
        parse_mode="Markdown",
        reply_markup=get_main_menu_keyboard()
    )

@commands_router.message(Command("subscription"))
async def cmd_subscription(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ /subscription - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    logger.info("Command /subscription called", user_id=message.from_user.id)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏
        from keyboards.main_menu import get_subscription_keyboard_with_autopay
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–ª–∞–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription_keyboard = await get_subscription_keyboard_with_autopay()
        
        subscription_message = """üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π**

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN —Å–µ—Ä–≤–∏—Å—É:

üîπ **1 –º–µ—Å—è—Ü** - –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
üîπ **3 –º–µ—Å—è—Ü–∞** - –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –≤—ã–±–æ—Ä —Å –≤—ã–≥–æ–¥–æ–π
üîπ **6 –º–µ—Å—è—Ü–µ–≤** - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è

‚úÖ –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫
‚úÖ –í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è  
‚úÖ –°–µ—Ä–≤–µ—Ä—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∞—Ö
‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7"""

        await message.answer(
            subscription_message,
            parse_mode="Markdown",
            reply_markup=subscription_keyboard
        )
        
    except Exception as e:
        logger.error("Error in subscription command", error=str(e))
        
        # Fallback —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer(
            "üìã **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π**\n\n"
            "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–ø–∏—Å–∫–∞' –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            parse_mode="Markdown",
            reply_markup=get_main_menu_keyboard()
        ) 