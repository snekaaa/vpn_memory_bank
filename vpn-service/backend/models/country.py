"""
–ú–æ–¥–µ–ª—å Country –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∞–º–∏ VPN —Å–µ—Ä–≤–µ—Ä–æ–≤
"""

from sqlalchemy import Column, Integer, String, Boolean, DateTime
from sqlalchemy.sql import func
from sqlalchemy.orm import relationship
from config.database import Base


class Country(Base):
    """–ú–æ–¥–µ–ª—å —Å—Ç—Ä–∞–Ω—ã –¥–ª—è VPN —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    __tablename__ = "countries"
    
    id = Column(Integer, primary_key=True, index=True)
    code = Column(String(2), unique=True, nullable=False, index=True)  # ISO 3166-1 alpha-2 (RU, NL, DE)
    name = Column(String(100), nullable=False)  # "–†–æ—Å—Å–∏—è", "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "–ì–µ—Ä–º–∞–Ω–∏—è"
    name_en = Column(String(100))  # "Russia", "Netherlands", "Germany"
    flag_emoji = Column(String(10), nullable=False)  # "üá∑üá∫", "üá≥üá±", "üá©üá™"
    is_active = Column(Boolean, default=True, nullable=False)  # Can users select this country?
    priority = Column(Integer, default=100, nullable=False)  # Display order (higher = first)
    created_at = Column(DateTime(timezone=True), server_default=func.now())
    
    # Relationships
    user_assignments = relationship("UserServerAssignment", back_populates="country")
    
    def __repr__(self):
        return f"<Country(id={self.id}, code={self.code}, name={self.name})>"
    
    @property
    def display_name(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Å —Ñ–ª–∞–≥–æ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return f"{self.flag_emoji} {self.name}"
    
    def to_dict(self) -> dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–æ–¥–µ–ª—å –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è API"""
        return {
            "id": self.id,
            "code": self.code,
            "name": self.name,
            "name_en": self.name_en,
            "flag_emoji": self.flag_emoji,
            "is_active": self.is_active,
            "priority": self.priority,
            "display_name": self.display_name
        } 