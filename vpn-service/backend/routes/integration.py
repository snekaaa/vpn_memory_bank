from fastapi import APIRouter, HTTPException, Body, Depends
from pydantic import BaseModel
from typing import Optional, Dict, Any, List
import time
from services.integration_service import integration_service
from config.database import get_db
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from services.simple_key_update_service import SimpleKeyUpdateService
import structlog
from models.user import User
# from models.subscription import Subscription, SubscriptionStatus  # –£–±—Ä–∞–Ω–æ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
from services.node_automation import NodeDeploymentConfig
import subprocess
import base64
from sqlalchemy.orm import joinedload
from models.vpn_key import VPNKey

logger = structlog.get_logger(__name__)

router = APIRouter(prefix="/integration", tags=["integration"])

class UserCreateRequest(BaseModel):
    telegram_id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None
    language_code: str = "ru"

class SubscriptionCreateRequest(BaseModel):
    user_id: int
    subscription_type: str = "monthly"
    payment_method: str = "yookassa"

class VPNKeyCreateRequest(BaseModel):
    user_id: int
    subscription_id: int
    key_name: Optional[str] = None

class UpdateVPNKeyRequest(BaseModel):
    telegram_id: int
    force_new: bool = False

class UpdateUserDataRequest(BaseModel):
    telegram_id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None

@router.post("/create-user")
async def create_user_endpoint(request: UserCreateRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å"""
    
    user_data = {
        "username": request.username,
        "first_name": request.first_name,
        "last_name": request.last_name,
        "language_code": request.language_code
    }
    
    result = await integration_service.create_user_with_subscription(
        telegram_id=request.telegram_id,
        user_data=user_data
    )
    
    if not result["success"]:
        raise HTTPException(status_code=400, detail=result["message"])
    
    return result

@router.post("/create-subscription")
async def create_subscription_endpoint(request: SubscriptionCreateRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–ª–∞—Ç–µ–∂–æ–º"""
    
    result = await integration_service.create_subscription_with_payment(
        user_id=request.user_id,
        subscription_type=request.subscription_type,
        payment_method=request.payment_method
    )
    
    if not result["success"]:
        raise HTTPException(status_code=400, detail=result["message"])
    
    return result

@router.post("/create-vpn-key")
async def create_vpn_key_endpoint(request: VPNKeyCreateRequest):
    """–°–æ–∑–¥–∞–Ω–∏–µ VPN –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ X3UI"""
    
    result = await integration_service.create_vpn_key_full_cycle(
        user_id=request.user_id,
        subscription_id=request.subscription_id,
        key_name=request.key_name
    )
    
    if not result["success"]:
        raise HTTPException(status_code=400, detail=result["message"])
    
    return result

@router.get("/user-dashboard/{telegram_id}")
async def get_user_dashboard_endpoint(telegram_id: int):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    
    result = await integration_service.get_user_dashboard(telegram_id)
    
    if not result["success"]:
        raise HTTPException(status_code=404, detail=result["message"])
    
    return result

@router.post("/full-cycle")
async def full_cycle_endpoint(
    telegram_id: int = Body(...),
    user_data: Dict[str, Any] = Body(...),
    subscription_type: str = Body("monthly")
):
    """
    –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è -> –ø–æ–¥–ø–∏—Å–∫–∞ -> VPN –∫–ª—é—á
    End-to-End –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    """
    
    results = {
        "telegram_id": telegram_id,
        "steps": [],
        "success": True,
        "final_data": {}
    }
    
    try:
        # –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å 7 –¥–Ω—è–º–∏ —Ç—Ä–∏–∞–ª–∞)
        user_result = await integration_service.create_user_with_subscription(
            telegram_id=telegram_id,
            user_data=user_data
        )
        
        results["steps"].append({
            "step": "user_creation",
            "success": user_result["success"],
            "message": user_result["message"]
        })
        
        if not user_result["success"]:
            results["success"] = False
            return results
        
        user_id = user_result["user_id"]
        
        # –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ VPN –∫–ª—é—á–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–æ–∫)
        vpn_key_result = await integration_service.create_vpn_key_full_cycle(
            user_id=user_id
        )
        
        results["steps"].append({
            "step": "vpn_key_creation",
            "success": vpn_key_result["success"],
            "message": vpn_key_result["message"]
        })
        
        if not vpn_key_result["success"]:
            results["success"] = False
            return results
        
        # –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ dashboard
        dashboard_result = await integration_service.get_user_dashboard(telegram_id)
        
        results["steps"].append({
            "step": "dashboard_generation",
            "success": dashboard_result["success"],
            "message": "Dashboard —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
        })
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
        results["final_data"] = {
            "user": user_result["user"],
            "vpn_key": vpn_key_result["vpn_key"],
            "dashboard": dashboard_result if dashboard_result["success"] else None
        }
        
        results["message"] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å 7 –¥–Ω—è–º–∏ —Ç—Ä–∏–∞–ª–∞ –∏ VPN –∫–ª—é—á–æ–º!"
        
        return results
        
    except Exception as e:
        results["success"] = False
        results["error"] = str(e)
        results["message"] = "–û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"
        
        return results

@router.post("/update-vpn-key")
async def update_vpn_key(
    request: UpdateVPNKeyRequest,
    session: AsyncSession = Depends(get_db)
):
    """–û–±–Ω–æ–≤–∏—Ç—å VPN –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π API"""
    try:
        logger.info("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ VPN –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π API", 
                   telegram_id=request.telegram_id,
                   force_new=getattr(request, 'force_new', False))
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_result = await session.execute(
            select(User).where(User.telegram_id == request.telegram_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            return {
                "success": False,
                "error": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id {request.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
        if not user.has_active_subscription:
            return {
                "success": False,
                "error": "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å—Ç–µ–∫"
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ integration service —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É –Ω–æ–¥–∞–º–∏
        result = await integration_service.update_vpn_key_with_node_migration(
            user_id=user.id
        )
        
        if result["success"]:
            logger.info("‚úÖ VPN –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ migration service", 
                       telegram_id=request.telegram_id,
                       key_id=result.get("vpn_key_id"))
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç integration_service –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±–æ—Ç–æ–º
            if "vpn_key" in result:
                vpn_key = result["vpn_key"]
                return {
                    "success": True,
                    "message": "VPN –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
                    "vless_url": vpn_key.get("vless_url"),
                    "id": vpn_key.get("id"),
                    "created_at": vpn_key.get("created_at"),
                    "status": vpn_key.get("status")
                }
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—è vpn_key –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ vpn_key –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
                           telegram_id=request.telegram_id)
                return {
                    "success": False,
                    "error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª—é—á–µ"
                }
        else:
            # –ï—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ VPN –∫–ª—é—á–∞", 
                       telegram_id=request.telegram_id,
                       error=result.get("error"))
            return result
        
    except Exception as e:
        logger.error("üí• –û—à–∏–±–∫–∞ –≤ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VPN –∫–ª—é—á–∞", 
                    telegram_id=request.telegram_id, 
                    error=str(e))
        return {
            "success": False,
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        }

@router.get("/test-endpoint")
async def test_endpoint():
    """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    return {"message": "Test endpoint works!", "timestamp": time.time()}

@router.delete("/vpn-key/x3ui/{client_id}")
async def delete_x3ui_key_direct(
    client_id: str,
    inbound_id: int = Body(1),
    node_id: int = Body(None),
    session: AsyncSession = Depends(get_db)
):
    """
    –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ô ENDPOINT: –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏
    
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è "–ø—Ä–∏–∑—Ä–∞—á–Ω—ã—Ö" –∫–ª—é—á–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ X3UI –ø–∞–Ω–µ–ª–∏,
    –Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –Ω–∞—à–µ–π –ë–î –∏–∑-–∑–∞ —Ä–∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    """
    try:
        logger.info("üóëÔ∏è Direct X3UI key deletion", 
                   client_id=client_id, 
                   inbound_id=inbound_id,
                   node_id=node_id)
        
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–¥—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        node = None
        if node_id:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞–Ω–Ω—É—é –Ω–æ–¥—É
            from models.vpn_node import VPNNode
            node_result = await session.execute(
                select(VPNNode).where(VPNNode.id == node_id)
            )
            node = node_result.scalar_one_or_none()
        else:
            # –ò—â–µ–º –Ω–æ–¥—É –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –Ω–æ–¥–∞–º
            from models.vpn_node import VPNNode
            nodes_result = await session.execute(
                select(VPNNode).where(VPNNode.status == "active")
                .order_by(VPNNode.priority.desc())
            )
            nodes = nodes_result.scalars().all()
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–ª—é—á –Ω–∞ –∫–∞–∂–¥–æ–π –Ω–æ–¥–µ
            for test_node in nodes:
                try:
                    from services.x3ui_client import X3UIClient
                    test_client = X3UIClient(
                        base_url=test_node.x3ui_url,
                        username=test_node.x3ui_username,
                        password=test_node.x3ui_password
                    )
                    
                    if await test_client._login():
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç client_id –Ω–∞ —ç—Ç–æ–π –Ω–æ–¥–µ
                        resp = await test_client._make_request("GET", f"/panel/api/inbounds/get/{inbound_id}")
                        if resp and resp.get("success"):
                            import json
                            obj = resp.get("obj", {})
                            settings = json.loads(obj.get("settings", "{}"))
                            clients = settings.get("clients", [])
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –Ω–∞—à client_id
                            client_found = any(c.get("id") == client_id for c in clients)
                            if client_found:
                                node = test_node
                                logger.info("‚úÖ Found client on node", 
                                           client_id=client_id, 
                                           node_id=test_node.id,
                                           node_name=test_node.name)
                                break
                        
                        await test_client.close()
                except Exception as e:
                    logger.warning("Error checking node", node_id=test_node.id, error=str(e))
                    continue
        
        if not node:
            return {
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–¥—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º {client_id}"
            }
        
        # 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –Ω–æ–¥–µ –∏ —É–¥–∞–ª—è–µ–º –∫–ª—é—á
        try:
            from services.x3ui_client import X3UIClient
            
            x3ui_client = X3UIClient(
                base_url=node.x3ui_url,
                username=node.x3ui_username,
                password=node.x3ui_password
            )
            
            if await x3ui_client._login():
                logger.info("‚úÖ Connected to X3UI panel for direct deletion", 
                           node_id=node.id,
                           client_id=client_id)
                
                # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                delete_result = await x3ui_client.delete_client(inbound_id, client_id)
                
                if delete_result:
                    logger.info("‚úÖ Client successfully deleted from X3UI panel (direct)", 
                               client_id=client_id,
                               node_id=node.id,
                               inbound_id=inbound_id)
                    
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ —É–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
                    vpn_key_result = await session.execute(
                        select(VPNKey).where(VPNKey.xui_client_id == client_id)
                    )
                    vpn_key = vpn_key_result.scalar_one_or_none()
                    
                    if vpn_key:
                        await session.delete(vpn_key)
                        await session.commit()
                        logger.info("‚úÖ Also removed from database", key_id=vpn_key.id)
                        message = "–ö–ª—é—á —É–¥–∞–ª–µ–Ω –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
                    else:
                        logger.info("‚ÑπÔ∏è Key was only in X3UI panel (ghost key)")
                        message = "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –∫–ª—é—á —É–¥–∞–ª–µ–Ω –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏"
                    
                    await x3ui_client.close()
                    return {
                        "success": True,
                        "message": message,
                        "client_id": client_id,
                        "node": {"id": node.id, "name": node.name}
                    }
                else:
                    await x3ui_client.close()
                    return {
                        "success": False,
                        "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {client_id} –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏"
                    }
            else:
                return {
                    "success": False,
                    "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ X3UI –ø–∞–Ω–µ–ª–∏ –Ω–æ–¥—ã {node.name}"
                }
                
        except Exception as e:
            logger.error("üí• Error during direct X3UI deletion",
                        client_id=client_id,
                        error=str(e))
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ X3UI: {str(e)}"
            }
            
    except Exception as e:
        logger.error("üí• Critical error in direct X3UI deletion endpoint", 
                    client_id=client_id, 
                    error=str(e))
        return {
            "success": False,
            "error": f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        }

@router.post("/update-user-data")
async def update_user_data_endpoint(request: UpdateUserDataRequest):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username, first_name, last_name)"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        dashboard_result = await integration_service.get_user_dashboard(request.telegram_id)
        
        if not dashboard_result["success"]:
            raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_update_result = await integration_service.update_user_data(
            telegram_id=request.telegram_id,
            username=request.username,
            first_name=request.first_name,
            last_name=request.last_name
        )
        
        if not user_update_result["success"]:
            raise HTTPException(status_code=400, detail=user_update_result["message"])
        
        return user_update_result
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

@router.post("/test/reality-keys")
async def test_reality_keys():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Reality –∫–ª—é—á–µ–π"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π config
        config = NodeDeploymentConfig(
            ssh_host="test",
            ssh_password="test",
            name="Test Node"
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback –º–µ—Ç–æ–¥
        public_key, private_key = config._generate_fallback_keys()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π RealityKeyGenerator
        xray_test = None
        try:
            from services.reality_key_generator import RealityKeyGenerator
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            generator_keys = RealityKeyGenerator.generate_keys()
            
            xray_test = {
                "available": True,
                "method": generator_keys.generation_method,
                "public_key": generator_keys.public_key[:20] + "...",
                "private_key": generator_keys.private_key[:20] + "...",
                "validation": RealityKeyGenerator.validate_keys(
                    generator_keys.private_key, 
                    generator_keys.public_key
                )
            }
        except Exception as e:
            xray_test = {"available": False, "error": str(e)}
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–π
        key_validation = {
            "public_key_valid": public_key is not None and len(public_key) > 0,
            "private_key_valid": private_key is not None and len(private_key) > 0,
            "public_key_length": len(public_key) if public_key else 0,
            "private_key_length": len(private_key) if private_key else 0
        }
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å base64 –∫–ª—é—á–∏
        try:
            if public_key:
                decoded_public = base64.b64decode(public_key)
                key_validation["public_key_decoded_length"] = len(decoded_public)
                key_validation["public_key_is_32_bytes"] = len(decoded_public) == 32
                
            if private_key:
                decoded_private = base64.b64decode(private_key)
                key_validation["private_key_decoded_length"] = len(decoded_private)
                key_validation["private_key_is_32_bytes"] = len(decoded_private) == 32
        except Exception as e:
            key_validation["decode_error"] = str(e)
        
        return {
            "success": True,
            "keys": {
                "public_key": public_key,
                "private_key": private_key,
            },
            "xray_test": xray_test,
            "validation": key_validation,
            "message": "Reality keys test completed"
        }
    except Exception as e:
        logger.error("Error testing reality keys", error=str(e))
        return {
            "success": False,
            "error": str(e)
        }

@router.post("/test/update-reality-keys/{node_id}")
async def update_reality_keys(node_id: int, session: AsyncSession = Depends(get_db)):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Reality –∫–ª—é—á–µ–π –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –Ω–æ–¥—ã"""
    try:
        from models.vpn_node import VPNNode
        from sqlalchemy import select, update
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–¥—É
        result = await session.execute(select(VPNNode).where(VPNNode.id == node_id))
        node = result.scalar_one_or_none()
        
        if not node:
            return {"success": False, "error": f"–ù–æ–¥–∞ —Å ID {node_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ Reality –∫–ª—é—á–∏
        config = NodeDeploymentConfig(ssh_host="test", ssh_password="test", name="Test")
        new_public_key, new_private_key = config._generate_fallback_keys()
        
        if not new_public_key or not new_private_key:
            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å Reality –∫–ª—é—á–∏"}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–¥—É –≤ –ë–î
        await session.execute(
            update(VPNNode)
            .where(VPNNode.id == node_id)
            .values(public_key=new_public_key)
        )
        await session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
        decoded_public = base64.b64decode(new_public_key)
        decoded_private = base64.b64decode(new_private_key)
        
        return {
            "success": True,
            "node_id": node_id,
            "old_public_key": node.public_key,
            "new_public_key": new_public_key,
            "new_private_key": new_private_key,
            "validation": {
                "public_key_length": len(decoded_public),
                "private_key_length": len(decoded_private),
                "keys_valid": len(decoded_public) == 32 and len(decoded_private) == 32
            },
            "message": "Reality –∫–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
        }
        
    except Exception as e:
        logger.error("Error updating reality keys", error=str(e))
        return {"success": False, "error": str(e)}

@router.delete("/vpn-key/{key_id}")
async def delete_vpn_key(
    key_id: int,
    session: AsyncSession = Depends(get_db)
):
    """
    –£–¥–∞–ª–µ–Ω–∏–µ VPN –∫–ª—é—á–∞ –ø–æ ID —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é:
    1. –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏
    2. –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    """
    try:
        logger.info("üóëÔ∏è Deleting VPN key", key_id=key_id)
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        from models.vpn_key import VPNKey
        
        key_result = await session.execute(
            select(VPNKey).where(VPNKey.id == key_id)
        )
        vpn_key = key_result.scalar_one_or_none()
        
        if not vpn_key:
            return {
                "success": False,
                "error": f"VPN –∫–ª—é—á —Å ID {key_id} –Ω–µ –Ω–∞–π–¥–µ–Ω"
            }
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–æ–¥—ã
        from models.vpn_node import VPNNode
        
        node_result = await session.execute(
            select(VPNNode).where(VPNNode.id == vpn_key.node_id)
        )
        node = node_result.scalar_one_or_none()
        
        if not node:
            return {
                "success": False,
                "error": f"–ù–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –∫–ª—é—á–∞ {key_id}"
            }
        
        # 3. –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ X3UI –ø–∞–Ω–µ–ª–∏ –∏ —É–¥–∞–ª—è–µ–º –∫–ª—é—á
        deletion_from_x3ui_successful = False
        
        if vpn_key.xui_client_id and vpn_key.xui_inbound_id:
            try:
                from services.x3ui_client import X3UIClient
                
                x3ui_client = X3UIClient(
                    base_url=node.x3ui_url,
                    username=node.x3ui_username,
                    password=node.x3ui_password
                )
                
                if await x3ui_client._login():
                    logger.info("‚úÖ Connected to X3UI panel for deletion", 
                               key_id=key_id,
                               node_id=node.id,
                               client_id=vpn_key.xui_client_id)
                    
                    # –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏
                    delete_result = await x3ui_client.delete_client(
                        vpn_key.xui_inbound_id, 
                        vpn_key.xui_client_id
                    )
                    
                    if delete_result:
                        deletion_from_x3ui_successful = True
                        logger.info("‚úÖ VPN key successfully deleted from X3UI panel", 
                                   key_id=key_id,
                                   client_id=vpn_key.xui_client_id,
                                   node_id=node.id)
                    else:
                        logger.error("‚ùå Failed to delete VPN key from X3UI panel", 
                                    key_id=key_id,
                                    client_id=vpn_key.xui_client_id,
                                    node_id=node.id)
                    
                    await x3ui_client.close()
                else:
                    logger.error("‚ùå Failed to login to X3UI panel", 
                                node_id=node.id,
                                key_id=key_id)
            except Exception as e:
                logger.error("üí• Exception while deleting from X3UI panel", 
                            key_id=key_id,
                            error=str(e))
        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö X3UI, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
            deletion_from_x3ui_successful = True
            logger.info("‚ÑπÔ∏è No X3UI data for key, proceeding with database deletion", 
                       key_id=key_id)
        
        # 4. –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏
        if deletion_from_x3ui_successful:
            await session.delete(vpn_key)
            await session.commit()
            
            logger.info("‚úÖ VPN key successfully deleted from database", 
                       key_id=key_id)
            
            return {
                "success": True,
                "message": f"VPN –∫–ª—é—á {key_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
            }
        else:
            return {
                "success": False,
                "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á {key_id} –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏. –ö–ª—é—á –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            }
            
    except Exception as e:
        logger.error("üí• Error deleting VPN key", 
                    key_id=key_id,
                    error=str(e))
        return {
            "success": False,
            "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: {str(e)}"
        }

# –í—Ä–µ–º–µ–Ω–Ω—ã–π debug endpoint —É–¥–∞–ª–µ–Ω 