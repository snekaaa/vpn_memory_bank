"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
import asyncio
import logging
from sqlalchemy import text, inspect
from config.database import engine, Base
from config.settings import get_settings
from sqlalchemy.ext.asyncio import create_async_engine
import socket, re

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏ —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
from models.user import User
from models.vpn_key import VPNKey
from models.subscription import Subscription
from models.vpn_node import VPNNode
from models.payment import Payment
from models.user_node_assignment import UserNodeAssignment
from models.auto_payment import AutoPayment
from models.payment_retry_attempt import PaymentRetryAttempt
from models.user_notification_preferences import UserNotificationPreferences

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ host 'db' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
settings = get_settings()
db_url = settings.database_url
fallback_engine = None
try:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ö–æ—Å—Ç–∞ –∏–∑ URL
    host_match = re.search(r"@([^:/]+)", db_url)
    if host_match:
        host = host_match.group(1)
        socket.gethostbyname(host)
except Exception:
    # –ï—Å–ª–∏ —Ö–æ—Å—Ç –Ω–µ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ localhost
    fallback_url = re.sub(r"@[^:/]+", "@localhost", db_url)
    fallback_engine = create_async_engine(
        fallback_url,
        echo=settings.debug,
        pool_size=10,
        max_overflow=20,
        pool_pre_ping=True,
        pool_recycle=3600
    )

async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç"""
    try:
        async with engine.begin() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü—ã
            inspector = inspect(conn.sync_connection)
            existing_tables = inspector.get_table_names()
            
            if existing_tables:
                logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(existing_tables)}")
                logger.info(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {', '.join(existing_tables)}")
                return True
            
            logger.info("üìÇ –°–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
            # –°–æ–∑–¥–∞—ë–º —Ç–æ–ª—å–∫–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            await conn.run_sync(Base.metadata.create_all)
            
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

async def force_reset_database():
    """–û–°–¢–û–†–û–ñ–ù–û! –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - —É–¥–∞–ª—è–µ—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ"""
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ö–µ–º—É public –∏ —Å–æ–∑–¥–∞—ë–º –∑–∞–Ω–æ–≤–æ
        async with engine.begin() as conn:
            logger.warning("üö® –í–ù–ò–ú–ê–ù–ò–ï! –£–¥–∞–ª—è—é —Å—Ö–µ–º—É public –∏ –≤—Å–µ –µ—ë –æ–±—ä–µ–∫—Ç—ã...")
            await conn.execute(text("DROP SCHEMA public CASCADE"))
            await conn.execute(text("CREATE SCHEMA public"))
            logger.info("üìÇ –°—Ö–µ–º–∞ public –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, —Å–æ–∑–¥–∞—é —Ç–∞–±–ª–∏—Ü—ã...")
            # –°–æ–∑–¥–∞—ë–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –º–æ–¥–µ–ª–µ–π
            await conn.run_sync(Base.metadata.create_all)
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ë–î: {e}")
        return False

async def reset_data_only():
    """–°–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã"""
    logger.info("üßπ –û—á–∏—â–∞—é –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö...")
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –¥–≤–∏–∂–æ–∫, –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –∏–Ω–∞—á–µ –æ—Å–Ω–æ–≤–Ω–æ–π
        use_engine = fallback_engine or engine
        async with use_engine.begin() as conn:
            # –û—Ç–∫–ª—é—á–∞–µ–º foreign key constraints –¥–ª—è PostgreSQL
            await conn.execute(text("SET session_replication_role = replica"))
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç –∑–∞–≤–∏—Å–∏–º—ã—Ö –∫ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–º)
            tables_to_clear = [
                "vpn_keys",
                "user_node_assignments", 
                "subscriptions",
                "payments",
                "users",
                "vpn_nodes"
            ]
            
            for table in tables_to_clear:
                try:
                    await conn.execute(text(f"TRUNCATE TABLE {table} RESTART IDENTITY CASCADE"))
                    logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table}")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å {table}: {e}")
            
            # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ foreign key constraints
            await conn.execute(text("SET session_replication_role = DEFAULT"))
            
        logger.info("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã, —Å—Ö–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        if sys.argv[1] == "reset":
            # –†–µ–∂–∏–º —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
            asyncio.run(reset_data_only())
        elif sys.argv[1] == "force-reset":
            # –†–µ–∂–∏–º –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ (–û–ü–ê–°–ù–û!)
            confirmation = input("üö® –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –¥–∞–Ω–Ω—ã–µ? –ù–∞–ø–∏—à–∏—Ç–µ 'YES' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ")
            if confirmation == "YES":
                asyncio.run(force_reset_database())
            else:
                print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    else:
        # –†–µ–∂–∏–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        asyncio.run(init_database()) 