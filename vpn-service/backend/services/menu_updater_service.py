"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
"""

import aiohttp
import structlog
from typing import Optional, Dict, Any
from datetime import datetime, timezone
from config.settings import get_settings

logger = structlog.get_logger(__name__)

class MenuUpdaterService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ Telegram –±–æ—Ç–µ"""
    
    def __init__(self):
        self.settings = get_settings()
        self.bot_token = None
        
    async def _get_bot_token(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ë–î"""
        if self.bot_token is None:
            try:
                from config.database import get_db_session
                from services.app_settings_service import AppSettingsService
                async with get_db_session() as db:
                    settings = await AppSettingsService.get_settings(db)
                    self.bot_token = settings.telegram_bot_token
            except Exception as e:
                logger.error(f"Error loading bot token from DB: {e}")
                # Fallback –∫ –∑–Ω–∞—á–µ–Ω–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                self.bot_token = "8019787780:AAGy5cBWpQ09yvtDE3sp0AMY7kZyRYbSJqU"
        return self.bot_token
    
    async def _get_user_subscription_data(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
        try:
            async with aiohttp.ClientSession() as session:
                url = f"http://backend:8000/api/v1/integration/user-dashboard/{telegram_id}"
                async with session.get(url, timeout=aiohttp.ClientTimeout(total=5)) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get('success'):
                            return data.get('user', {})
                    logger.warning("Failed to get user subscription data", 
                                 telegram_id=telegram_id, 
                                 status=response.status)
                    return None
        except Exception as e:
            logger.error("Error getting user subscription data", 
                        telegram_id=telegram_id, 
                        error=str(e))
            return None
    
    def _calculate_days_remaining(self, user_data: Dict[str, Any]) -> int:
        """–í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            subscription_status = user_data.get('subscription_status', 'none')
            valid_until = user_data.get('valid_until')
            
            if subscription_status != 'active' or not valid_until:
                return 0
            
            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
            try:
                import dateutil.parser
                end_date = dateutil.parser.parse(valid_until)
            except ImportError:
                # –ï—Å–ª–∏ dateutil –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–∞—Ä—Å–∏–º –≤—Ä—É—á–Ω—É—é
                if valid_until.endswith('Z'):
                    end_date = datetime.fromisoformat(valid_until[:-1] + '+00:00')
                elif '+' in valid_until or valid_until.endswith('00:00'):
                    end_date = datetime.fromisoformat(valid_until)
                else:
                    end_date = datetime.fromisoformat(valid_until + '+00:00')
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –¥–∞—Ç–∞ –≤ UTC
            if end_date.tzinfo is None:
                end_date = end_date.replace(tzinfo=timezone.utc)
            
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–æ—Å—Ç—å —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            now = datetime.now(timezone.utc)
            delta = end_date - now
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (–º–∏–Ω–∏–º—É–º 0)
            return max(0, delta.days)
            
        except Exception as e:
            logger.error("Error calculating days remaining", 
                        user_data=user_data,
                        error=str(e))
            return 0
    
    def _create_main_menu_keyboard(self, days_remaining: int, has_active_subscription: bool) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–Ω–µ–π
        if days_remaining > 0:
            subscription_text = f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞ {days_remaining} –¥–Ω–µ–π"
        else:
            subscription_text = "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞"
        
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–Ω–æ–ø–æ–∫
        first_row = []
        
        if has_active_subscription:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É VPN –∫–ª—é—á–∞
            first_row.append({"text": "üîë –ú–æ–π VPN –∫–ª—é—á"})
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
            first_row.append({"text": "üîê –ü–æ–ª—É—á–∏—Ç—å VPN –¥–æ—Å—Ç—É–ø"})
        
        first_row.append({"text": subscription_text})
        
        keyboard = {
            "keyboard": [
                first_row,
                [
                    {"text": "üì± –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è"},
                    {"text": "üßëüèº‚Äçüíª –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"}
                ]
            ],
            "resize_keyboard": True,
            "one_time_keyboard": False
        }
        
        return keyboard
    
    async def update_user_menu_after_payment(self, telegram_id: int) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
        try:
            logger.info("üîÑ Updating user menu after payment", telegram_id=telegram_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_data = await self._get_user_subscription_data(telegram_id)
            if not user_data:
                logger.warning("Failed to get user data for menu update", telegram_id=telegram_id)
                return False
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
            days_remaining = self._calculate_days_remaining(user_data)
            has_active_subscription = days_remaining > 0
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self._create_main_menu_keyboard(days_remaining, has_active_subscription)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if has_active_subscription:
                message = (
                    "üéâ *–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!*\n\n"
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –µ—â–µ {days_remaining} –¥–Ω–µ–π\n"
                    "üîë –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å VPN –∫–ª—é—á\n"
                    "‚ö° –î–æ—Å—Ç—É–ø –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
                )
            else:
                message = (
                    "‚ö†Ô∏è *–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞*\n\n"
                    "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞\n"
                    "üí≥ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞\n"
                    "üîë VPN –∫–ª—é—á–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –º–µ–Ω—é
            success = await self._send_telegram_message_with_keyboard(telegram_id, message, keyboard)
            
            if success:
                logger.info("‚úÖ User menu updated successfully", 
                           telegram_id=telegram_id,
                           days_remaining=days_remaining,
                           has_active_subscription=has_active_subscription)
            else:
                logger.error("‚ùå Failed to update user menu", telegram_id=telegram_id)
            
            return success
            
        except Exception as e:
            logger.error("üí• Error updating user menu after payment", 
                        telegram_id=telegram_id,
                        error=str(e))
            return False
    
    async def _send_telegram_message_with_keyboard(self, telegram_id: int, message: str, keyboard: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
        bot_token = await self._get_bot_token()
        if not bot_token:
            logger.warning("Bot token not configured, skipping menu update")
            return False
        
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        payload = {
            "chat_id": telegram_id,
            "text": message,
            "parse_mode": "Markdown",
            "reply_markup": keyboard,
            "disable_web_page_preview": True
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, timeout=30) as response:
                    if response.status == 200:
                        logger.debug("Telegram message with keyboard sent successfully", telegram_id=telegram_id)
                        return True
                    else:
                        response_text = await response.text()
                        logger.error("Failed to send Telegram message with keyboard", 
                                   telegram_id=telegram_id,
                                   status=response.status,
                                   response=response_text)
                        return False
        except Exception as e:
            logger.error("Error sending Telegram message with keyboard", 
                        telegram_id=telegram_id,
                        error=str(e))
            return False

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
menu_updater_service = MenuUpdaterService() 