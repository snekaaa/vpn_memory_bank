"""
Payment Scheduler Service
–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
"""

import structlog
from typing import Optional, List, Dict, Any
from datetime import datetime, timedelta
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_, or_
from sqlalchemy.sql import func

from models.auto_payment import AutoPayment
from models.payment import Payment, PaymentStatus, PaymentMethod
from models.payment_retry_attempt import PaymentRetryAttempt
from models.subscription import Subscription
from models.user import User
from services.robokassa_service import RobokassaService
from services.subscription_service import SubscriptionService
from services.notification_service import notification_service

logger = structlog.get_logger(__name__)


class PaymentSchedulerService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    
    def __init__(self, db: AsyncSession):
        self.db = db
    
    async def process_due_autopayments(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å"""
        
        # –ù–∞—Ö–æ–¥–∏–º –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å
        due_autopayments = await self._get_due_autopayments()
        
        logger.info(f"üîÑ –ù–∞–π–¥–µ–Ω–æ {len(due_autopayments)} –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        
        for autopay in due_autopayments:
            try:
                await self._process_single_autopayment(autopay)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {autopay.id}: {e}")
    
    async def _get_due_autopayments(self) -> List[AutoPayment]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å"""
        
        current_time = datetime.utcnow()
        
        result = await self.db.execute(
            select(AutoPayment)
            .where(
                and_(
                    AutoPayment.status == "active",
                    AutoPayment.next_payment_date <= current_time
                )
            )
        )
        
        return result.scalars().all()
    
    async def _process_single_autopayment(self, autopay: AutoPayment):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
        
        logger.info(f"üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {autopay.id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {autopay.user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ Robokassa
        from services.payment_provider_service import get_payment_provider_service
        provider_service = get_payment_provider_service(self.db)
        robokassa_provider = await provider_service.get_default_provider("robokassa")
        
        if not robokassa_provider:
            logger.error("‚ùå Robokassa –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await self._handle_failed_autopayment(autopay, {"error": "Robokassa provider not found"})
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Robokassa Recurring API
        robokassa_service = RobokassaService(robokassa_provider.config)
        
        recurring_result = await robokassa_service.create_recurring_subscription_with_logging(
            auto_payment_id=autopay.id,
            previous_invoice_id=autopay.robokassa_recurring_id,
            amount=float(autopay.amount),
            description=f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ–ø—ã—Ç–∫–∞ {autopay.attempts_count + 1})"
        )
        
        if recurring_result['success']:
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            await self._handle_successful_autopayment(autopay)
        else:
            # –ü–ª–∞—Ç–µ–∂ –Ω–µ—É–¥–∞—á–µ–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            await self._handle_failed_autopayment(autopay, recurring_result)
    
    async def _handle_successful_autopayment(self, autopay: AutoPayment):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
        
        logger.info(f"‚úÖ –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ {autopay.id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞
        payment = Payment(
            user_id=autopay.user_id,
            subscription_id=autopay.subscription_id,
            amount=autopay.amount,
            currency=autopay.currency,
            status=PaymentStatus.SUCCEEDED,
            payment_method=PaymentMethod.robokassa,
            is_autopay_generated=True,
            autopay_attempt_number=autopay.attempts_count + 1,
            autopay_parent_payment_id=autopay.payment_id,
            robokassa_recurring_id=autopay.robokassa_recurring_id,
            description=f"–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏",
            paid_at=datetime.utcnow(),
            processed_at=datetime.utcnow()
        )
        
        self.db.add(payment)
        
        # –ü—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscription_service = SubscriptionService(self.db)
        await subscription_service.extend_user_subscription(
            autopay.user_id,
            autopay.period_days
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        autopay.next_payment_date = datetime.utcnow() + timedelta(days=autopay.period_days)
        autopay.attempts_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        autopay.last_payment_date = datetime.utcnow()
        
        await self.db.commit()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–∏
        await notification_service.send_notification(
            user_id=autopay.user_id,
            message=(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
                f"üí∞ –°–ø–∏—Å–∞–Ω–æ: {autopay.amount}‚ÇΩ\n"
                f"üìÖ –°–ª–µ–¥—É—é—â–µ–µ —Å–ø–∏—Å–∞–Ω–∏–µ: {autopay.next_payment_date.strftime('%d.%m.%Y')}"
            )
        )
        
        # –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞
        try:
            from services.menu_updater_service import menu_updater_service
            # –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_query = select(User).where(User.id == autopay.user_id)
            user_result = await self.db.execute(user_query)
            user = user_result.scalar_one_or_none()
            
            if user and user.telegram_id:
                await menu_updater_service.update_user_menu_after_payment(user.telegram_id)
                logger.info("‚úÖ User menu updated after successful autopayment", 
                           telegram_id=user.telegram_id,
                           autopay_id=autopay.id)
        except Exception as menu_error:
            logger.error("‚ùå Failed to update user menu after autopayment", 
                       autopay_id=autopay.id,
                       error=str(menu_error))
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
    
    async def _handle_failed_autopayment(self, autopay: AutoPayment, error_result: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞"""
        
        autopay.attempts_count += 1
        autopay.last_attempt_date = datetime.utcnow()
        
        logger.warning(
            f"‚ö†Ô∏è –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ {autopay.id} –Ω–µ —É–¥–∞–ª—Å—è (–ø–æ–ø—ã—Ç–∫–∞ {autopay.attempts_count})",
            error=error_result.get('error')
        )
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        error_type = error_result.get('error_type', 'unknown_error')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–ø—ã—Ç–∫–µ
        retry_attempt = PaymentRetryAttempt(
            auto_payment_id=autopay.id,
            attempt_number=autopay.attempts_count,
            error_type=error_type,
            error_message=error_result.get('error'),
            robokassa_response=error_result.get('raw_response'),
            scheduled_at=autopay.next_payment_date,
            attempted_at=datetime.utcnow(),
            result='failed'
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
        next_attempt = self._calculate_next_attempt(error_type, autopay.attempts_count)
        
        if next_attempt:
            retry_attempt.next_attempt_at = next_attempt
            autopay.next_payment_date = next_attempt
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ø—ã—Ç–∫–∏
            await self._send_failure_notification(autopay, error_type, autopay.attempts_count)
            
        else:
            # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
            autopay.status = 'failed'
            await self._handle_max_attempts_reached(autopay)
        
        self.db.add(retry_attempt)
        await self.db.commit()
    
    def _calculate_next_attempt(self, error_type: str, attempt_number: int) -> Optional[datetime]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–∏"""
        
        retry_intervals = {
            'insufficient_funds': [24, 72, 168],  # 24—á, 72—á, 7 –¥–Ω–µ–π
            'technical_error': [1, 6, 24],        # 1—á, 6—á, 24—á  
            'card_issue': [24],                   # 24—á (—Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞)
            'unknown_error': [6, 24, 72]          # 6—á, 24—á, 72—á
        }
        
        intervals = retry_intervals.get(error_type, retry_intervals['unknown_error'])
        
        if attempt_number <= len(intervals):
            hours = intervals[attempt_number - 1]
            return datetime.utcnow() + timedelta(hours=hours)
        
        return None
    
    async def _send_failure_notification(self, autopay: AutoPayment, error_type: str, attempt_number: int):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ
        user_result = await self.db.execute(
            select(User).where(User.id == autopay.user_id)
        )
        user = user_result.scalar_one_or_none()
        
        if not user:
            return
        
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–Ω–µ–π –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        days_remaining = 0
        if user.valid_until:
            delta = user.valid_until - datetime.utcnow()
            days_remaining = max(0, delta.days)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ø—ã—Ç–∫–∏
        if attempt_number == 1:
            message = (
                "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {self._get_error_reason_text(error_type)}\n"
                "üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞\n\n"
                "üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∫–∞—Ä—Ç—ã"
            )
        elif attempt_number == 2:
            message = (
                "‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {self._get_error_reason_text(error_type)}\n"
                "üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 72 —á–∞—Å–∞\n"
                f"‚è∞ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_remaining} –¥–Ω–µ–π\n\n"
                "‚ùó –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"
            )
        else:
            message = (
                "‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª—é—á–µ–Ω\n\n"
                "–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã\n"
                f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_remaining} –¥–Ω–µ–π\n\n"
                "üéØ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø"
            )
        
        await notification_service.send_notification(
            user_id=autopay.user_id,
            message=message
        )
    
    def _get_error_reason_text(self, error_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏"""
        
        reasons = {
            'insufficient_funds': '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–∞—Ä—Ç–µ',
            'card_issue': '–ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–∞—Ä—Ç–æ–π',
            'technical_error': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π',
            'unknown_error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        }
        
        return reasons.get(error_type, '–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞')
    
    async def _handle_max_attempts_reached(self, autopay: AutoPayment):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–≥–¥–∞ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã"""
        
        logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ {autopay.id} –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await notification_service.send_notification(
            user_id=autopay.user_id,
            message=(
                "‚ùå –ê–≤—Ç–æ–ø–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª—é—á–µ–Ω\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.\n"
                "–ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–ø–∏—Å–∫–∞'"
            )
        ) 