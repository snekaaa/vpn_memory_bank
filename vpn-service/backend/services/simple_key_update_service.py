"""
–ü—Ä–æ—Å—Ç–æ–π —Å–µ—Ä–≤–∏—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VPN –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å X3UI
–ë–µ–∑ —Å–ª–æ–∂–Ω–æ–π –ª–æ–≥–∏–∫–∏ - –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –≥–æ—Ç–æ–≤—ã–µ –∫–ª—é—á–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏
"""
import structlog
from datetime import datetime
from typing import Dict, Any
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from models.vpn_key import VPNKey, VPNKeyStatus
from models.user import User
# –£–¥–∞–ª–µ–Ω –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∏–º–ø–æ—Ä—Ç from services.x3ui_panel_service import get_x3ui_panel_service

logger = structlog.get_logger(__name__)

class SimpleKeyUpdateService:
    """–ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ X3UI –ø–∞–Ω–µ–ª—å"""
    
    @staticmethod
    async def update_user_key(
        session: AsyncSession,
        user_id: int,
        force_new: bool = False
    ) -> Dict[str, Any]:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞:
        1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –≤ –ë–î
        3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏ —Å—Ç—Ä–æ–≥–æ –ø–æ ID
        4. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –≤ X3UI –ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ
        5. –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π VLESS URL –∏–∑ –ø–∞–Ω–µ–ª–∏
        6. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ
        """
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_result = await session.execute(select(User).where(User.id == user_id))
            user = user_result.scalar_one_or_none()
            
            if not user:
                return {"success": False, "error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # 2. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–¥—É —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from models.vpn_node import VPNNode
            from models.user_server_assignment import UserServerAssignment
            
            logger.info("üîç Looking for user assignment", user_id=user.id, telegram_id=user.telegram_id)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—É—é –Ω–æ–¥—É
            assignment_result = await session.execute(
                select(UserServerAssignment).where(UserServerAssignment.user_id == user.telegram_id)
            )
            assignment = assignment_result.scalar_one_or_none()
            
            logger.info("üéØ Assignment found", 
                       user_id=user.id, 
                       assignment_exists=assignment is not None,
                       assigned_node_id=assignment.node_id if assignment else None)
            
            active_node = None
            
            if assignment and assignment.node_id:
                logger.info("üîç Checking assigned node", node_id=assignment.node_id)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –Ω–æ–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞
                node_result = await session.execute(
                    select(VPNNode).where(
                        VPNNode.id == assignment.node_id,
                        VPNNode.status == "active"
                    )
                )
                active_node = node_result.scalar_one_or_none()
                
                if active_node:
                    logger.info("‚úÖ Using assigned node", 
                               user_id=user.id, 
                               node_id=assignment.node_id, 
                               node_name=active_node.name,
                               node_location=active_node.location)
                else:
                    logger.warning("‚ùå Assigned node is not active, selecting fallback", 
                                  user_id=user.id, 
                                  assigned_node_id=assignment.node_id)
            else:
                logger.info("‚ÑπÔ∏è No assignment found, will use fallback", user_id=user.id)
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–∞—è –Ω–æ–¥–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –±–µ—Ä–µ–º –ª—é–±—É—é –∞–∫—Ç–∏–≤–Ω—É—é
            if not active_node:
                logger.info("üîÑ Selecting fallback node", user_id=user.id)
                
                node_result = await session.execute(
                    select(VPNNode).where(VPNNode.status == "active")
                    .order_by(VPNNode.priority.desc())
                    .limit(1)
                )
                active_node = node_result.scalar_one_or_none()
                
                logger.info("üÜò Using fallback node", 
                           user_id=user.id, 
                           node_id=active_node.id if active_node else None,
                           node_name=active_node.name if active_node else None,
                           node_location=active_node.location if active_node else None)
            
            if not active_node:
                return {"success": False, "error": "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö VPN –Ω–æ–¥"}
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º Reality inbound –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            from services.reality_inbound_service import RealityInboundService
            
            inbound_exists = await RealityInboundService.ensure_reality_inbound_exists(
                node=active_node,
                port=443,
                sni_mask="apple.com"
            )
            
            if not inbound_exists:
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Reality inbound –≤ –ø–∞–Ω–µ–ª–∏"}
            
            # 4. –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ X3UI API
            from services.x3ui_client import X3UIClient
            
            x3ui_client = X3UIClient(
                base_url=active_node.x3ui_url,
                username=active_node.x3ui_username,
                password=active_node.x3ui_password
            )
            
            if not await x3ui_client._login():
                return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ X3UI –ø–∞–Ω–µ–ª–∏"}
            
            try:
                # 5. –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
                active_key_result = await session.execute(
                    select(VPNKey).where(
                        VPNKey.user_id == user_id,
                        VPNKey.status.in_(["active", "ACTIVE", VPNKeyStatus.ACTIVE.value])
                    ).order_by(VPNKey.created_at.desc()).limit(1)
                )
                active_key = active_key_result.scalar_one_or_none()
                
                if active_key:
                    logger.info("–ù–∞–π–¥–µ–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", 
                               user_id=user_id, 
                               key_id=active_key.id,
                               node_id=active_key.node_id,
                               uuid=active_key.uuid,
                               xui_client_id=active_key.xui_client_id)
                else:
                    logger.info("–ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π", user_id=user_id)
                
                # 6. –ü–æ–ª—É—á–∞–µ–º Reality inbound –∏–∑ –ø–∞–Ω–µ–ª–∏
                logger.info("üîç –ü–æ–∏—Å–∫ Reality inbound'–∞ –Ω–∞ –ø–æ—Ä—Ç—É 443")
                inbounds = await x3ui_client.get_inbounds()
                reality_inbound = None
                
                if not inbounds:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ inbound'–æ–≤ –∏–∑ X3UI –ø–∞–Ω–µ–ª–∏")
                    return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ inbound'–æ–≤ –∏–∑ –ø–∞–Ω–µ–ª–∏"}
                
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ {len(inbounds)} inbound'–æ–≤ –≤ –ø–∞–Ω–µ–ª–∏")
                
                if inbounds:
                    import json
                    for i, inbound in enumerate(inbounds):
                        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ inbound {i+1}: "
                                   f"protocol={inbound.get('protocol')}, "
                                   f"port={inbound.get('port')}, "
                                   f"enabled={inbound.get('enable')}")
                        
                        if (inbound.get("protocol") == "vless" and 
                            inbound.get("port") == 443 and
                            inbound.get("enable") == True):
                            
                            stream_settings = json.loads(inbound.get("streamSettings", "{}"))
                            security = stream_settings.get("security")
                            
                            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω VLESS inbound –Ω–∞ –ø–æ—Ä—Ç—É 443, security={security}")
                            
                            if security == "reality":
                                reality_inbound = inbound
                                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω Reality inbound: id={inbound.get('id')}")
                                break
                
                if not reality_inbound:
                    logger.error("‚ùå Reality inbound –Ω–∞ –ø–æ—Ä—Ç—É 443 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏")
                    return {"success": False, "error": "Reality inbound –Ω–∞ –ø–æ—Ä—Ç—É 443 –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏"}
                
                inbound_id = reality_inbound["id"]
                
                # 7. –§–æ—Ä–º–∏—Ä—É–µ–º email –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å X3UI
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞: id tg –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–º—è –≤ –¢–ì)
                first_name_part = f" ({user.first_name})" if user.first_name else ""
                email = f"{user.telegram_id}{first_name_part}"
                
                # 8. –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ –ø–∞–Ω–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                old_key_deleted = False  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –Ω–µ —É–¥–∞–ª–µ–Ω
                
                if active_key and active_key.xui_client_id:
                    logger.info("üóëÔ∏è –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ –ø–∞–Ω–µ–ª–∏", 
                               key_id=active_key.id, 
                               client_id=active_key.xui_client_id,
                               old_node_id=active_key.node_id,
                               new_node_id=active_node.id)
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∏–∑ –ø–∞–Ω–µ–ª–∏
                    try:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –∫–ª—é—á —Å –¥—Ä—É–≥–æ–π –Ω–æ–¥—ã, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–æ–π –Ω–æ–¥–µ
                        if active_key.node_id and active_key.node_id != active_node.id:
                            logger.info("üîÑ –°—Ç–∞—Ä—ã–π –∫–ª—é—á —Å –¥—Ä—É–≥–æ–π –Ω–æ–¥—ã, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä–æ–π –Ω–æ–¥–µ", 
                                       old_node_id=active_key.node_id, 
                                       new_node_id=active_node.id)
                            
                            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä–æ–π –Ω–æ–¥—ã
                            old_node_result = await session.execute(
                                select(VPNNode).where(VPNNode.id == active_key.node_id)
                            )
                            old_node = old_node_result.scalar_one_or_none()
                            
                            if old_node:
                                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å—Ç–∞—Ä–æ–π –Ω–æ–¥—ã
                                old_x3ui_client = X3UIClient(
                                    base_url=old_node.x3ui_url,
                                    username=old_node.x3ui_username,
                                    password=old_node.x3ui_password
                                )
                                
                                if await old_x3ui_client._login():
                                    # –ü–æ–ª—É—á–∞–µ–º inbound'—ã —Å—Ç–∞—Ä–æ–π –Ω–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ ID
                                    old_inbounds = await old_x3ui_client.get_inbounds()
                                    old_reality_inbound = None
                                    
                                    if old_inbounds:
                                        import json
                                        for inbound in old_inbounds:
                                            if (inbound.get("protocol") == "vless" and 
                                                inbound.get("port") == 443 and
                                                inbound.get("enable") == True):
                                                
                                                stream_settings = json.loads(inbound.get("streamSettings", "{}"))
                                                if stream_settings.get("security") == "reality":
                                                    old_reality_inbound = inbound
                                                    break
                                    
                                    if old_reality_inbound:
                                        old_inbound_id = old_reality_inbound["id"]
                                        old_key_deleted = await old_x3ui_client.delete_client(old_inbound_id, active_key.xui_client_id)
                                        
                                        if old_key_deleted:
                                            logger.info("‚úÖ –°—Ç–∞—Ä—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å—Ç–∞—Ä–æ–π –Ω–æ–¥—ã", 
                                                       key_id=active_key.id, 
                                                       client_id=active_key.xui_client_id,
                                                       old_node_id=old_node.id)
                                        else:
                                            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á –∏–∑ —Å—Ç–∞—Ä–æ–π –Ω–æ–¥—ã", 
                                                          key_id=active_key.id,
                                                          old_node_id=old_node.id)
                                    else:
                                        logger.warning("‚ö†Ô∏è Reality inbound –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å—Ç–∞—Ä–æ–π –Ω–æ–¥–µ", 
                                                      old_node_id=old_node.id)
                                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Å—á–∏—Ç–∞—è —á—Ç–æ –∫–ª—é—á "—É–¥–∞–ª–µ–Ω"
                                        old_key_deleted = True
                                else:
                                    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—Ç–∞—Ä–æ–π –Ω–æ–¥–µ", 
                                                  old_node_id=old_node.id)
                                    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Å—á–∏—Ç–∞—è —á—Ç–æ –∫–ª—é—á "—É–¥–∞–ª–µ–Ω"
                                    old_key_deleted = True
                            else:
                                logger.warning("‚ö†Ô∏è –°—Ç–∞—Ä–∞—è –Ω–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î", 
                                              old_node_id=active_key.node_id)
                                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Å—á–∏—Ç–∞—è —á—Ç–æ –∫–ª—é—á "—É–¥–∞–ª–µ–Ω"
                                old_key_deleted = True
                        else:
                            # –°—Ç–∞—Ä—ã–π –∫–ª—é—á —Å —Ç–æ–π –∂–µ –Ω–æ–¥—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª–∏–µ–Ω—Ç
                            old_key_deleted = await x3ui_client.delete_client(inbound_id, active_key.xui_client_id)
                        
                        if old_key_deleted:
                            # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ –∏–∑ –ø–∞–Ω–µ–ª–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏)
                            await session.delete(active_key)
                            await session.commit()
                            logger.info("‚úÖ –°—Ç–∞—Ä—ã–π –∫–ª—é—á —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î", key_id=active_key.id)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∏–∑ –ø–∞–Ω–µ–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ –ø–∞–Ω–µ–ª–∏", 
                                       key_id=active_key.id, 
                                       client_id=active_key.xui_client_id)
                            return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–ª—é—á –∏–∑ –ø–∞–Ω–µ–ª–∏"}
                    except Exception as e:
                        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ –ø–∞–Ω–µ–ª–∏", 
                                    key_id=active_key.id, 
                                    client_id=active_key.xui_client_id,
                                    error=str(e))
                        return {"success": False, "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä–æ–≥–æ –∫–ª—é—á–∞: {str(e)}"}
                else:
                    # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–ª—é—á–∞ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                    old_key_deleted = True
                    logger.info("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ")
                
                # 9. –ï—Å–ª–∏ —Å—Ç–∞—Ä—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                if old_key_deleted:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º UUID –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
                    import uuid
                    client_uuid = str(uuid.uuid4())
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    import time
                    timestamp = int(time.time())
                    unique_email = f"{user.telegram_id}_{timestamp}{first_name_part}@vpn.local"
                    
                    logger.info("üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞", 
                               email=unique_email, 
                               uuid=client_uuid)
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏
                    client_config = {
                        "id": client_uuid,
                        "email": unique_email,
                        "limitIp": 2,
                        "totalGB": 100 * 1024 * 1024 * 1024,  # 100GB
                        "expiryTime": 0,  # –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
                        "enable": True,
                        "tgId": str(user.telegram_id),
                        "subId": ""
                    }
                    
                    client_result = await x3ui_client.create_client(inbound_id, client_config)
                    
                    if not client_result or not client_result.get("success"):
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏")
                        return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –ø–∞–Ω–µ–ª–∏"}
                    
                    # –ü–æ–ª—É—á–∞–µ–º VLESS URL –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                    vless_url = await x3ui_client.generate_client_url(inbound_id, client_uuid)
                    
                    if not vless_url:
                        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å VLESS URL –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞")
                        return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å VLESS URL –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"}
                    
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á –≤ –ë–î (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
                    new_key = VPNKey(
                        user_id=user_id,
                        # subscription_id —É–±—Ä–∞–Ω–æ - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
                        node_id=active_node.id,
                        uuid=client_uuid,
                        key_name=f"key_{int(datetime.utcnow().timestamp())}",
                        vless_url=vless_url,
                        xui_email=unique_email,
                        status=VPNKeyStatus.ACTIVE.value,
                        xui_client_id=client_uuid,
                        xui_inbound_id=inbound_id,
                        total_download=0,
                        total_upload=0
                    )
                    
                    session.add(new_key)
                    await session.commit()
                    await session.refresh(new_key)
                    
                    logger.info("‚úÖ –ù–æ–≤—ã–π –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω", 
                               new_key_id=new_key.id,
                               user_id=user_id,
                               uuid=client_uuid)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –Ω–æ–¥—ã
                    from services.node_manager import NodeManager
                    node_manager = NodeManager(session)
                    await node_manager.update_node_stats(active_node.id)
                    
                    # 13. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–ª—é—á–æ–º
                    return {
                        "success": True, 
                        "vpn_key": {
                            "id": new_key.id,
                            "uuid": new_key.uuid,
                            "vless_url": new_key.vless_url,
                            "status": new_key.status,
                            "created_at": new_key.created_at.isoformat() if new_key.created_at else None
                        }
                    }
                else:
                    # –≠—Ç–æ—Ç –±–ª–æ–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∏–∑-–∑–∞ return –≤—ã—à–µ,
                    # –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è –ª–æ–≥–∏—á–µ—Å–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
                    return {"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–π –∫–ª—é—á"}
                
            except Exception as e:
                logger.error("üí• –û—à–∏–±–∫–∞ –≤ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VPN –∫–ª—é—á–∞", 
                            error=str(e),
                            telegram_id=user.telegram_id)
                return {"success": False, "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}
                
        except Exception as e:
            logger.error("üí• –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ API –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è VPN –∫–ª—é—á–∞", error=str(e))
            return {"success": False, "error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"}

    @staticmethod
    async def get_or_create_user_key(
        session: AsyncSession,
        user_id: int
    ) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        2. –ï—Å–ª–∏ –µ—Å—Ç—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        3. –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ update_user_key
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á
            key_result = await session.execute(
                select(VPNKey).where(
                    VPNKey.user_id == user_id,
                    VPNKey.status.in_(["active", "ACTIVE", VPNKeyStatus.ACTIVE.value])
                ).order_by(VPNKey.created_at.desc()).limit(1)
            )
            key = key_result.scalar_one_or_none()
            
            if key:
                # –ö–ª—é—á –Ω–∞–π–¥–µ–Ω - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
                return {
                    "success": True,
                    "message": "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á –Ω–∞–π–¥–µ–Ω",
                    "vpn_key": {
                        "id": key.id,
                        "key_name": key.key_name,
                        "vless_url": key.vless_url,
                        "status": key.status,
                        "created_at": key.created_at.isoformat() if key.created_at else None
                    }
                }
            else:
                # –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
                logger.info("–ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π", user_id=user_id)
                return await SimpleKeyUpdateService.update_user_key(
                    session=session,
                    user_id=user_id
                )
                
        except Exception as e:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞", 
                        user_id=user_id, 
                        error=str(e))
            return {
                "success": False,
                "error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏/—Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: {str(e)}"
            } 