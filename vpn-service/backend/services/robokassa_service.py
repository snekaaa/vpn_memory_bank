"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –†–æ–±–æ–∫–∞—Å—Å–æ–π
–†–µ–∞–ª–∏–∑—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π, –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–µ–π –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
"""

import hashlib
import hmac
import logging
from typing import Dict, Optional, Any
from urllib.parse import urlencode, urlparse, parse_qs
import aiohttp
import asyncio
from datetime import datetime, timezone

logger = logging.getLogger(__name__)

class RobokassaService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –†–æ–±–æ–∫–∞—Å—Å—ã"""
    
    def __init__(self, provider_config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –†–æ–±–æ–∫–∞—Å—Å—ã
        
        Args:
            provider_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ –ë–î (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        """
        if not provider_config:
            raise ValueError("Provider config is required for RobokassaService")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ –ë–î
        logger.info("Using Robokassa config from payment provider")
        self.shop_id = provider_config.get('shop_id')
        self.password1 = provider_config.get('password1') 
        self.password2 = provider_config.get('password2')
        self.base_url = provider_config.get('base_url', 'https://auth.robokassa.ru/Merchant/Index.aspx')
        self.test_mode = provider_config.get('test_mode', False)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        if not all([self.shop_id, self.password1, self.password2]):
            logger.error("Robokassa configuration incomplete")
            raise ValueError("Incomplete Robokassa configuration: shop_id, password1, and password2 are required")
        else:
            logger.info(f"Robokassa service initialized for shop_id: {self.shop_id}")
    
    def _generate_signature(self, params: Dict[str, Any], password: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –†–æ–±–æ–∫–∞—Å—Å—ã –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É
        
        Args:
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            password: –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            
        Returns:
            –•–µ—à –ø–æ–¥–ø–∏—Å–∏
        """
        # –î–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –†–æ–±–æ–∫–∞—Å—Å—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        # –î–ª—è –ø–ª–∞—Ç–µ–∂–∞: MerchantLogin:OutSum:InvId:Password
        # –î–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: OutSum:InvId:Password
        
        if 'MerchantLogin' in params:
            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
            signature_string = f"{params['MerchantLogin']}:{params['OutSum']}:{params['InvId']}:{password}"
        else:
            # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ success URL
            signature_string = f"{params['OutSum']}:{params['InvId']}:{password}"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–∞—Å–∫–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å)
        masked_string = signature_string.replace(password, "***")
        logger.info(f"Signature string (masked): {masked_string}")
        
        # –°–æ–∑–¥–∞–µ–º MD5 —Ö–µ—à
        signature = hashlib.md5(signature_string.encode('utf-8')).hexdigest()
        logger.info(f"Generated signature: {signature}")
        
        return signature
    
    def _generate_recurring_signature(self, params: Dict[str, Any], password: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Recurring API
        
        Args:
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            password: –ü–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
            
        Returns:
            –•–µ—à –ø–æ–¥–ø–∏—Å–∏
        """
        # –î–ª—è Recurring API Robokassa –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Å–æ–±—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥–ø–∏—Å–∏
        # MerchantLogin:OutSum:PreviousInvoiceID:Password –∏–ª–∏ MerchantLogin:ID:Password
        
        if 'PreviousInvoiceID' in params:
            # –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è recurring –ø–ª–∞—Ç–µ–∂–∞
            signature_string = (
                f"{params['MerchantLogin']}:"
                f"{params['OutSum']}:"
                f"{params['PreviousInvoiceID']}:"
                f"{password}"
            )
        elif 'ID' in params:
            # –î–ª—è –æ—Ç–º–µ–Ω—ã recurring
            signature_string = (
                f"{params['MerchantLogin']}:"
                f"{params['ID']}:"
                f"{password}"
            )
        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å—å
            signature_string = f"{params['MerchantLogin']}:{password}"
        
        return hashlib.md5(signature_string.encode('utf-8')).hexdigest()
    
    def create_payment_url(
        self, 
        amount: float, 
        order_id: str, 
        description: str,
        email: Optional[str] = None,
        success_url: Optional[str] = None,
        failure_url: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ –†–æ–±–æ–∫–∞—Å—Å–µ
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            order_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            success_url: URL —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            failure_url: URL –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            
        Returns:
            Dict —Å URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ–ø–ª–∞—Ç—É
        """
        params = {
            'MerchantLogin': self.shop_id,
            'OutSum': str(amount),
            'InvId': order_id,
            'Description': description,
            'IsTest': '1' if self.test_mode else '0'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if email:
            params['Email'] = email
        if success_url:
            params['SuccessURL'] = success_url
        if failure_url:
            params['FailURL'] = failure_url
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        signature_params = {
            'MerchantLogin': self.shop_id,
            'OutSum': str(amount),
            'InvId': order_id
        }
        
        signature = self._generate_signature(signature_params, self.password1)
        params['SignatureValue'] = signature
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        query_string = urlencode(params, quote_via=lambda x, *args: x)
        payment_url = f"{self.base_url}?{query_string}"
        
        logger.info(f"üî¥ RobokassaService created payment URL for order {order_id}, amount {amount}")
        return {'url': payment_url}
    
    def create_recurring_payment_url(
        self, 
        amount: float, 
        order_id: str, 
        description: str,
        recurring: bool = True,
        email: Optional[str] = None,
        success_url: Optional[str] = None,
        failure_url: Optional[str] = None,
        **kwargs
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ recurring –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            order_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            recurring: –§–ª–∞–≥ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ recurring
            email: Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            success_url: URL —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            failure_url: URL –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
            
        Returns:
            Dict —Å URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ–ø–ª–∞—Ç—É
        """
        params = {
            'MerchantLogin': self.shop_id,
            'OutSum': str(amount),
            'InvId': order_id,
            'Description': description,
            'Recurring': 'true' if recurring else 'false',
            'IsTest': '1' if self.test_mode else '0'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if email:
            params['Email'] = email
        if success_url:
            params['SuccessURL'] = success_url
        if failure_url:
            params['FailURL'] = failure_url
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
        signature_params = {
            'MerchantLogin': self.shop_id,
            'OutSum': str(amount),
            'InvId': order_id
        }
        
        signature = self._generate_signature(signature_params, self.password1)
        params['SignatureValue'] = signature
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL
        query_string = urlencode(params)
        payment_url = f"{self.base_url}?{query_string}"
        
        logger.info(f"üî¥ RobokassaService created recurring payment URL for order {order_id}, amount {amount}")
        return {'url': payment_url}
    
    async def create_recurring_subscription(
        self,
        previous_invoice_id: str,
        amount: float,
        period_days: int,
        description: str
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ recurring –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            previous_invoice_id: ID –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            period_days: –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å –≤ –¥–Ω—è—Ö
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        """
        params = {
            'MerchantLogin': self.shop_id,
            'OutSum': str(amount),
            'PreviousInvoiceID': previous_invoice_id,
            'Description': description
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –¥–ª—è recurring API
        signature = self._generate_recurring_signature(params, self.password1)
        params['SignatureValue'] = signature
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ Robokassa Recurring API
        recurring_url = "https://auth.robokassa.ru/Merchant/Recurring"
        
        async with aiohttp.ClientSession() as session:
            async with session.post(recurring_url, data=params) as response:
                result = await response.text()
                
                if "OK" in result:
                    recurring_id = result.replace("OK", "").strip()
                    return {
                        'success': True,
                        'recurring_id': recurring_id,
                        'status': 'created'
                    }
                else:
                    return {
                        'success': False,
                        'error': result,
                        'status': 'failed'
                    }
    
    async def cancel_recurring_subscription(self, recurring_id: str) -> Dict[str, Any]:
        """
        –û—Ç–º–µ–Ω–∞ recurring –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            recurring_id: ID recurring –ø–æ–¥–ø–∏—Å–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã
        """
        params = {
            'MerchantLogin': self.shop_id,
            'ID': recurring_id
        }
        
        signature = self._generate_recurring_signature(params, self.password1)
        params['SignatureValue'] = signature
        
        cancel_url = "https://auth.robokassa.ru/Merchant/CancelRecurring"
        
        async with aiohttp.ClientSession() as session:
            async with session.post(cancel_url, data=params) as response:
                result = await response.text()
                return {
                    'success': "OK" in result,
                    'result': result
                }
    
    async def get_recurring_status(self, recurring_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ recurring –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            recurring_id: ID recurring –ø–æ–¥–ø–∏—Å–∫–∏
            
        Returns:
            –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
        """
        params = {
            'MerchantLogin': self.shop_id,
            'ID': recurring_id
        }
        
        signature = self._generate_recurring_signature(params, self.password1)
        params['SignatureValue'] = signature
        
        status_url = "https://auth.robokassa.ru/Merchant/GetRecurringStatus"
        
        async with aiohttp.ClientSession() as session:
            async with session.post(status_url, data=params) as response:
                result = await response.text()
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç Robokassa
                return self._parse_recurring_status(result)
    
    def _parse_recurring_status(self, response: str) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ –æ —Å—Ç–∞—Ç—É—Å–µ recurring –ø–æ–¥–ø–∏—Å–∫–∏"""
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å XML –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ Robokassa
        # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if "active" in response.lower():
            return {'status': 'active', 'raw_response': response}
        elif "cancelled" in response.lower():
            return {'status': 'cancelled', 'raw_response': response}
        else:
            return {'status': 'unknown', 'raw_response': response}
    
    async def validate_recurring_id(self, recurring_id: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ recurring_id –ø–µ—Ä–µ–¥ —Å–ø–∏—Å–∞–Ω–∏–µ–º
        
        Args:
            recurring_id: ID recurring –ø–æ–¥–ø–∏—Å–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        try:
            status_result = await self.get_recurring_status(recurring_id)
            
            if status_result.get('status') == 'active':
                return {
                    'valid': True,
                    'status': status_result.get('status'),
                    'message': 'Recurring ID –∞–∫—Ç–∏–≤–µ–Ω'
                }
            else:
                return {
                    'valid': False,
                    'status': status_result.get('status'),
                    'message': f'Recurring ID –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: {status_result.get("status")}'
                }
        except Exception as e:
            return {
                'valid': False,
                'status': 'error',
                'message': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ recurring_id: {str(e)}'
            }
    
    async def create_recurring_subscription_with_logging(
        self,
        auto_payment_id: int,
        previous_invoice_id: str,
        amount: float,
        description: str,
        attempt_number: int = 1
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ recurring –ø–æ–¥–ø–∏—Å–∫–∏ —Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        
        Args:
            auto_payment_id: ID –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
            previous_invoice_id: ID –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            amount: –°—É–º–º–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ
            attempt_number: –ù–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        """
        from models.payment_retry_attempt import PaymentRetryAttempt, RetryResult
        from config.database import get_db
        
        params = {
            'MerchantLogin': self.shop_id,
            'OutSum': str(amount),
            'PreviousInvoiceID': previous_invoice_id,
            'Description': description
        }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å –¥–ª—è Recurring API
        signature = self._generate_recurring_signature(params, self.password1)
        params['SignatureValue'] = signature
        
        recurring_url = "https://auth.robokassa.ru/Merchant/Recurring"
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db = next(get_db())
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É
        retry_attempt = PaymentRetryAttempt(
            auto_payment_id=auto_payment_id,
            attempt_number=attempt_number,
            scheduled_at=datetime.now(timezone.utc),
            attempted_at=datetime.now(timezone.utc),
            error_type='unknown'  # –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
        )
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(recurring_url, data=params) as response:
                    result = await response.text()
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º raw –æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ–±–∞–≥–∞
                    retry_attempt.robokassa_response = result
                    
                    if "OK" in result:
                        recurring_id = result.replace("OK", "").strip()
                        retry_attempt.result = RetryResult.SUCCESS
                        
                        db.add(retry_attempt)
                        db.commit()
                        
                        return {
                            'success': True,
                            'recurring_id': recurring_id,
                            'status': 'created'
                        }
                    else:
                        # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                        error_type = self._classify_robokassa_error(result)
                        retry_attempt.error_type = error_type
                        retry_attempt.error_message = result
                        retry_attempt.result = RetryResult.FAILED
                        
                        db.add(retry_attempt)
                        db.commit()
                        
                        return {
                            'success': False,
                            'error': result,
                            'error_type': error_type,
                            'status': 'failed'
                        }
                        
        except Exception as e:
            retry_attempt.error_type = 'technical_error'
            retry_attempt.error_message = str(e)
            retry_attempt.result = RetryResult.FAILED
            
            db.add(retry_attempt)
            db.commit()
            
            return {
                'success': False,
                'error': str(e),
                'error_type': 'technical_error',
                'status': 'failed'
            }
        finally:
            db.close()
    
    def _classify_robokassa_error(self, error_message: str) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞ Robokassa"""
        error_lower = error_message.lower()
        
        if any(keyword in error_lower for keyword in ['insufficient', '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ', 'funds', '—Å—Ä–µ–¥—Å—Ç–≤']):
            return 'insufficient_funds'
        elif any(keyword in error_lower for keyword in ['card', '–∫–∞—Ä—Ç–∞', 'blocked', '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞', 'expired', '–∏—Å—Ç–µ–∫–ª–∞']):
            return 'card_issue'
        elif any(keyword in error_lower for keyword in ['cancelled', '–æ—Ç–º–µ–Ω–µ–Ω', 'user']):
            return 'user_cancelled'
        elif any(keyword in error_lower for keyword in ['technical', '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è', 'error', '–æ—à–∏–±–∫–∞', 'timeout']):
            return 'technical_error'
        else:
            return 'unknown_error'
    
    def validate_result_signature(self, params: Dict[str, str]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ ResultURL (—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ)
        
        Args:
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –†–æ–±–æ–∫–∞—Å—Å—ã
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            received_signature = params.get('SignatureValue', '').lower()
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–±–µ–∑ MerchantLogin –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
            signature_params = {
                'OutSum': params.get('OutSum'),
                'InvId': params.get('InvId')
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å
            expected_signature = self._generate_signature(signature_params, self.password2)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
            is_valid = hmac.compare_digest(received_signature, expected_signature.lower())
            
            if not is_valid:
                logger.warning(f"Invalid signature for invoice {params.get('InvId')}")
            
            return is_valid
            
        except Exception as e:
            logger.error(f"Error validating signature: {e}")
            return False
    
    def validate_success_signature(self, params: Dict[str, str]) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ SuccessURL (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã)
        
        –î–ª—è SuccessURL –†–æ–±–æ–∫–∞—Å—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç password1, –∞ –Ω–µ password2
        
        Args:
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –†–æ–±–æ–∫–∞—Å—Å—ã
            
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            received_signature = params.get('SignatureValue', '').lower()
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ (–±–µ–∑ MerchantLogin)
            signature_params = {
                'OutSum': params.get('OutSum'),
                'InvId': params.get('InvId')
            }
            
            logger.info(f"üîç SUCCESS SIGNATURE DEBUG:")
            logger.info(f"  - OutSum: {params.get('OutSum')}")
            logger.info(f"  - InvId: {params.get('InvId')}")
            logger.info(f"  - Received signature: {received_signature}")
            logger.info(f"  - Shop ID: {self.shop_id}")
            logger.info(f"  - Using password1 (length: {len(self.password1) if self.password1 else 0})")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—É—é –ø–æ–¥–ø–∏—Å—å —Å password1 (–Ω–µ password2!)
            expected_signature = self._generate_signature(signature_params, self.password1)
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏
            is_valid = hmac.compare_digest(received_signature, expected_signature.lower())
            
            logger.info(f"  - Expected signature: {expected_signature.lower()}")
            logger.info(f"  - Signatures match: {is_valid}")
            
            if not is_valid:
                logger.error(f"‚ùå Invalid success signature for invoice {params.get('InvId')}")
                logger.error(f"   Received: {received_signature}")
                logger.error(f"   Expected: {expected_signature.lower()}")
            
            return is_valid
            
        except Exception as e:
            logger.error(f"Error validating success signature: {e}")
            return False
    
    async def check_payment_status(self, invoice_id: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API –†–æ–±–æ–∫–∞—Å—Å—ã
        
        Args:
            invoice_id: ID –∏–Ω–≤–æ–π—Å–∞
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–∞—Ç–µ–∂–µ
        """
        try:
            # URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            check_url = "https://auth.robokassa.ru/Merchant/WebService/Service.asmx/OpState"
            
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            params = {
                'MerchantLogin': self.shop_id,
                'InvoiceID': invoice_id
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            signature = self._generate_signature(params, self.password2)
            params['Signature'] = signature
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            async with aiohttp.ClientSession() as session:
                async with session.post(check_url, data=params) as response:
                    if response.status == 200:
                        result = await response.text()
                        
                        # –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ XML –æ—Ç–≤–µ—Ç–∞
                        if "StateCode:100" in result:
                            return {
                                'status': 'paid',
                                'message': 'Payment completed successfully'
                            }
                        elif "StateCode:50" in result:
                            return {
                                'status': 'pending',
                                'message': 'Payment is being processed'
                            }
                        else:
                            return {
                                'status': 'unknown',
                                'message': 'Unknown payment status'
                            }
                    else:
                        logger.error(f"Error checking payment status: {response.status}")
                        return {
                            'status': 'error',
                            'message': f'API error: {response.status}'
                        }
                        
        except Exception as e:
            logger.error(f"Error checking payment status: {e}")
            return {
                'status': 'error',
                'message': str(e)
            }
    
    def parse_webhook_data(self, params: Dict[str, str]) -> Dict[str, Any]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç webhook –†–æ–±–æ–∫–∞—Å—Å—ã
        
        Args:
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç –†–æ–±–æ–∫–∞—Å—Å—ã
            
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        """
        return {
            'invoice_id': params.get('InvId'),
            'amount': float(params.get('OutSum', 0)),
            'payment_method': params.get('PaymentMethod'),
            'signature': params.get('SignatureValue'),
            'fee': float(params.get('Fee', 0)),
            'email': params.get('EMail'),
            'currency': params.get('IncCurrLabel', 'RUB'),
            'payment_date': datetime.now(timezone.utc),
            'raw_data': params
        }
    
    def get_subscription_plans(self) -> Dict[str, Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ç–∞—Ä–∏—Ñ–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏
        """
        from services.service_plans_manager import service_plans_manager
        return service_plans_manager.get_plans_for_robokassa() 