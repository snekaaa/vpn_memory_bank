"""
VPN Access Control Service
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
"""

import structlog
from typing import Dict, Any, Optional
from datetime import datetime, timezone
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from models.user import User
import aiohttp

logger = structlog.get_logger(__name__)

class VPNAccessControlService:
    """–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ VPN —Ñ—É–Ω–∫—Ü–∏—è–º"""
    
    def __init__(self, db_session: AsyncSession):
        self.db = db_session
    
    async def check_vpn_access(self, telegram_id: int) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ VPN —Ñ—É–Ω–∫—Ü–∏—è–º
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ—Å—Ç—É–ø–µ:
            {
                "has_access": bool,
                "reason": str,
                "message": str,
                "days_remaining": int,
                "valid_until": str (ISO format),
                "user_id": int
            }
        """
        try:
            logger.info("üîç Checking VPN access for user", telegram_id=telegram_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            user = await self._get_user_by_telegram_id(telegram_id)
            
            if not user:
                logger.warning("‚ùå User not found", telegram_id=telegram_id)
                return {
                    "has_access": False,
                    "reason": "user_not_found",
                    "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
                    "days_remaining": 0,
                    "valid_until": None,
                    "user_id": None
                }
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            if not user.has_active_subscription:
                days_remaining = user.subscription_days_remaining if hasattr(user, 'subscription_days_remaining') else 0
                
                logger.info("‚ùå No active subscription", 
                           telegram_id=telegram_id,
                           user_id=user.id,
                           days_remaining=days_remaining,
                           valid_until=user.valid_until)
                
                return {
                    "has_access": False,
                    "reason": "no_subscription", 
                    "message": "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                    "days_remaining": days_remaining,
                    "valid_until": user.valid_until.isoformat() if user.valid_until else None,
                    "user_id": user.id
                }
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
            days_remaining = user.subscription_days_remaining if hasattr(user, 'subscription_days_remaining') else 0
            
            logger.info("‚úÖ VPN access granted", 
                       telegram_id=telegram_id,
                       user_id=user.id,
                       days_remaining=days_remaining,
                       valid_until=user.valid_until)
            
            return {
                "has_access": True,
                "reason": "active_subscription",
                "message": f"VPN –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å: {days_remaining} –¥–Ω.",
                "days_remaining": days_remaining,
                "valid_until": user.valid_until.isoformat() if user.valid_until else None,
                "user_id": user.id
            }
            
        except Exception as e:
            logger.error("üí• Error checking VPN access", 
                        telegram_id=telegram_id,
                        error=str(e))
            return {
                "has_access": False,
                "reason": "system_error",
                "message": "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN",
                "days_remaining": 0,
                "valid_until": None,
                "user_id": None
            }
    
    async def get_subscription_plans_for_user(self, telegram_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN
        
        Args:
            telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å –ø–ª–∞–Ω–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        """
        try:
            logger.info("üìã Getting subscription plans for user", telegram_id=telegram_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å
            plans = await self._get_plans_from_api()
            
            if not plans:
                logger.warning("‚ö†Ô∏è No subscription plans available")
                return {
                    "success": False,
                    "message": "–ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                    "plans": {}
                }
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message = (
                "üîê **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è VPN –∫–ª—é—á–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞**\n\n"
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω:"
            )
            
            logger.info("‚úÖ Subscription plans retrieved", 
                       telegram_id=telegram_id,
                       plans_count=len(plans))
            
            return {
                "success": True,
                "message": message,
                "plans": plans,
                "show_autopay_default": True  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å –∞–≤—Ç–æ–ø–ª–∞—Ç–µ–∂–æ–º
            }
            
        except Exception as e:
            logger.error("üí• Error getting subscription plans", 
                        telegram_id=telegram_id,
                        error=str(e))
            return {
                "success": False,
                "message": "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏",
                "plans": {}
            }
    
    async def _get_plans_from_api(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API –∑–∞–ø—Ä–æ—Å"""
        try:
            # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–ª–∞–Ω—ã
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ API –ø–ª–∞–Ω–æ–≤
            mock_plans = {
                "month": {
                    "name": "1 –º–µ—Å—è—Ü",
                    "price": 199,
                    "discount": None,
                    "period": "1 month"
                },
                "3month": {
                    "name": "3 –º–µ—Å—è—Ü–∞", 
                    "price": 497,
                    "discount": 16,
                    "period": "3 months"
                },
                "year": {
                    "name": "1 –≥–æ–¥",
                    "price": 1590,
                    "discount": 33,
                    "period": "12 months"
                }
            }
            
            logger.info("‚úÖ Plans retrieved from mock data", plans_count=len(mock_plans))
            return mock_plans
            
        except Exception as e:
            logger.error("Error getting plans from API", error=str(e))
            return {}
    
    async def check_user_subscription_details(self, telegram_id: int) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            Dict —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ
        """
        try:
            user = await self._get_user_by_telegram_id(telegram_id)
            
            if not user:
                return {
                    "found": False,
                    "message": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                }
            
            now = datetime.now(timezone.utc)
            
            return {
                "found": True,
                "user_id": user.id,
                "telegram_id": telegram_id,
                "subscription_status": user.subscription_status.value if user.subscription_status else "none",
                "valid_until": user.valid_until.isoformat() if user.valid_until else None,
                "valid_until_formatted": user.valid_until.strftime('%d.%m.%Y %H:%M') if user.valid_until else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞",
                "has_active_subscription": user.has_active_subscription,
                "days_remaining": user.subscription_days_remaining if hasattr(user, 'subscription_days_remaining') else 0,
                "is_expired": user.valid_until < now if user.valid_until else True,
                "created_at": user.created_at.isoformat() if user.created_at else None,
                "autopay_enabled": getattr(user, 'autopay_enabled', False)
            }
            
        except Exception as e:
            logger.error("Error getting user subscription details", 
                        telegram_id=telegram_id,
                        error=str(e))
            return {
                "found": False,
                "message": f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"
            }
    
    async def _get_user_by_telegram_id(self, telegram_id: int) -> Optional[User]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
        try:
            result = await self.db.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = result.scalar_one_or_none()
            
            if user:
                logger.debug("‚úÖ User found", 
                           telegram_id=telegram_id,
                           user_id=user.id,
                           subscription_status=user.subscription_status)
            else:
                logger.debug("‚ùå User not found", telegram_id=telegram_id)
            
            return user
            
        except Exception as e:
            logger.error("Error fetching user by telegram_id", 
                        telegram_id=telegram_id,
                        error=str(e))
            return None

# –§—É–Ω–∫—Ü–∏—è-—Ö–µ–ª–ø–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö —Å–∏—Å—Ç–µ–º—ã
async def check_user_vpn_access(db_session: AsyncSession, telegram_id: int) -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ VPN –¥–æ—Å—Ç—É–ø–∞ (—Ñ—É–Ω–∫—Ü–∏—è-—Ö–µ–ª–ø–µ—Ä)
    
    Args:
        db_session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        telegram_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    """
    service = VPNAccessControlService(db_session)
    return await service.check_vpn_access(telegram_id) 