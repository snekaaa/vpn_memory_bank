"""
VPN Key Lifecycle Service
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º VPN –∫–ª—é—á–µ–π: –∞–∫—Ç–∏–≤–∞—Ü–∏—è, –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è, —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
"""

import structlog
from typing import Dict, Any, List, Optional
from datetime import datetime, timezone
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, update
from sqlalchemy.orm import selectinload

from models.vpn_key import VPNKey, VPNKeyStatus
from models.vpn_node import VPNNode
from services.x3ui_client import X3UIClient
from services.x3ui_panel_service import X3UIPanelService

logger = structlog.get_logger(__name__)

class VPNKeyLifecycleService:
    """–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º VPN –∫–ª—é—á–µ–π"""
    
    def __init__(self, db_session: AsyncSession):
        self.db = db_session
    
    async def deactivate_user_keys(self, user_id: int) -> Dict[str, Any]:
        """
        –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        """
        try:
            logger.info("üîÑ Starting user keys deactivation", user_id=user_id)
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await self.db.execute(
                select(VPNKey)
                .where(
                    VPNKey.user_id == user_id,
                    VPNKey.status.in_(["active", "ACTIVE", VPNKeyStatus.ACTIVE.value])
                )
            )
            active_keys = result.scalars().all()
            
            if not active_keys:
                logger.info("üì≠ No active keys found for user", user_id=user_id)
                return {
                    "success": True,
                    "message": "No active keys found",
                    "deactivated_count": 0,
                    "total_keys": 0,
                    "errors": []
                }
            
            logger.info("üîç Found active keys for deactivation", 
                       user_id=user_id,
                       keys_count=len(active_keys))
            
            deactivated_count = 0
            errors = []
            
            # 2. –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
            for key in active_keys:
                try:
                    logger.info("üîí Deactivating key", 
                               key_id=key.id,
                               email=key.xui_email,
                               node_id=key.node_id)
                    
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ 3xUI –ø–∞–Ω–µ–ª–∏
                    x3ui_success = await self._disable_key_in_x3ui(key)
                    
                    if x3ui_success:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –Ω–∞ 'suspended'
                        await self._update_key_status(key.id, VPNKeyStatus.SUSPENDED.value)
                        deactivated_count += 1
                        
                        logger.info("‚úÖ Key deactivated successfully", 
                                   key_id=key.id,
                                   email=key.xui_email)
                    else:
                        # –î–∞–∂–µ –µ—Å–ª–∏ 3xUI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ suspended –≤ –ë–î
                        await self._update_key_status(key.id, VPNKeyStatus.SUSPENDED.value)
                        deactivated_count += 1
                        errors.append(f"Key {key.id}: 3xUI deactivation failed, but marked as suspended")
                        
                        logger.warning("‚ö†Ô∏è Key marked as suspended despite 3xUI failure", 
                                     key_id=key.id,
                                     email=key.xui_email)
                        
                except Exception as e:
                    error_msg = f"Key {key.id}: {str(e)}"
                    errors.append(error_msg)
                    logger.error("üí• Error deactivating key", 
                               key_id=key.id,
                               error=str(e))
            
            # 3. –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await self.db.commit()
            
            result = {
                "success": True,
                "message": f"Deactivated {deactivated_count} out of {len(active_keys)} keys",
                "deactivated_count": deactivated_count,
                "total_keys": len(active_keys),
                "errors": errors
            }
            
            logger.info("üîí User keys deactivation completed", 
                       user_id=user_id,
                       result=result)
            
            return result
            
        except Exception as e:
            await self.db.rollback()
            logger.error("üí• Critical error during keys deactivation", 
                        user_id=user_id,
                        error=str(e))
            return {
                "success": False,
                "error": str(e),
                "deactivated_count": 0,
                "total_keys": 0
            }
    
    async def reactivate_user_keys(self, user_id: int) -> Dict[str, Any]:
        """
        –†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        """
        try:
            logger.info("üîÑ Starting user keys reactivation", user_id=user_id)
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await self.db.execute(
                select(VPNKey)
                .where(
                    VPNKey.user_id == user_id,
                    VPNKey.status.in_(["suspended", "SUSPENDED", VPNKeyStatus.SUSPENDED.value])
                )
            )
            suspended_keys = result.scalars().all()
            
            if not suspended_keys:
                logger.info("üì≠ No suspended keys found for user", user_id=user_id)
                return {
                    "success": True,
                    "message": "No suspended keys found",
                    "reactivated_count": 0,
                    "total_keys": 0,
                    "errors": []
                }
            
            logger.info("üîç Found suspended keys for reactivation", 
                       user_id=user_id,
                       keys_count=len(suspended_keys))
            
            reactivated_count = 0
            errors = []
            
            # 2. –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
            for key in suspended_keys:
                try:
                    logger.info("üîì Reactivating key", 
                               key_id=key.id,
                               email=key.xui_email,
                               node_id=key.node_id)
                    
                    # –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤ 3xUI –ø–∞–Ω–µ–ª–∏
                    x3ui_success = await self._enable_key_in_x3ui(key)
                    
                    if x3ui_success:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î –Ω–∞ 'active'
                        await self._update_key_status(key.id, VPNKeyStatus.ACTIVE.value)
                        reactivated_count += 1
                        
                        logger.info("‚úÖ Key reactivated successfully", 
                                   key_id=key.id,
                                   email=key.xui_email)
                    else:
                        # –ï—Å–ª–∏ 3xUI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –æ—Å—Ç–∞–≤–ª—è–µ–º suspended
                        errors.append(f"Key {key.id}: 3xUI reactivation failed")
                        
                        logger.warning("‚ö†Ô∏è Key reactivation failed in 3xUI", 
                                     key_id=key.id,
                                     email=key.xui_email)
                        
                except Exception as e:
                    error_msg = f"Key {key.id}: {str(e)}"
                    errors.append(error_msg)
                    logger.error("üí• Error reactivating key", 
                               key_id=key.id,
                               error=str(e))
            
            # 3. –ö–æ–º–º–∏—Ç–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await self.db.commit()
            
            result = {
                "success": True,
                "message": f"Reactivated {reactivated_count} out of {len(suspended_keys)} keys",
                "reactivated_count": reactivated_count,
                "total_keys": len(suspended_keys),
                "errors": errors
            }
            
            logger.info("üîì User keys reactivation completed", 
                       user_id=user_id,
                       result=result)
            
            return result
            
        except Exception as e:
            await self.db.rollback()
            logger.error("üí• Critical error during keys reactivation", 
                        user_id=user_id,
                        error=str(e))
            return {
                "success": False,
                "error": str(e),
                "reactivated_count": 0,
                "total_keys": 0
            }
    
    async def get_user_keys_status(self, user_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            result = await self.db.execute(
                select(VPNKey)
                .where(VPNKey.user_id == user_id)
            )
            keys = result.scalars().all()
            
            status_counts = {
                "active": 0,
                "suspended": 0,
                "expired": 0,
                "revoked": 0,
                "total": len(keys)
            }
            
            keys_details = []
            
            for key in keys:
                status = key.status.lower() if key.status else "unknown"
                
                if status in ["active"]:
                    status_counts["active"] += 1
                elif status in ["suspended"]:
                    status_counts["suspended"] += 1
                elif status in ["expired"]:
                    status_counts["expired"] += 1
                elif status in ["revoked"]:
                    status_counts["revoked"] += 1
                
                keys_details.append({
                    "id": key.id,
                    "email": key.xui_email,
                    "status": key.status,
                    "node_id": key.node_id,
                    "created_at": key.created_at.isoformat() if key.created_at else None
                })
            
            return {
                "success": True,
                "user_id": user_id,
                "status_counts": status_counts,
                "keys": keys_details
            }
            
        except Exception as e:
            logger.error("Error getting user keys status", 
                        user_id=user_id,
                        error=str(e))
            return {
                "success": False,
                "error": str(e),
                "user_id": user_id
            }
    
    async def _disable_key_in_x3ui(self, key: VPNKey) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –≤ 3xUI –ø–∞–Ω–µ–ª–∏"""
        try:
            if not key.node_id:
                logger.warning("No node assigned to key", key_id=key.id)
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ
            node_result = await self.db.execute(
                select(VPNNode).where(VPNNode.id == key.node_id)
            )
            node = node_result.scalar_one_or_none()
            
            if not node:
                logger.warning("Node not found", key_id=key.id, node_id=key.node_id)
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –Ω–æ–¥—ã
            x3ui_client = X3UIClient(
                base_url=node.x3ui_url,
                username=node.x3ui_username,
                password=node.x3ui_password
            )
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email
            success = await x3ui_client.disable_client_by_email(key.xui_email)
            
            if success:
                logger.info("‚úÖ Key disabled in 3xUI successfully", 
                           key_id=key.id,
                           email=key.xui_email,
                           node=node.name)
            else:
                logger.warning("‚ö†Ô∏è Failed to disable key in 3xUI", 
                             key_id=key.id,
                             email=key.xui_email,
                             node=node.name)
            
            return success
            
        except Exception as e:
            logger.error("üí• Error disabling key in 3xUI", 
                        key_id=key.id,
                        error=str(e))
            return False
    
    async def _enable_key_in_x3ui(self, key: VPNKey) -> bool:
        """–†–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á –≤ 3xUI –ø–∞–Ω–µ–ª–∏"""
        try:
            if not key.node_id:
                logger.warning("No node assigned to key", key_id=key.id)
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–¥–µ
            node_result = await self.db.execute(
                select(VPNNode).where(VPNNode.id == key.node_id)
            )
            node = node_result.scalar_one_or_none()
            
            if not node:
                logger.warning("Node not found", key_id=key.id, node_id=key.node_id)
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–ª—è –Ω–æ–¥—ã
            x3ui_client = X3UIClient(
                base_url=node.x3ui_url,
                username=node.x3ui_username,
                password=node.x3ui_password
            )
            
            # –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ email
            success = await x3ui_client.enable_client_by_email(key.xui_email)
            
            if success:
                logger.info("‚úÖ Key enabled in 3xUI successfully", 
                           key_id=key.id,
                           email=key.xui_email,
                           node=node.name)
            else:
                logger.warning("‚ö†Ô∏è Failed to enable key in 3xUI", 
                             key_id=key.id,
                             email=key.xui_email,
                             node=node.name)
            
            return success
            
        except Exception as e:
            logger.error("üí• Error enabling key in 3xUI", 
                        key_id=key.id,
                        error=str(e))
            return False
    
    async def _update_key_status(self, key_id: int, new_status: str) -> bool:
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–ª—é—á–∞ –≤ –ë–î"""
        try:
            await self.db.execute(
                update(VPNKey)
                .where(VPNKey.id == key_id)
                .values(
                    status=new_status,
                    updated_at=datetime.now(timezone.utc)
                )
            )
            
            logger.debug("üìù Key status updated in database", 
                        key_id=key_id,
                        new_status=new_status)
            
            return True
            
        except Exception as e:
            logger.error("üí• Error updating key status in database", 
                        key_id=key_id,
                        new_status=new_status,
                        error=str(e))
            return False

# –§—É–Ω–∫—Ü–∏—è-—Ö–µ–ª–ø–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö —Å–∏—Å—Ç–µ–º—ã
async def deactivate_user_vpn_keys(db_session: AsyncSession, user_id: int) -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è VPN –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ—É–Ω–∫—Ü–∏—è-—Ö–µ–ª–ø–µ—Ä)
    
    Args:
        db_session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    """
    service = VPNKeyLifecycleService(db_session)
    return await service.deactivate_user_keys(user_id)

async def reactivate_user_vpn_keys(db_session: AsyncSession, user_id: int) -> Dict[str, Any]:
    """
    –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è VPN –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ñ—É–Ω–∫—Ü–∏—è-—Ö–µ–ª–ø–µ—Ä)
    
    Args:
        db_session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    """
    service = VPNKeyLifecycleService(db_session)
    return await service.reactivate_user_keys(user_id) 