"""
Payment Processor Factory
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è Factory Pattern –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
"""
from typing import Dict, Type, Any, Optional
import structlog

from services.payment_processor_base import PaymentProcessorBase
from models.payment_provider import PaymentProvider, PaymentProviderType

logger = structlog.get_logger(__name__)


class PaymentProcessorFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    
    –†–µ–∞–ª–∏–∑—É–µ—Ç Factory Pattern —Å registry –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
    """
    
    # –†–µ–µ—Å—Ç—Ä –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    _processors: Dict[PaymentProviderType, Type[PaymentProcessorBase]] = {}
    
    @classmethod
    def register_processor(cls, provider_type: PaymentProviderType, processor_class: Type[PaymentProcessorBase]) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        
        Args:
            provider_type: –¢–∏–ø –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            processor_class: –ö–ª–∞—Å—Å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        """
        cls._processors[provider_type] = processor_class
        logger.info("Payment processor registered", provider_type=provider_type.value, 
                   processor_class=processor_class.__name__)
    
    @classmethod
    def create_processor(cls, provider: PaymentProvider) -> PaymentProcessorBase:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        
        Args:
            provider: –≠–∫–∑–µ–º–ø–ª—è—Ä PaymentProvider –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Returns:
            –≠–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        
        Raises:
            ValueError: –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        """
        if provider.provider_type not in cls._processors:
            raise ValueError(f"–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ç–∏–ø–∞ {provider.provider_type} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        
        processor_class = cls._processors[provider.provider_type]
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        config = cls._prepare_config(provider)
        
        logger.info("üè≠ Creating processor", 
                   provider_type=provider.provider_type.value,
                   provider_id=provider.id,
                   processor_class=processor_class.__name__,
                   config_keys=list(config.keys()))
        
        try:
            processor = processor_class(config)
            logger.info("‚úÖ Payment processor created successfully", 
                       provider_type=provider.provider_type.value,
                       provider_id=provider.id,
                       processor_class=processor_class.__name__)
            return processor
            
        except Exception as e:
            logger.error("Failed to create payment processor", 
                        provider_type=provider.provider_type.value,
                        provider_id=provider.id,
                        error=str(e))
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ {provider.provider_type}: {str(e)}")
    
    @classmethod
    def get_registered_processors(cls) -> Dict[PaymentProviderType, Type[PaymentProcessorBase]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"""
        return cls._processors.copy()
    
    @classmethod
    def is_processor_registered(cls, provider_type: PaymentProviderType) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞"""
        return provider_type in cls._processors
    
    @classmethod
    def _prepare_config(cls, provider: PaymentProvider) -> Dict[str, Any]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
        
        Args:
            provider: –≠–∫–∑–µ–º–ø–ª—è—Ä PaymentProvider
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        """
        base_config = {
            'test_mode': provider.is_test_mode,
            'min_amount': provider.min_amount,
            'max_amount': provider.max_amount,
            'commission_percent': provider.commission_percent,
            'commission_fixed': provider.commission_fixed,
            'success_url': provider.success_url,
            'failure_url': provider.failure_url,
            'notification_url': provider.notification_url,
            'notification_method': provider.notification_method,
        }
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if provider.provider_type == PaymentProviderType.robokassa:
            robokassa_config = provider.get_robokassa_config()
            base_config.update(robokassa_config)
            
        elif provider.provider_type == PaymentProviderType.freekassa:
            freekassa_config = provider.get_freekassa_config()
            base_config.update(freekassa_config)
            
        elif provider.provider_type == PaymentProviderType.yookassa:
            yookassa_config = provider.get_yookassa_config()
            base_config.update(yookassa_config)
        
        return base_config


def register_all_processors() -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    """
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Robokassa
        try:
            from services.robokassa_service import RobokassaService
            PaymentProcessorFactory.register_processor(PaymentProviderType.robokassa, RobokassaService)
        except ImportError:
            logger.warning("RobokassaService not available for registration")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è FreeKassa
        try:
            from services.freekassa_service import FreeKassaService
            PaymentProcessorFactory.register_processor(PaymentProviderType.freekassa, FreeKassaService)
        except ImportError:
            logger.warning("FreeKassaService not available for registration")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è YooKassa
        try:
            from services.yookassa_service import YooKassaService
            PaymentProcessorFactory.register_processor(PaymentProviderType.yookassa, YooKassaService)
        except ImportError:
            logger.warning("YooKassaService not available for registration")
        
        logger.info("Payment processors registration completed", 
                   registered_count=len(PaymentProcessorFactory.get_registered_processors()))
        
    except Exception as e:
        logger.error("Failed to register payment processors", error=str(e))
        raise


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
register_all_processors() 