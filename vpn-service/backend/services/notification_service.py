import asyncio
import aiohttp
from typing import Optional, Dict, Any
import structlog
from datetime import datetime

from config.settings import get_settings

logger = structlog.get_logger(__name__)

class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    
    def __init__(self):
        self.settings = get_settings()
        self.bot_token = self.settings.telegram_bot_token
        
    async def send_payment_success_notification(
        self, 
        telegram_id: int, 
        payment_amount: float, 
        subscription_type: str,
        vpn_key_name: str
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
        try:
            message = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>

üí∞ <b>–°—É–º–º–∞:</b> {payment_amount:.2f}‚ÇΩ
üìã <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_type}
üîë <b>VPN –∫–ª—é—á:</b> {vpn_key_name}

üéâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é VPN –≤ —Ä–∞–∑–¥–µ–ª–µ "üîê –ú–æ–π VPN".

‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: –¥–æ 1 –ì–±–∏—Ç/—Å
üõ°Ô∏è –ü—Ä–æ—Ç–æ–∫–æ–ª: VLESS + XTLS-REALITY
üåç –ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π —Ç—Ä–∞—Ñ–∏–∫

–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üôè
"""
            
            await self._send_telegram_message(telegram_id, message)
            
            logger.info("Payment success notification sent", 
                       telegram_id=telegram_id,
                       amount=payment_amount,
                       subscription_type=subscription_type)
            
        except Exception as e:
            logger.error("Failed to send payment success notification", 
                        telegram_id=telegram_id,
                        error=str(e))
    
    async def send_payment_failed_notification(
        self, 
        telegram_id: int, 
        payment_amount: float, 
        subscription_type: str,
        failure_reason: Optional[str] = None
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
        try:
            message = f"""
‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª</b>

üí∞ <b>–°—É–º–º–∞:</b> {payment_amount:.2f}‚ÇΩ
üìã <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_type}
"""
            
            if failure_reason:
                message += f"\nüìù <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {failure_reason}"
            
            message += """

üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã
‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: /help

üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞: /start
"""
            
            await self._send_telegram_message(telegram_id, message)
            
            logger.info("Payment failed notification sent", 
                       telegram_id=telegram_id,
                       amount=payment_amount,
                       subscription_type=subscription_type)
            
        except Exception as e:
            logger.error("Failed to send payment failed notification", 
                        telegram_id=telegram_id,
                        error=str(e))
    
    async def send_subscription_expiring_notification(
        self, 
        telegram_id: int, 
        subscription_type: str,
        days_remaining: int
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            if days_remaining <= 1:
                urgency = "üî¥ <b>–°–†–û–ß–ù–û!</b>"
                action_text = "–∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è"
            elif days_remaining <= 3:
                urgency = "üü° <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>"
                action_text = f"–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_remaining} –¥–Ω—è"
            else:
                urgency = "üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>"
                action_text = f"–∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days_remaining} –¥–Ω–µ–π"
            
            message = f"""
{urgency}

üìã <b>–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ {subscription_type} {action_text}</b>

üí° <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø –∫ VPN
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ: /start
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ ‚Äî –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 10%!

üéÅ <b>–ë–æ–Ω—É—Å –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏:</b>
‚Ä¢ –°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö

üí≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É: /start
"""
            
            await self._send_telegram_message(telegram_id, message)
            
            logger.info("Subscription expiring notification sent", 
                       telegram_id=telegram_id,
                       subscription_type=subscription_type,
                       days_remaining=days_remaining)
            
        except Exception as e:
            logger.error("Failed to send subscription expiring notification", 
                        telegram_id=telegram_id,
                        error=str(e))
    
    async def send_vpn_key_created_notification(
        self, 
        telegram_id: int, 
        vpn_key_name: str,
        server_location: str
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ VPN –∫–ª—é—á–∞"""
        try:
            message = f"""
üîë <b>VPN –∫–ª—é—á —Å–æ–∑–¥–∞–Ω!</b>

üîê <b>–ö–ª—é—á:</b> {vpn_key_name}
üåç <b>–°–µ—Ä–≤–µ—Ä:</b> {server_location}
‚ö° <b>–ü—Ä–æ—Ç–æ–∫–æ–ª:</b> VLESS + XTLS-REALITY

üíæ <b>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:</b>
‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª "üîê –ú–æ–π VPN"
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "üìÑ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
‚Ä¢ –ò–ª–∏ "üì± QR-–∫–æ–¥" –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

üì± <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</b>
‚Ä¢ V2rayN (Windows)
‚Ä¢ V2rayNG (Android)
‚Ä¢ FairVPN (iOS)
‚Ä¢ Qv2ray (Linux)

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π? /help
"""
            
            await self._send_telegram_message(telegram_id, message)
            
            logger.info("VPN key created notification sent", 
                       telegram_id=telegram_id,
                       vpn_key_name=vpn_key_name,
                       server_location=server_location)
            
        except Exception as e:
            logger.error("Failed to send VPN key created notification", 
                        telegram_id=telegram_id,
                        error=str(e))
    
    async def send_subscription_expired_notification(
        self, 
        telegram_id: int, 
        subscription_type: str
    ):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            message = f"""
‚è∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞</b>

üìã <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_type}
üìÖ <b>–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è:</b> {datetime.now().strftime('%d.%m.%Y')}

üîí <b>–î–æ—Å—Ç—É–ø –∫ VPN –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>

üí° <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å:</b>
‚Ä¢ –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞
‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: /start
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ 15% –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏—Ö—Å—è –∫–ª–∏–µ–Ω—Ç–æ–≤!

üéÅ <b>–ê–∫—Ü–∏—è –¥–ª—è –≤–∞—Å:</b>
‚Ä¢ –°–∫–∏–¥–∫–∞ 15% –Ω–∞ –ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ
‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å–º–µ–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

üí≥ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø: /start
"""
            
            await self._send_telegram_message(telegram_id, message)
            
            logger.info("Subscription expired notification sent", 
                       telegram_id=telegram_id,
                       subscription_type=subscription_type)
            
        except Exception as e:
            logger.error("Failed to send subscription expired notification", 
                        telegram_id=telegram_id,
                        error=str(e))
    
    async def _send_telegram_message(self, telegram_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API"""
        if not self.bot_token:
            logger.warning("Bot token not configured, skipping notification")
            return
        
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        payload = {
            "chat_id": telegram_id,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, timeout=30) as response:
                    if response.status == 200:
                        logger.debug("Telegram message sent successfully", telegram_id=telegram_id)
                    else:
                        response_text = await response.text()
                        logger.error("Failed to send Telegram message", 
                                   telegram_id=telegram_id,
                                   status=response.status,
                                   response=response_text)
        except Exception as e:
            logger.error("Error sending Telegram message", 
                        telegram_id=telegram_id,
                        error=str(e))

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = NotificationService() 