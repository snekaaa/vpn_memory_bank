"""
FreeKassa Payment Service Implementation
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ FreeKassa —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Factory Pattern
"""
import hashlib
import hmac
import json
import asyncio
from decimal import Decimal
from typing import Dict, Any, Optional, Tuple
from datetime import datetime, timezone
import httpx
import structlog

from services.payment_processor_base import PaymentProcessorBase
from services.freekassa_config import FreeKassaConfig, FreeKassaPaymentRequest, FreeKassaWebhookData

logger = structlog.get_logger(__name__)


class FreeKassaService(PaymentProcessorBase):
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FreeKassa –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
    
    –†–µ–∞–ª–∏–∑—É–µ—Ç Factory Pattern –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    """
    
    def __init__(self, provider_config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ FreeKassa
        
        Args:
            provider_config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏–∑ –ë–î
        """
        super().__init__(provider_config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ FreeKassa
        self.config = FreeKassaConfig.from_dict(provider_config)
        
        logger.info("FreeKassa service initialized", test_mode=self.config.test_mode)
    
    def create_payment_url(
        self, 
        amount: float,
        order_id: str, 
        description: str,
        email: Optional[str] = None,
        success_url: Optional[str] = None,
        failure_url: Optional[str] = None
    ) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        logger.info("üéØ FreeKassaService.create_payment_url called", 
                   amount=amount, order_id=order_id, description=description)
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂
            payment_request = FreeKassaPaymentRequest(
                amount=Decimal(str(amount)),
                order_id=order_id,
                description=description,
                currency='RUB',
                success_url=success_url or self.config.success_url,
                failure_url=failure_url or self.config.failure_url,
                notification_url=self.config.notification_url,
                customer_email=email,
                customer_phone=None
            )
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
            payment_request.validate(self.config)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è API FreeKassa (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
            params = {
                'm': self.config.api_key,  # Merchant ID
                'oa': str(amount),         # Order Amount
                'o': order_id,             # Order ID
                'us_desc': description,    # Description
                'currency': payment_request.currency,
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if payment_request.customer_email:
                params['us_email'] = payment_request.customer_email
            
            if payment_request.success_url:
                params['us_success'] = payment_request.success_url
                
            if payment_request.failure_url:
                params['us_fail'] = payment_request.failure_url
                
            if payment_request.notification_url:
                params['us_notification'] = payment_request.notification_url
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (–ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É FreeKassa)
            signature = self._generate_payment_signature(params)
            params['s'] = signature
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
            if self.config.test_mode:
                base_url = "https://pay.fk.money/"  # –¢–µ—Å—Ç–æ–≤—ã–π URL
            else:
                base_url = "https://pay.fk.money/"  # –ü—Ä–æ–¥–∞–∫—à–Ω URL
            
            # –°–æ–∑–¥–∞–Ω–∏–µ query string
            query_params = "&".join([f"{k}={v}" for k, v in params.items()])
            payment_url = f"{base_url}?{query_params}"
            
            logger.info("üéâ FreeKassa Payment URL created successfully", 
                       order_id=order_id, amount=amount, test_mode=self.config.test_mode,
                       url_domain=payment_url.split('?')[0] if '?' in payment_url else payment_url)
            
            return {'url': payment_url}
            
        except Exception as e:
            logger.error("Failed to create payment URL", error=str(e), order_id=order_id, amount=amount)
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ URL: {str(e)}")
    
    async def create_payment_url_async(self, amount: Decimal, order_id: str, description: str, **kwargs) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ FreeKassa
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            order_id: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
            description: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (customer_email, return_url –∏ —Ç.–¥.)
        
        Returns:
            Dict —Å URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        """
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–ª–∞—Ç–µ–∂
            payment_request = FreeKassaPaymentRequest(
                amount=amount,
                order_id=order_id,
                description=description,
                currency=kwargs.get('currency', 'RUB'),
                success_url=kwargs.get('success_url', self.config.success_url),
                failure_url=kwargs.get('failure_url', self.config.failure_url),
                notification_url=kwargs.get('notification_url', self.config.notification_url),
                customer_email=kwargs.get('customer_email'),
                customer_phone=kwargs.get('customer_phone')
            )
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
            payment_request.validate(self.config)
            
            # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã —Å –∫–æ–º–∏—Å—Å–∏–µ–π
            total_amount = self.config.calculate_total_amount(amount)
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è API FreeKassa (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
            params = {
                'm': self.config.api_key,  # Merchant ID
                'oa': str(amount),         # Order Amount
                'o': order_id,             # Order ID
                'us_desc': description,    # Description
                'currency': payment_request.currency,
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            if payment_request.customer_email:
                params['us_email'] = payment_request.customer_email
            
            if payment_request.success_url:
                params['us_success'] = payment_request.success_url
                
            if payment_request.failure_url:
                params['us_fail'] = payment_request.failure_url
                
            if payment_request.notification_url:
                params['us_notification'] = payment_request.notification_url
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (–ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –∞–ª–≥–æ—Ä–∏—Ç–º—É FreeKassa)
            signature = self._generate_payment_signature(params)
            params['s'] = signature
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ URL –¥–ª—è –æ–ø–ª–∞—Ç—ã (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
            if self.config.test_mode:
                base_url = "https://pay.fk.money/"  # –¢–µ—Å—Ç–æ–≤—ã–π URL
            else:
                base_url = "https://pay.fk.money/"  # –ü—Ä–æ–¥–∞–∫—à–Ω URL
            
            # –°–æ–∑–¥–∞–Ω–∏–µ query string
            query_params = "&".join([f"{k}={v}" for k, v in params.items()])
            payment_url = f"{base_url}?{query_params}"
            
            result = {
                'payment_url': payment_url,
                'order_id': order_id,
                'amount': amount,
                'total_amount': total_amount,
                'commission': self.config.calculate_commission(amount),
                'currency': payment_request.currency,
                'test_mode': self.config.test_mode,
                'signature': signature
            }
            
            logger.info("Payment URL created", order_id=order_id, amount=amount, test_mode=self.config.test_mode)
            
            return result
            
        except Exception as e:
            logger.error("Failed to create payment URL", error=str(e), order_id=order_id, amount=amount)
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ URL: {str(e)}")
    
    def validate_webhook_signature(self, params: Dict[str, str]) -> bool:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ webhook'–∞ (–±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)"""
        return self._validate_webhook_signature(params)
    
    def parse_webhook_data(self, params: Dict[str, str]) -> Dict[str, Any]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö webhook'–∞ (–±–∞–∑–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)"""
        webhook_data = FreeKassaWebhookData.from_request_data(params)
        return {
            'order_id': webhook_data.order_id,
            'amount': float(webhook_data.amount),
            'currency': webhook_data.currency,
            'status': webhook_data.status,
            'payment_id': webhook_data.payment_id
        }
    
    async def validate_webhook(self, webhook_data: Dict[str, Any]) -> Tuple[bool, Optional[FreeKassaWebhookData]]:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç FreeKassa
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ webhook –∑–∞–ø—Ä–æ—Å–∞
        
        Returns:
            Tuple (is_valid: bool, parsed_data: FreeKassaWebhookData | None)
        """
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö webhook
            parsed_data = FreeKassaWebhookData.from_request_data(webhook_data)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
            is_signature_valid = self._validate_webhook_signature(webhook_data)
            
            if not is_signature_valid:
                logger.warning("Invalid webhook signature", order_id=parsed_data.order_id)
                return False, None
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            if not parsed_data.order_id:
                logger.warning("Missing order_id in webhook")
                return False, None
            
            if parsed_data.amount <= 0:
                logger.warning("Invalid amount in webhook", amount=parsed_data.amount)
                return False, None
            
            logger.info("Webhook validated successfully", 
                       order_id=parsed_data.order_id, 
                       amount=parsed_data.amount,
                       status=parsed_data.status)
            
            return True, parsed_data
            
        except Exception as e:
            logger.error("Webhook validation failed", error=str(e))
            return False, None
    
    async def check_payment_status(self, order_id: str, payment_id: Optional[str] = None) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API FreeKassa
        
        Args:
            order_id: ID –∑–∞–∫–∞–∑–∞
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–∏—Å—Ç–µ–º–µ FreeKassa (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)
            params = {
                'm': self.config.api_key,  # Merchant ID
                'o': order_id,             # Order ID
                'nonce': str(int(datetime.now(timezone.utc).timestamp()))
            }
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ payment_id –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
            if payment_id:
                params['paymentId'] = payment_id
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
            signature = self._generate_api_signature(params)
            params['signature'] = signature
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
            api_url = f"{self.config.get_base_url()}/api/v1/orders/status"
            
            async with httpx.AsyncClient() as client:
                response = await client.post(api_url, json=params)
                response.raise_for_status()
                
                result = response.json()
                
                logger.info("Payment status checked", order_id=order_id, status=result.get('status'))
                
                return {
                    'order_id': order_id,
                    'status': result.get('status', 'unknown'),
                    'amount': Decimal(str(result.get('amount', '0'))),
                    'currency': result.get('currency', 'RUB'),
                    'payment_id': result.get('paymentId'),
                    'created_at': result.get('created_at'),
                    'updated_at': result.get('updated_at'),
                    'test_mode': self.config.test_mode
                }
                
        except httpx.HTTPStatusError as e:
            logger.error("HTTP error checking payment status", 
                        error=str(e), 
                        status_code=e.response.status_code,
                        order_id=order_id)
            raise Exception(f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {e.response.status_code}")
            
        except Exception as e:
            logger.error("Failed to check payment status", error=str(e), order_id=order_id)
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
    
    def _generate_payment_signature(self, params: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º FreeKassa)
        
        Args:
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞
        
        Returns:
            –ü–æ–¥–ø–∏—Å—å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        """
        # –ü–æ—Ä—è–¥–æ–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ FreeKassa)
        # –§–æ—Ä–º–∞—Ç: shopId:amount:secret1:currency:orderId
        signature_string = (
            f"{params['m']}:"      # Merchant ID (–±—ã–ª–æ shopId)
            f"{params['oa']}:"     # Order Amount (–±—ã–ª–æ sum)  
            f"{self.config.secret1}:"
            f"{params['currency']}:"
            f"{params['o']}"       # Order ID (–±—ã–ª–æ orderid)
        )
        
        logger.debug("FreeKassa signature string", signature_string=signature_string)
        
        return hashlib.md5(signature_string.encode('utf-8')).hexdigest()
    
    def _validate_webhook_signature(self, webhook_data: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ webhook
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            received_sign = webhook_data.get('SIGN', '')
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
            signature_string = (
                f"{webhook_data.get('MERCHANT_ORDER_ID', '')}:"
                f"{webhook_data.get('AMOUNT', '')}:"
                f"{self.config.secret2}"
            )
            
            expected_sign = hashlib.md5(signature_string.encode('utf-8')).hexdigest()
            
            return hmac.compare_digest(received_sign.lower(), expected_sign.lower())
            
        except Exception as e:
            logger.error("Error validating webhook signature", error=str(e))
            return False
    
    def _generate_api_signature(self, params: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        
        Args:
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã API –∑–∞–ø—Ä–æ—Å–∞
        
        Returns:
            –ü–æ–¥–ø–∏—Å—å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
        """
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (–∏—Å–∫–ª—é—á–∞—è signature)
        sorted_params = sorted((k, v) for k, v in params.items() if k != 'signature')
        query_string = '&'.join([f"{k}={v}" for k, v in sorted_params])
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
        signature_string = f"{query_string}&{self.config.secret1}"
        
        return hashlib.sha256(signature_string.encode('utf-8')).hexdigest()
    
    async def handle_successful_payment(self, webhook_data: FreeKassaWebhookData) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info("Processing successful payment", 
                       order_id=webhook_data.order_id,
                       amount=webhook_data.amount,
                       payment_id=webhook_data.payment_id)
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            # (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏, –∞–∫—Ç–∏–≤–∞—Ü–∏—è VPN –∫–ª—é—á–µ–π –∏ —Ç.–¥.)
            
            return {
                'status': 'success',
                'order_id': webhook_data.order_id,
                'amount': webhook_data.amount,
                'payment_id': webhook_data.payment_id,
                'processed_at': datetime.now(timezone.utc).isoformat()
            }
            
        except Exception as e:
            logger.error("Failed to handle successful payment", 
                        error=str(e), 
                        order_id=webhook_data.order_id)
            raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
    
    async def handle_failed_payment(self, webhook_data: FreeKassaWebhookData) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ –æ –ø–ª–∞—Ç–µ–∂–µ
        
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        try:
            logger.info("Processing failed payment", 
                       order_id=webhook_data.order_id,
                       amount=webhook_data.amount)
            
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
            # (–æ—Ç–º–µ—Ç–∫–∞ –æ –Ω–µ—É–¥–∞—á–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç.–¥.)
            
            return {
                'status': 'failed',
                'order_id': webhook_data.order_id,
                'amount': webhook_data.amount,
                'processed_at': datetime.now(timezone.utc).isoformat()
            }
            
        except Exception as e:
            logger.error("Failed to handle failed payment", 
                        error=str(e), 
                        order_id=webhook_data.order_id)
            raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
    
    def get_supported_currencies(self) -> list[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç"""
        return ['RUB', 'USD', 'EUR', 'UAH', 'KZT']
    
    def get_commission_info(self, amount: Decimal) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∏—Å—Å–∏–∏"""
        commission = self.config.calculate_commission(amount)
        total = self.config.calculate_total_amount(amount)
        
        return {
            'amount': amount,
            'commission': commission,
            'commission_percent': self.config.commission_percent,
            'commission_fixed': self.config.commission_fixed,
            'total_amount': total
        } 