"""
FreeKassa Payment Service Implementation using API
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ FreeKassa —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API
"""
import hashlib
import hmac
import time
import aiohttp
import urllib.parse
from typing import Optional, Dict, Any
import structlog
import json

logger = structlog.get_logger(__name__)

class FreeKassaService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å FreeKassa –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —á–µ—Ä–µ–∑ API
    """
    
    def __init__(self, merchant_id: str, api_key: str, secret_word_1: str, secret_word_2: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ FreeKassa
        
        Args:
            merchant_id: ID –º–∞–≥–∞–∑–∏–Ω–∞ (shopId)
            api_key: API –∫–ª—é—á
            secret_word_1: –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —Ñ–æ—Ä–º—ã –æ–ø–ª–∞—Ç—ã
            secret_word_2: –°–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ –¥–ª—è webhook
        """
        self.merchant_id = merchant_id
        self.api_key = api_key
        self.secret_word_1 = secret_word_1
        self.secret_word_2 = secret_word_2
        self.api_base_url = "https://api.fk.life/v1"
        
        logger.info("FreeKassa service initialized", merchant_id=merchant_id)
        
    def _generate_api_signature(self, data: Dict[str, Any]) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
        –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á–∞–º, –æ–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º |
        """
        # –ò—Å–∫–ª—é—á–∞–µ–º signature –∏–∑ –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        filtered_data = {k: v for k, v in data.items() if k != 'signature'}
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–ª—é—á–∞–º
        sorted_keys = sorted(filtered_data.keys())
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º |
        values = [str(filtered_data[key]) for key in sorted_keys]
        signature_string = '|'.join(values)
        
        logger.info(f"FreeKassa signature string: {signature_string}")
        
        # –°–æ–∑–¥–∞–µ–º HMAC SHA256 –ø–æ–¥–ø–∏—Å—å
        signature = hmac.new(
            self.api_key.encode('utf-8'),
            signature_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
        
        return signature
    
    async def create_payment_url(self, amount: float, order_id: str, 
                                currency: str = "RUB", email: Optional[str] = None, 
                                user_ip: str = "127.0.0.1", payment_system_id: int = 4) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ FreeKassa API
        
        Args:
            amount: –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞
            order_id: ID –∑–∞–∫–∞–∑–∞ –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
            currency: –í–∞–ª—é—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é RUB)
            email: Email –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
            user_ip: IP –∞–¥—Ä–µ—Å –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞
            payment_system_id: ID –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (4 = VISA/MasterCard)
        
        Returns:
            URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –æ–ø–ª–∞—Ç—É
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º nonce (—É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–ø—Ä–æ—Å–∞)
            nonce = int(time.time())
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            data = {
                'shopId': int(self.merchant_id),
                'nonce': nonce,
                'paymentId': str(order_id),
                'i': payment_system_id,
                'email': email or 'noreply@system.local',
                'ip': user_ip,
                'amount': float(amount),
                'currency': currency
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            signature = self._generate_api_signature(data)
            data['signature'] = signature
            
            logger.info(f"FreeKassa API request data: {data}")
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            url = f"{self.api_base_url}/orders/create"
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    response_text = await response.text()
                    logger.info(f"FreeKassa API response status: {response.status}")
                    logger.info(f"FreeKassa API response: {response_text}")
                    
                    if response.status == 200:
                        result = await response.json()
                        
                        if result.get('type') == 'success':
                            payment_url = result.get('location')
                            if payment_url:
                                logger.info(f"FreeKassa payment URL created: {payment_url}")
                                return payment_url
                            else:
                                logger.error(f"No location in FreeKassa response: {result}")
                                raise Exception("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –±–µ–∑ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É")
                        else:
                            logger.error(f"FreeKassa API error: {result}")
                            raise Exception(f"–û—à–∏–±–∫–∞ API FreeKassa: {result}")
                    else:
                        logger.error(f"FreeKassa API HTTP error {response.status}: {response_text}")
                        raise Exception(f"–û—à–∏–±–∫–∞ HTTP {response.status} –æ—Ç FreeKassa")
        
        except Exception as e:
            error_msg = str(e)
            logger.error(f"Error creating FreeKassa payment: {e}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ FreeKassa –¥–ª—è –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if "Merchant not activated" in error_msg or "401" in error_msg:
                raise Exception("üö´ –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ FreeKassa –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã.")
            elif "HTTP 400" in error_msg:
                raise Exception("üîß –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            elif "HTTP 403" in error_msg:
                raise Exception("üîê –î–æ—Å—Ç—É–ø –∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            elif "HTTP 500" in error_msg:
                raise Exception("‚öôÔ∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            else:
                raise Exception(f"üí≥ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {error_msg}")
    
    def _validate_webhook_signature(self, webhook_data: Dict[str, Any]) -> bool:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ webhook
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –≤–∞–ª–∏–¥–Ω–∞
        """
        try:
            received_sign = webhook_data.get('SIGN', '')
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            signature_string = (
                f"{webhook_data.get('MERCHANT_ORDER_ID', '')}:"
                f"{webhook_data.get('AMOUNT', '')}:"
                f"{self.secret_word_2}"
            )
            
            expected_sign = hashlib.md5(signature_string.encode('utf-8')).hexdigest()
            
            return hmac.compare_digest(received_sign.lower(), expected_sign.lower())
            
        except Exception as e:
            logger.error(f"Error validating FreeKassa webhook signature: {e}")
            return False
    
    async def process_webhook(self, webhook_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç FreeKassa
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ webhook
        
        Returns:
            –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
            if not self._validate_webhook_signature(webhook_data):
                raise Exception("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment_data = {
                'external_payment_id': webhook_data.get('intid'),  # ID –ø–ª–∞—Ç–µ–∂–∞ –≤ FreeKassa
                'order_id': webhook_data.get('MERCHANT_ORDER_ID'),  # –ù–∞—à ID –∑–∞–∫–∞–∑–∞
                'amount': float(webhook_data.get('AMOUNT', 0)),
                'currency': webhook_data.get('CURRENCY', 'RUB'),
                'status': 'completed',  # FreeKassa –ø—Ä–∏—Å—ã–ª–∞–µ—Ç webhook —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
                'payer_details': {
                    'email': webhook_data.get('MERCHANT_ORDER_ID')  # –í FreeKassa –Ω–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è email –≤ webhook
                }
            }
            
            logger.info(f"FreeKassa webhook processed: {payment_data}")
            return payment_data
            
        except Exception as e:
            logger.error(f"Error processing FreeKassa webhook: {e}")
            raise
    
    async def check_payment_status(self, payment_id: str) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ API
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        Returns:
            –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º nonce
            nonce = int(time.time())
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            data = {
                'shopId': int(self.merchant_id),
                'nonce': nonce,
                'paymentId': str(payment_id)
            }
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            signature = self._generate_api_signature(data)
            data['signature'] = signature
            
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            url = f"{self.api_base_url}/orders"
            
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=data) as response:
                    if response.status == 200:
                        result = await response.json()
                        
                        if result.get('type') == 'success':
                            orders = result.get('orders', [])
                            if orders:
                                order = orders[0]  # –ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –≤ —Å–ø–∏—Å–∫–µ
                                status_map = {
                                    0: 'pending',    # –ù–æ–≤—ã–π
                                    1: 'completed',  # –û–ø–ª–∞—á–µ–Ω
                                    6: 'refunded',   # –í–æ–∑–≤—Ä–∞—Ç
                                    8: 'failed',     # –û—à–∏–±–∫–∞
                                    9: 'cancelled'   # –û—Ç–º–µ–Ω–∞
                                }
                                
                                return {
                                    'status': status_map.get(order.get('status'), 'unknown'),
                                    'amount': order.get('amount'),
                                    'currency': order.get('currency'),
                                    'external_id': order.get('fk_order_id')
                                }
                        
                        return {'status': 'not_found'}
                    else:
                        raise Exception(f"HTTP {response.status}")
                        
        except Exception as e:
            logger.error(f"Error checking FreeKassa payment status: {e}")
            return {'status': 'error', 'error': str(e)} 