"""
–¢–µ—Å—Ç VPNAccessControlService —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID=2 (–∏—Å—Ç–µ–∫—à–∞—è –ø–æ–¥–ø–∏—Å–∫–∞)
"""

import asyncio
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from config.database import get_db
from services.vpn_access_control_service import VPNAccessControlService, check_user_vpn_access
from models.user import User
from sqlalchemy import select

class VPNAccessControlTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è VPN Access Control Service"""
    
    def __init__(self):
        self.test_results = []
        self.test_user_id = 2  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        
    async def log_test(self, test_name: str, success: bool, message: str, details: dict = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤"""
        result = {
            "test": test_name,
            "success": success,
            "message": message,
            "timestamp": datetime.now().isoformat(),
            "details": details or {}
        }
        self.test_results.append(result)
        
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{status} {test_name}: {message}")
        if details:
            for key, value in details.items():
                print(f"   {key}: {value}")
    
    async def test_get_user_details(self, db_session):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            result = await db_session.execute(
                select(User).where(User.id == self.test_user_id)
            )
            user = result.scalar_one_or_none()
            
            if not user:
                await self.log_test(
                    "Get User Details",
                    False,
                    f"Test user with ID={self.test_user_id} not found in database"
                )
                return None
            
            await self.log_test(
                "Get User Details",
                True,
                f"Test user found",
                {
                    "user_id": user.id,
                    "telegram_id": user.telegram_id,
                    "subscription_status": user.subscription_status.value if user.subscription_status else "none",
                    "valid_until": user.valid_until.isoformat() if user.valid_until else None,
                    "has_active_subscription": user.has_active_subscription,
                    "created_at": user.created_at.isoformat() if user.created_at else None
                }
            )
            return user
            
        except Exception as e:
            await self.log_test(
                "Get User Details",
                False,
                f"Error getting user details: {str(e)}"
            )
            return None
    
    async def test_vpn_access_check(self, db_session, user):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ VPN –¥–æ—Å—Ç—É–ø–∞"""
        try:
            service = VPNAccessControlService(db_session)
            access_result = await service.check_vpn_access(user.telegram_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
            expected_access = user.has_active_subscription
            actual_access = access_result.get("has_access", False)
            
            success = actual_access == expected_access
            
            await self.log_test(
                "VPN Access Check",
                success,
                f"Access check result: {actual_access} (expected: {expected_access})",
                {
                    "has_access": actual_access,
                    "reason": access_result.get("reason"),
                    "message": access_result.get("message"),
                    "days_remaining": access_result.get("days_remaining"),
                    "user_id": access_result.get("user_id")
                }
            )
            
            return access_result
            
        except Exception as e:
            await self.log_test(
                "VPN Access Check",
                False,
                f"Error checking VPN access: {str(e)}"
            )
            return None
    
    async def test_subscription_plans_retrieval(self, db_session, user):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –¥–æ—Å—Ç—É–ø–∞"""
        try:
            service = VPNAccessControlService(db_session)
            plans_result = await service.get_subscription_plans_for_user(user.telegram_id)
            
            success = plans_result.get("success", False)
            plans_count = len(plans_result.get("plans", {}))
            
            await self.log_test(
                "Subscription Plans Retrieval",
                success,
                f"Plans retrieved successfully: {plans_count} plans available",
                {
                    "success": success,
                    "plans_count": plans_count,
                    "message": plans_result.get("message", "")[:100] + "..." if len(plans_result.get("message", "")) > 100 else plans_result.get("message", "")
                }
            )
            
            return plans_result
            
        except Exception as e:
            await self.log_test(
                "Subscription Plans Retrieval",
                False,
                f"Error retrieving subscription plans: {str(e)}"
            )
            return None
    
    async def test_helper_function(self, db_session, user):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä–∞ check_user_vpn_access"""
        try:
            access_result = await check_user_vpn_access(db_session, user.telegram_id)
            
            success = isinstance(access_result, dict) and "has_access" in access_result
            
            await self.log_test(
                "Helper Function Test",
                success,
                f"Helper function works correctly",
                {
                    "has_access": access_result.get("has_access"),
                    "reason": access_result.get("reason"),
                    "user_id": access_result.get("user_id")
                }
            )
            
            return access_result
            
        except Exception as e:
            await self.log_test(
                "Helper Function Test",
                False,
                f"Error with helper function: {str(e)}"
            )
            return None
    
    async def test_subscription_details(self, db_session, user):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
        try:
            service = VPNAccessControlService(db_session)
            details = await service.check_user_subscription_details(user.telegram_id)
            
            success = details.get("found", False)
            
            await self.log_test(
                "Subscription Details",
                success,
                f"Subscription details retrieved",
                {
                    "found": details.get("found"),
                    "subscription_status": details.get("subscription_status"),
                    "valid_until_formatted": details.get("valid_until_formatted"),
                    "has_active_subscription": details.get("has_active_subscription"),
                    "days_remaining": details.get("days_remaining"),
                    "is_expired": details.get("is_expired"),
                    "autopay_enabled": details.get("autopay_enabled")
                }
            )
            
            return details
            
        except Exception as e:
            await self.log_test(
                "Subscription Details",
                False,
                f"Error getting subscription details: {str(e)}"
            )
            return None
    
    async def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
        print("üß™ Starting VPN Access Control Tests...")
        print("=" * 50)
        print(f"üìã Testing with user ID: {self.test_user_id} (should have expired subscription)")
        print("=" * 50)
        
        async for db_session in get_db():
            try:
                # 1. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = await self.test_get_user_details(db_session)
                if not user:
                    print("‚ùå Cannot proceed without test user")
                    return
                
                # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º VPN –¥–æ—Å—Ç—É–ø
                access_result = await self.test_vpn_access_check(db_session, user)
                
                # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
                plans_result = await self.test_subscription_plans_retrieval(db_session, user)
                
                # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é-—Ö–µ–ª–ø–µ—Ä
                helper_result = await self.test_helper_function(db_session, user)
                
                # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
                details_result = await self.test_subscription_details(db_session, user)
                
                break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ async generator
                
            except Exception as e:
                print(f"‚ùå Database connection error: {e}")
                return
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        await self.print_test_report()
    
    async def print_test_report(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n" + "=" * 50)
        print("üìä TEST REPORT")
        print("=" * 50)
        
        total_tests = len(self.test_results)
        passed_tests = len([r for r in self.test_results if r["success"]])
        failed_tests = total_tests - passed_tests
        
        print(f"Total Tests: {total_tests}")
        print(f"‚úÖ Passed: {passed_tests}")
        print(f"‚ùå Failed: {failed_tests}")
        print(f"Success Rate: {(passed_tests/total_tests*100):.1f}%" if total_tests > 0 else "N/A")
        
        print("\nüìã DETAILED RESULTS:")
        for result in self.test_results:
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{status} {result['test']}: {result['message']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã
        print("\nüí° RECOMMENDATIONS:")
        if failed_tests == 0:
            print("‚úÖ All tests passed! VPNAccessControlService is working correctly.")
            print("üöÄ Ready to proceed to next step: Update VPN handlers")
        else:
            print("‚ö†Ô∏è  Some tests failed. Issues to address:")
            for result in self.test_results:
                if not result["success"]:
                    print(f"   - {result['test']}: {result['message']}")
        
        print("\nüîß NEXT STEPS:")
        if failed_tests == 0:
            print("1. ‚úÖ VPNAccessControlService implemented and tested")
            print("2. üöÄ Ready to update VPN handlers with subscription check")
            print("3. üöÄ Ready to implement VPNKeyLifecycleService")
            print("4. üöÄ Continue with main implementation (Step 4)")
        else:
            print("1. üîß Fix failing access control checks")
            print("2. üîß Verify database connections and user data")
            print("3. ‚è∏Ô∏è  Hold on handler updates until access control is stable")

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tester = VPNAccessControlTester()
    await tester.run_all_tests()

if __name__ == "__main__":
    print("üöÄ VPN Access Control Testing Suite")
    print("=" * 50)
    print("‚ÑπÔ∏è  This test will check VPN access control with real user data")
    print("‚ÑπÔ∏è  Testing with user ID=2 (should have expired subscription)")
    print("=" * 50)
    
    asyncio.run(main()) 