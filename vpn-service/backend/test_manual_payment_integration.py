#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è Manual Payment Management System

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
1. –°–æ–∑–¥–∞–Ω–∏–µ —Ä—É—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
2. –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞  
3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
"""

import asyncio
import sys
import os
from datetime import datetime, timezone

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy.ext.asyncio import AsyncSession
from config.database import get_db
from models.user import User, UserSubscriptionStatus
from models.payment import Payment, PaymentStatus, PaymentMethod
from services.payment_management_service import get_payment_management_service
from services.trial_automation_service import get_trial_automation_service
from services.integration_service import IntegrationService


async def test_manual_payment_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    print("\n=== –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä—É—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ===")
    
    async for db in get_db():
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                telegram_id=999999999,
                username="test_user",
                first_name="Test",
                language_code="ru",
                is_active=True,
                subscription_status=UserSubscriptionStatus.inactive
            )
            
            db.add(test_user)
            await db.commit()
            await db.refresh(test_user)
            print(f"‚úì –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {test_user.id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ä—É—á–Ω–æ–π –ø–ª–∞—Ç–µ–∂
            payment_service = get_payment_management_service(db)
            
            payment = await payment_service.create_manual_payment(
                user_id=test_user.id,
                amount=100.0,
                description="–¢–µ—Å—Ç–æ–≤—ã–π —Ä—É—á–Ω–æ–π –ø–ª–∞—Ç–µ–∂ - –º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                payment_method=PaymentMethod.manual_admin,
                admin_user="test_admin"
            )
            
            print(f"‚úì –°–æ–∑–¥–∞–Ω —Ä—É—á–Ω–æ–π –ø–ª–∞—Ç–µ–∂: ID {payment.id}, —Å—É–º–º–∞ {payment.amount}‚ÇΩ")
            assert payment.status == PaymentStatus.PENDING
            assert payment.amount == 100.0
            
            # –ò–∑–º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ SUCCEEDED
            updated_payment = await payment_service.update_payment_status(
                payment_id=payment.id,
                new_status=PaymentStatus.SUCCEEDED,
                admin_user="test_admin",
                reason="Test payment confirmation"
            )
            
            print(f"‚úì –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {updated_payment.status.value}")
            assert updated_payment.status == PaymentStatus.SUCCEEDED
            assert updated_payment.paid_at is not None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            await db.refresh(test_user)
            print(f"‚úì –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∞ –¥–æ: {test_user.valid_until}")
            assert test_user.subscription_status == UserSubscriptionStatus.active
            assert test_user.valid_until is not None
            
            return True
            
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            await db.rollback()
            break


async def test_trial_automation():
    """–¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    print("\n=== –¢–µ—Å—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ ===")
    
    async for db in get_db():
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            payment_service = get_payment_management_service(db)
            trial_service = await get_trial_automation_service(payment_service)
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            new_user = User(
                telegram_id=888888888,
                username="trial_test_user",
                first_name="Trial Test",
                language_code="ru",
                is_active=True,
                subscription_status=UserSubscriptionStatus.inactive
            )
            
            db.add(new_user)
            await db.commit()
            await db.refresh(new_user)
            print(f"‚úì –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ID {new_user.id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂
            trial_payment = await trial_service.create_trial_for_new_user(new_user, db)
            
            if trial_payment:
                print(f"‚úì –°–æ–∑–¥–∞–Ω —Ç—Ä–∏–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂: ID {trial_payment.id}")
                print(f"  - –°—É–º–º–∞: {trial_payment.amount}‚ÇΩ")
                print(f"  - –°—Ç–∞—Ç—É—Å: {trial_payment.status.value}")
                print(f"  - –ú–µ—Ç–æ–¥: {trial_payment.payment_method.value}")
                print(f"  - –û–ø–∏—Å–∞–Ω–∏–µ: {trial_payment.description}")
                
                assert trial_payment.amount == 0.0
                assert trial_payment.status == PaymentStatus.SUCCEEDED
                assert trial_payment.payment_method == PaymentMethod.auto_trial
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞
                await db.refresh(new_user)
                print(f"‚úì –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ: {new_user.valid_until}")
                assert new_user.subscription_status == UserSubscriptionStatus.active
                
                return True
            else:
                print("‚úó –¢—Ä–∏–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")
                return False
                
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ —Ç—Ä–∏–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
        finally:
            # –û—á–∏—Å—Ç–∫–∞
            await db.rollback()
            break


async def test_integration_service_with_trial():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—Ä–∏–∞–ª—å–Ω—ã–º –ø–ª–∞—Ç–µ–∂–æ–º"""
    print("\n=== –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å —Ç—Ä–∏–∞–ª–æ–º ===")
    
    try:
        integration_service = IntegrationService()
        
        # –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_data = {
            "username": "integration_test",
            "first_name": "Integration",
            "last_name": "Test",
            "language_code": "ru"
        }
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
        result = await integration_service.create_user_with_subscription(
            telegram_id=777777777,
            user_data=user_data
        )
        
        print(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {result['success']}")
        print(f"  - User ID: {result['user_id']}")
        print(f"  - Message: {result['message']}")
        
        if result.get('trial_payment'):
            trial_info = result['trial_payment']
            print(f"  - Trial Payment ID: {trial_info['id']}")
            print(f"  - Trial Amount: {trial_info['amount']}‚ÇΩ")
            print(f"  - Trial Status: {trial_info['status']}")
            print(f"  - Trial Description: {trial_info['description']}")
        
        assert result['success'] is True
        assert result['user_id'] is not None
        assert result.get('trial_payment') is not None
        
        return True
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ Manual Payment Management System")
    
    tests = [
        ("Manual Payment Creation", test_manual_payment_creation),
        ("Trial Automation", test_trial_automation),
        ("Integration Service with Trial", test_integration_service_with_trial)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*60}")
        print(f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_name}")
        print('='*60)
        
        try:
            result = await test_func()
            results.append((test_name, result))
            
            if result:
                print(f"‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù: {test_name}")
            else:
                print(f"‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù: {test_name}")
                
        except Exception as e:
            print(f"üí• –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {test_name} - {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\n{'='*60}")
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print('='*60)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        print(f"{status}: {test_name}")
    
    print(f"\n–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –£–°–ü–ï–®–ù–û –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ Manual Payment Management System –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    else:
        print("‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞")
    
    return passed == total


if __name__ == "__main__":
    asyncio.run(main()) 