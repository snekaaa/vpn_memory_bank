"""
VPN Service Backend - Main Application
–í–∫–ª—é—á–∞–µ—Ç API –∏ –∞–¥–º–∏–Ω–∫—É —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –Ω–æ–¥
"""

import logging
import asyncio
from datetime import datetime
from fastapi import FastAPI, Request, Depends, HTTPException, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from fastapi.staticfiles import StaticFiles
from sqlalchemy.ext.asyncio import AsyncSession
from pathlib import Path

from config.database import get_db, get_db_session, init_database
from routes.admin_nodes import router as nodes_router
from routes.test_routes import router as test_router
from routes.integration import router as integration_router
from routes.payments import router as api_payments_router
from routes.users import router as api_users_router
from routes.plans import router as plans_router
from routes.webhooks import router as webhooks_router
from services.health_checker import HealthChecker
from app.admin.routes import router as admin_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="VPN Service", version="1.0.0")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Jinja2 templates
templates = Jinja2Templates(directory=["backend/templates", "backend/app/templates"])

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="app/static"), name="static")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
app.include_router(admin_router)
app.include_router(nodes_router)
app.include_router(test_router)
app.include_router(integration_router, prefix="/api/v1")
app.include_router(api_payments_router, prefix="/api/v1")
app.include_router(api_users_router, prefix="/api/v1")
app.include_router(webhooks_router, prefix="/api/v1")
app.include_router(plans_router)

# –ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –Ω–æ–¥ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
HEALTH_CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç

@app.on_event("startup")
async def startup_event():
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_database()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –Ω–æ–¥
    asyncio.create_task(health_check_task())
    
    logger.info("üöÄ VPN Service Backend –∑–∞–ø—É—â–µ–Ω!")
    logger.info("üìã –ó–∞–≥—Ä—É–∂–µ–Ω—ã –º–æ–¥—É–ª–∏:")
    logger.info("  ‚úÖ Admin Interface - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    logger.info("  ‚úÖ Multi-Node - –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ VPN –Ω–æ–¥")
    logger.info("  ‚úÖ Health Checker - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è –Ω–æ–¥")

async def health_check_task():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –Ω–æ–¥"""
    logger.info("üè• –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –Ω–æ–¥")
    
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
            db = get_db_session()
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä HealthChecker
            health_checker = HealthChecker(db)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –Ω–æ–¥—ã
            logger.info("üîç –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ—Ö –Ω–æ–¥...")
            results = await health_checker.check_all_nodes()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            healthy_nodes = sum(1 for r in results.values() if r.get('is_healthy', False))
            total_nodes = len(results)
            logger.info(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {healthy_nodes}/{total_nodes} –Ω–æ–¥ –∑–¥–æ—Ä–æ–≤—ã")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(HEALTH_CHECK_INTERVAL)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è –Ω–æ–¥: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
            await asyncio.sleep(60)

@app.get("/", response_class=HTMLResponse)
async def admin_index(request: Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–¥–º–∏–Ω–∫–∏"""
    return templates.TemplateResponse("admin/index.html", {
        "request": request,
        "title": "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
    })

@app.get("/dashboard", response_class=HTMLResponse)
async def admin_dashboard(request: Request, db: AsyncSession = Depends(get_db)):
    """–î–∞—à–±–æ—Ä–¥ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ–±–∏—Ä–∞—Ç—å—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    
    return templates.TemplateResponse("admin/dashboard.html", {
        "request": request,
        "title": "–î–∞—à–±–æ—Ä–¥"
    })

@app.get("/login", response_class=HTMLResponse)
async def login_page(request: Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞"""
    return templates.TemplateResponse("admin/login.html", {
        "request": request,
        "title": "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É"
    })

@app.post("/login")
async def login(
    request: Request,
    username: str = Form(...),
    password: str = Form(...)
):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return RedirectResponse(url="/", status_code=303)

@app.get("/logout")
async def logout():
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã—Ö–æ–¥–∞
    
    return RedirectResponse(url="/login", status_code=303)

@app.get("/health")
async def health_check():
    """Health check endpoint –¥–ª—è Docker"""
    return {"status": "healthy", "timestamp": datetime.utcnow().isoformat()}

if __name__ == "__main__":
    import uvicorn
    print("üöÄ Starting VPN Service Backend...")
    print("üìç Access: http://localhost:8001")
    print("üîß Components:")
    print("   - FastAPI: ‚úÖ")
    print("   - Jinja2: ‚úÖ") 
    print("   - Bootstrap 5: ‚úÖ")
    print("   - Chart.js: ‚úÖ")
    print("   - Node Management: ‚úÖ")
    
    uvicorn.run(app, host="0.0.0.0", port=8001) 