"""
Subscription Expiry Handler
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è VPN –∫–ª—é—á–µ–π –ø—Ä–∏ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ cron —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
"""

import asyncio
import structlog
from datetime import datetime, timezone
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from typing import List

from config.database import get_db
from models.user import User
from services.vpn_key_lifecycle_service import VPNKeyLifecycleService

logger = structlog.get_logger(__name__)

async def get_users_with_expired_subscriptions(db: AsyncSession) -> List[User]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    
    Args:
        db: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        List[User]: –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
    """
    try:
        now = datetime.now(timezone.utc)
        
        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
        result = await db.execute(
            select(User).where(
                User.valid_until.isnot(None),  # –ï—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞
                User.valid_until < now,  # –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                User.is_active == True  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
            )
        )
        
        expired_users = result.scalars().all()
        
        logger.info("Found users with expired subscriptions", 
                   count=len(expired_users),
                   timestamp=now.isoformat())
        
        return expired_users
        
    except Exception as e:
        logger.error("Error getting users with expired subscriptions", 
                    error=str(e))
        return []

async def handle_expired_subscriptions():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    logger.info("üîÑ Starting subscription expiry handling process")
    
    total_processed = 0
    total_deactivated_keys = 0
    errors = []
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        async for db in get_db():
            try:
                # 1. –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–æ–π
                expired_users = await get_users_with_expired_subscriptions(db)
                
                if not expired_users:
                    logger.info("üì≠ No users with expired subscriptions found")
                    return {
                        "success": True,
                        "message": "No expired subscriptions to process",
                        "processed_users": 0,
                        "deactivated_keys": 0
                    }
                
                # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                lifecycle_service = VPNKeyLifecycleService(db)
                
                for user in expired_users:
                    try:
                        logger.info("üîí Processing expired user", 
                                   user_id=user.id,
                                   telegram_id=user.telegram_id,
                                   expired_at=user.valid_until.isoformat() if user.valid_until else None)
                        
                        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º VPN –∫–ª—é—á–∏
                        result = await lifecycle_service.deactivate_user_keys(user.id)
                        
                        if result.get("success"):
                            deactivated_count = result.get("deactivated_count", 0)
                            total_deactivated_keys += deactivated_count
                            
                            logger.info("‚úÖ Successfully processed expired user", 
                                       user_id=user.id,
                                       deactivated_keys=deactivated_count)
                        else:
                            error_msg = f"Failed to deactivate keys for user {user.id}: {result.get('error', 'Unknown error')}"
                            errors.append(error_msg)
                            logger.error("‚ùå Failed to process expired user", 
                                       user_id=user.id,
                                       error=result.get('error'))
                        
                        total_processed += 1
                        
                    except Exception as e:
                        error_msg = f"Error processing expired user {user.id}: {str(e)}"
                        errors.append(error_msg)
                        logger.error("üí• Exception processing expired user", 
                                   user_id=user.id,
                                   error=str(e))
                
                # 3. –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await db.commit()
                
                # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = {
                    "success": True,
                    "message": f"Processed {total_processed} expired users, deactivated {total_deactivated_keys} keys",
                    "processed_users": total_processed,
                    "deactivated_keys": total_deactivated_keys,
                    "errors": errors
                }
                
                logger.info("üîí Subscription expiry handling completed", 
                           result=result)
                
                return result
                
            except Exception as e:
                await db.rollback()
                raise e
            finally:
                await db.close()
                
    except Exception as e:
        error_msg = f"Critical error in subscription expiry handling: {str(e)}"
        logger.error("üí• Critical error in expiry handling", error=str(e))
        
        return {
            "success": False,
            "error": error_msg,
            "processed_users": total_processed,
            "deactivated_keys": total_deactivated_keys
        }

async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞"""
    logger.info("üöÄ Starting Subscription Expiry Handler")
    
    result = await handle_expired_subscriptions()
    
    if result.get("success"):
        logger.info("‚úÖ Subscription expiry handling completed successfully", 
                   summary=result)
    else:
        logger.error("‚ùå Subscription expiry handling failed", 
                    error=result.get("error"))
        exit(1)

if __name__ == "__main__":
    """
    –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    
    –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ crontab:
    # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
    0 */6 * * * cd /path/to/project && python -m scripts.subscription_expiry_handler
    
    # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 02:00
    0 2 * * * cd /path/to/project && python -m scripts.subscription_expiry_handler
    """
    
    asyncio.run(main()) 